// modules are defined as an array
// [ module function, map of requires ]
//
// map of requires is short require name -> numeric require
//
// anything defined in a previous bundle is accessed via the
// orig method which is the require for previous bundles

// eslint-disable-next-line no-global-assign
parcelRequire = (function (modules, cache, entry, globalName) {
  // Save the require from previous bundle to this closure if any
  var previousRequire = typeof parcelRequire === 'function' && parcelRequire;
  var nodeRequire = typeof require === 'function' && require;

  function newRequire(name, jumped) {
    if (!cache[name]) {
      if (!modules[name]) {
        // if we cannot find the module within our internal map or
        // cache jump to the current global require ie. the last bundle
        // that was added to the page.
        var currentRequire = typeof parcelRequire === 'function' && parcelRequire;
        if (!jumped && currentRequire) {
          return currentRequire(name, true);
        }

        // If there are other bundles on this page the require from the
        // previous one is saved to 'previousRequire'. Repeat this as
        // many times as there are bundles until the module is found or
        // we exhaust the require chain.
        if (previousRequire) {
          return previousRequire(name, true);
        }

        // Try the node require function if it exists.
        if (nodeRequire && typeof name === 'string') {
          return nodeRequire(name);
        }

        var err = new Error('Cannot find module \'' + name + '\'');
        err.code = 'MODULE_NOT_FOUND';
        throw err;
      }

      localRequire.resolve = resolve;
      localRequire.cache = {};

      var module = cache[name] = new newRequire.Module(name);

      modules[name][0].call(module.exports, localRequire, module, module.exports, this);
    }

    return cache[name].exports;

    function localRequire(x){
      return newRequire(localRequire.resolve(x));
    }

    function resolve(x){
      return modules[name][1][x] || x;
    }
  }

  function Module(moduleName) {
    this.id = moduleName;
    this.bundle = newRequire;
    this.exports = {};
  }

  newRequire.isParcelRequire = true;
  newRequire.Module = Module;
  newRequire.modules = modules;
  newRequire.cache = cache;
  newRequire.parent = previousRequire;
  newRequire.register = function (id, exports) {
    modules[id] = [function (require, module) {
      module.exports = exports;
    }, {}];
  };

  for (var i = 0; i < entry.length; i++) {
    newRequire(entry[i]);
  }

  if (entry.length) {
    // Expose entry point to Node, AMD or browser globals
    // Based on https://github.com/ForbesLindesay/umd/blob/master/template.js
    var mainExports = newRequire(entry[entry.length - 1]);

    // CommonJS
    if (typeof exports === "object" && typeof module !== "undefined") {
      module.exports = mainExports;

    // RequireJS
    } else if (typeof define === "function" && define.amd) {
     define(function () {
       return mainExports;
     });

    // <script>
    } else if (globalName) {
      this[globalName] = mainExports;
    }
  }

  // Override the current require with this new one
  return newRequire;
})({"hADF":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.dependencies = exports.devDependencies = exports.scripts = exports.repository = exports.module = exports.jsdelivr = exports.unpkg = exports.main = exports.author = exports.license = exports.homepage = exports.keywords = exports.description = exports.version = exports.name = void 0;
var name = "d3";
exports.name = name;
var version = "5.7.0";
exports.version = version;
var description = "Data-Driven Documents";
exports.description = description;
var keywords = ["dom", "visualization", "svg", "animation", "canvas"];
exports.keywords = keywords;
var homepage = "https://d3js.org";
exports.homepage = homepage;
var license = "BSD-3-Clause";
exports.license = license;
var author = {
  "name": "Mike Bostock",
  "url": "https://bost.ocks.org/mike"
};
exports.author = author;
var main = "dist/d3.node.js";
exports.main = main;
var unpkg = "dist/d3.min.js";
exports.unpkg = unpkg;
var jsdelivr = "dist/d3.min.js";
exports.jsdelivr = jsdelivr;
var _module = "index.js";
exports.module = _module;
var repository = {
  "type": "git",
  "url": "https://github.com/d3/d3.git"
};
exports.repository = repository;
var scripts = {
  "pretest": "rimraf dist && mkdir dist && json2module package.json > dist/package.js && node rollup.node",
  "test": "tape 'test/**/*-test.js'",
  "prepublishOnly": "yarn test && rollup -c",
  "postpublish": "git push && git push --tags && cd ../d3.github.com && git pull && cp ../d3/dist/d3.js d3.v5.js && cp ../d3/dist/d3.min.js d3.v5.min.js && git add d3.v5.js d3.v5.min.js && git commit -m \"d3 ${npm_package_version}\" && git push && cd - && cd ../d3-bower && git pull && cp ../d3/LICENSE ../d3/README.md ../d3/dist/d3.js ../d3/dist/d3.min.js . && git add -- LICENSE README.md d3.js d3.min.js && git commit -m \"${npm_package_version}\" && git tag -am \"${npm_package_version}\" v${npm_package_version} && git push && git push --tags && cd - && zip -j dist/d3.zip -- LICENSE README.md API.md CHANGES.md dist/d3.js dist/d3.min.js"
};
exports.scripts = scripts;
var devDependencies = {
  "json2module": "0.0",
  "rimraf": "2",
  "rollup": "0.64",
  "rollup-plugin-ascii": "0.0",
  "rollup-plugin-node-resolve": "3",
  "rollup-plugin-terser": "1",
  "tape": "4"
};
exports.devDependencies = devDependencies;
var dependencies = {
  "d3-array": "1",
  "d3-axis": "1",
  "d3-brush": "1",
  "d3-chord": "1",
  "d3-collection": "1",
  "d3-color": "1",
  "d3-contour": "1",
  "d3-dispatch": "1",
  "d3-drag": "1",
  "d3-dsv": "1",
  "d3-ease": "1",
  "d3-fetch": "1",
  "d3-force": "1",
  "d3-format": "1",
  "d3-geo": "1",
  "d3-hierarchy": "1",
  "d3-interpolate": "1",
  "d3-path": "1",
  "d3-polygon": "1",
  "d3-quadtree": "1",
  "d3-random": "1",
  "d3-scale": "2",
  "d3-scale-chromatic": "1",
  "d3-selection": "1",
  "d3-shape": "1",
  "d3-time": "1",
  "d3-time-format": "2",
  "d3-timer": "1",
  "d3-transition": "1",
  "d3-voronoi": "1",
  "d3-zoom": "1"
};
exports.dependencies = dependencies;
},{}],"5A6F":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(a, b) {
  return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;
}
},{}],"raOJ":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _ascending = _interopRequireDefault(require("./ascending"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(compare) {
  if (compare.length === 1) compare = ascendingComparator(compare);
  return {
    left: function (a, x, lo, hi) {
      if (lo == null) lo = 0;
      if (hi == null) hi = a.length;

      while (lo < hi) {
        var mid = lo + hi >>> 1;
        if (compare(a[mid], x) < 0) lo = mid + 1;else hi = mid;
      }

      return lo;
    },
    right: function (a, x, lo, hi) {
      if (lo == null) lo = 0;
      if (hi == null) hi = a.length;

      while (lo < hi) {
        var mid = lo + hi >>> 1;
        if (compare(a[mid], x) > 0) hi = mid;else lo = mid + 1;
      }

      return lo;
    }
  };
}

function ascendingComparator(f) {
  return function (d, x) {
    return (0, _ascending.default)(f(d), x);
  };
}
},{"./ascending":"5A6F"}],"VX/h":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.bisectLeft = exports.bisectRight = void 0;

var _ascending = _interopRequireDefault(require("./ascending"));

var _bisector = _interopRequireDefault(require("./bisector"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var ascendingBisect = (0, _bisector.default)(_ascending.default);
var bisectRight = ascendingBisect.right;
exports.bisectRight = bisectRight;
var bisectLeft = ascendingBisect.left;
exports.bisectLeft = bisectLeft;
var _default = bisectRight;
exports.default = _default;
},{"./ascending":"5A6F","./bisector":"raOJ"}],"0aKl":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;
exports.pair = pair;

function _default(array, f) {
  if (f == null) f = pair;
  var i = 0,
      n = array.length - 1,
      p = array[0],
      pairs = new Array(n < 0 ? 0 : n);

  while (i < n) pairs[i] = f(p, p = array[++i]);

  return pairs;
}

function pair(a, b) {
  return [a, b];
}
},{}],"9JGh":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _pairs = require("./pairs");

function _default(values0, values1, reduce) {
  var n0 = values0.length,
      n1 = values1.length,
      values = new Array(n0 * n1),
      i0,
      i1,
      i,
      value0;
  if (reduce == null) reduce = _pairs.pair;

  for (i0 = i = 0; i0 < n0; ++i0) {
    for (value0 = values0[i0], i1 = 0; i1 < n1; ++i1, ++i) {
      values[i] = reduce(value0, values1[i1]);
    }
  }

  return values;
}
},{"./pairs":"0aKl"}],"wjXp":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(a, b) {
  return b < a ? -1 : b > a ? 1 : b >= a ? 0 : NaN;
}
},{}],"9fz/":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(x) {
  return x === null ? NaN : +x;
}
},{}],"IBjk":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _number = _interopRequireDefault(require("./number"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(values, valueof) {
  var n = values.length,
      m = 0,
      i = -1,
      mean = 0,
      value,
      delta,
      sum = 0;

  if (valueof == null) {
    while (++i < n) {
      if (!isNaN(value = (0, _number.default)(values[i]))) {
        delta = value - mean;
        mean += delta / ++m;
        sum += delta * (value - mean);
      }
    }
  } else {
    while (++i < n) {
      if (!isNaN(value = (0, _number.default)(valueof(values[i], i, values)))) {
        delta = value - mean;
        mean += delta / ++m;
        sum += delta * (value - mean);
      }
    }
  }

  if (m > 1) return sum / (m - 1);
}
},{"./number":"9fz/"}],"JPBu":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _variance = _interopRequireDefault(require("./variance"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(array, f) {
  var v = (0, _variance.default)(array, f);
  return v ? Math.sqrt(v) : v;
}
},{"./variance":"IBjk"}],"tlMU":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(values, valueof) {
  var n = values.length,
      i = -1,
      value,
      min,
      max;

  if (valueof == null) {
    while (++i < n) {
      // Find the first comparable value.
      if ((value = values[i]) != null && value >= value) {
        min = max = value;

        while (++i < n) {
          // Compare the remaining values.
          if ((value = values[i]) != null) {
            if (min > value) min = value;
            if (max < value) max = value;
          }
        }
      }
    }
  } else {
    while (++i < n) {
      // Find the first comparable value.
      if ((value = valueof(values[i], i, values)) != null && value >= value) {
        min = max = value;

        while (++i < n) {
          // Compare the remaining values.
          if ((value = valueof(values[i], i, values)) != null) {
            if (min > value) min = value;
            if (max < value) max = value;
          }
        }
      }
    }
  }

  return [min, max];
}
},{}],"+OA0":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.map = exports.slice = void 0;
var array = Array.prototype;
var slice = array.slice;
exports.slice = slice;
var map = array.map;
exports.map = map;
},{}],"5O/Y":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(x) {
  return function () {
    return x;
  };
}
},{}],"nPOL":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(x) {
  return x;
}
},{}],"M4+6":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(start, stop, step) {
  start = +start, stop = +stop, step = (n = arguments.length) < 2 ? (stop = start, start = 0, 1) : n < 3 ? 1 : +step;
  var i = -1,
      n = Math.max(0, Math.ceil((stop - start) / step)) | 0,
      range = new Array(n);

  while (++i < n) {
    range[i] = start + i * step;
  }

  return range;
}
},{}],"nJNY":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;
exports.tickIncrement = tickIncrement;
exports.tickStep = tickStep;
var e10 = Math.sqrt(50),
    e5 = Math.sqrt(10),
    e2 = Math.sqrt(2);

function _default(start, stop, count) {
  var reverse,
      i = -1,
      n,
      ticks,
      step;
  stop = +stop, start = +start, count = +count;
  if (start === stop && count > 0) return [start];
  if (reverse = stop < start) n = start, start = stop, stop = n;
  if ((step = tickIncrement(start, stop, count)) === 0 || !isFinite(step)) return [];

  if (step > 0) {
    start = Math.ceil(start / step);
    stop = Math.floor(stop / step);
    ticks = new Array(n = Math.ceil(stop - start + 1));

    while (++i < n) ticks[i] = (start + i) * step;
  } else {
    start = Math.floor(start * step);
    stop = Math.ceil(stop * step);
    ticks = new Array(n = Math.ceil(start - stop + 1));

    while (++i < n) ticks[i] = (start - i) / step;
  }

  if (reverse) ticks.reverse();
  return ticks;
}

function tickIncrement(start, stop, count) {
  var step = (stop - start) / Math.max(0, count),
      power = Math.floor(Math.log(step) / Math.LN10),
      error = step / Math.pow(10, power);
  return power >= 0 ? (error >= e10 ? 10 : error >= e5 ? 5 : error >= e2 ? 2 : 1) * Math.pow(10, power) : -Math.pow(10, -power) / (error >= e10 ? 10 : error >= e5 ? 5 : error >= e2 ? 2 : 1);
}

function tickStep(start, stop, count) {
  var step0 = Math.abs(stop - start) / Math.max(0, count),
      step1 = Math.pow(10, Math.floor(Math.log(step0) / Math.LN10)),
      error = step0 / step1;
  if (error >= e10) step1 *= 10;else if (error >= e5) step1 *= 5;else if (error >= e2) step1 *= 2;
  return stop < start ? -step1 : step1;
}
},{}],"Pg/U":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(values) {
  return Math.ceil(Math.log(values.length) / Math.LN2) + 1;
}
},{}],"eRk3":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _array = require("./array");

var _bisect = _interopRequireDefault(require("./bisect"));

var _constant = _interopRequireDefault(require("./constant"));

var _extent = _interopRequireDefault(require("./extent"));

var _identity = _interopRequireDefault(require("./identity"));

var _range = _interopRequireDefault(require("./range"));

var _ticks = require("./ticks");

var _sturges = _interopRequireDefault(require("./threshold/sturges"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default() {
  var value = _identity.default,
      domain = _extent.default,
      threshold = _sturges.default;

  function histogram(data) {
    var i,
        n = data.length,
        x,
        values = new Array(n);

    for (i = 0; i < n; ++i) {
      values[i] = value(data[i], i, data);
    }

    var xz = domain(values),
        x0 = xz[0],
        x1 = xz[1],
        tz = threshold(values, x0, x1); // Convert number of thresholds into uniform thresholds.

    if (!Array.isArray(tz)) {
      tz = (0, _ticks.tickStep)(x0, x1, tz);
      tz = (0, _range.default)(Math.ceil(x0 / tz) * tz, x1, tz); // exclusive
    } // Remove any thresholds outside the domain.


    var m = tz.length;

    while (tz[0] <= x0) tz.shift(), --m;

    while (tz[m - 1] > x1) tz.pop(), --m;

    var bins = new Array(m + 1),
        bin; // Initialize bins.

    for (i = 0; i <= m; ++i) {
      bin = bins[i] = [];
      bin.x0 = i > 0 ? tz[i - 1] : x0;
      bin.x1 = i < m ? tz[i] : x1;
    } // Assign data to bins by value, ignoring any outside the domain.


    for (i = 0; i < n; ++i) {
      x = values[i];

      if (x0 <= x && x <= x1) {
        bins[(0, _bisect.default)(tz, x, 0, m)].push(data[i]);
      }
    }

    return bins;
  }

  histogram.value = function (_) {
    return arguments.length ? (value = typeof _ === "function" ? _ : (0, _constant.default)(_), histogram) : value;
  };

  histogram.domain = function (_) {
    return arguments.length ? (domain = typeof _ === "function" ? _ : (0, _constant.default)([_[0], _[1]]), histogram) : domain;
  };

  histogram.thresholds = function (_) {
    return arguments.length ? (threshold = typeof _ === "function" ? _ : Array.isArray(_) ? (0, _constant.default)(_array.slice.call(_)) : (0, _constant.default)(_), histogram) : threshold;
  };

  return histogram;
}
},{"./array":"+OA0","./bisect":"VX/h","./constant":"5O/Y","./extent":"tlMU","./identity":"nPOL","./range":"M4+6","./ticks":"nJNY","./threshold/sturges":"Pg/U"}],"9qox":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _number = _interopRequireDefault(require("./number"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(values, p, valueof) {
  if (valueof == null) valueof = _number.default;
  if (!(n = values.length)) return;
  if ((p = +p) <= 0 || n < 2) return +valueof(values[0], 0, values);
  if (p >= 1) return +valueof(values[n - 1], n - 1, values);
  var n,
      i = (n - 1) * p,
      i0 = Math.floor(i),
      value0 = +valueof(values[i0], i0, values),
      value1 = +valueof(values[i0 + 1], i0 + 1, values);
  return value0 + (value1 - value0) * (i - i0);
}
},{"./number":"9fz/"}],"a8Ry":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _array = require("../array");

var _ascending = _interopRequireDefault(require("../ascending"));

var _number = _interopRequireDefault(require("../number"));

var _quantile = _interopRequireDefault(require("../quantile"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(values, min, max) {
  values = _array.map.call(values, _number.default).sort(_ascending.default);
  return Math.ceil((max - min) / (2 * ((0, _quantile.default)(values, 0.75) - (0, _quantile.default)(values, 0.25)) * Math.pow(values.length, -1 / 3)));
}
},{"../array":"+OA0","../ascending":"5A6F","../number":"9fz/","../quantile":"9qox"}],"VlA4":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _deviation = _interopRequireDefault(require("../deviation"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(values, min, max) {
  return Math.ceil((max - min) / (3.5 * (0, _deviation.default)(values) * Math.pow(values.length, -1 / 3)));
}
},{"../deviation":"JPBu"}],"8Rao":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(values, valueof) {
  var n = values.length,
      i = -1,
      value,
      max;

  if (valueof == null) {
    while (++i < n) {
      // Find the first comparable value.
      if ((value = values[i]) != null && value >= value) {
        max = value;

        while (++i < n) {
          // Compare the remaining values.
          if ((value = values[i]) != null && value > max) {
            max = value;
          }
        }
      }
    }
  } else {
    while (++i < n) {
      // Find the first comparable value.
      if ((value = valueof(values[i], i, values)) != null && value >= value) {
        max = value;

        while (++i < n) {
          // Compare the remaining values.
          if ((value = valueof(values[i], i, values)) != null && value > max) {
            max = value;
          }
        }
      }
    }
  }

  return max;
}
},{}],"hoEE":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _number = _interopRequireDefault(require("./number"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(values, valueof) {
  var n = values.length,
      m = n,
      i = -1,
      value,
      sum = 0;

  if (valueof == null) {
    while (++i < n) {
      if (!isNaN(value = (0, _number.default)(values[i]))) sum += value;else --m;
    }
  } else {
    while (++i < n) {
      if (!isNaN(value = (0, _number.default)(valueof(values[i], i, values)))) sum += value;else --m;
    }
  }

  if (m) return sum / m;
}
},{"./number":"9fz/"}],"FMd1":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _ascending = _interopRequireDefault(require("./ascending"));

var _number = _interopRequireDefault(require("./number"));

var _quantile = _interopRequireDefault(require("./quantile"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(values, valueof) {
  var n = values.length,
      i = -1,
      value,
      numbers = [];

  if (valueof == null) {
    while (++i < n) {
      if (!isNaN(value = (0, _number.default)(values[i]))) {
        numbers.push(value);
      }
    }
  } else {
    while (++i < n) {
      if (!isNaN(value = (0, _number.default)(valueof(values[i], i, values)))) {
        numbers.push(value);
      }
    }
  }

  return (0, _quantile.default)(numbers.sort(_ascending.default), 0.5);
}
},{"./ascending":"5A6F","./number":"9fz/","./quantile":"9qox"}],"0SAj":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(arrays) {
  var n = arrays.length,
      m,
      i = -1,
      j = 0,
      merged,
      array;

  while (++i < n) j += arrays[i].length;

  merged = new Array(j);

  while (--n >= 0) {
    array = arrays[n];
    m = array.length;

    while (--m >= 0) {
      merged[--j] = array[m];
    }
  }

  return merged;
}
},{}],"WLfU":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(values, valueof) {
  var n = values.length,
      i = -1,
      value,
      min;

  if (valueof == null) {
    while (++i < n) {
      // Find the first comparable value.
      if ((value = values[i]) != null && value >= value) {
        min = value;

        while (++i < n) {
          // Compare the remaining values.
          if ((value = values[i]) != null && min > value) {
            min = value;
          }
        }
      }
    }
  } else {
    while (++i < n) {
      // Find the first comparable value.
      if ((value = valueof(values[i], i, values)) != null && value >= value) {
        min = value;

        while (++i < n) {
          // Compare the remaining values.
          if ((value = valueof(values[i], i, values)) != null && min > value) {
            min = value;
          }
        }
      }
    }
  }

  return min;
}
},{}],"4V5Z":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(array, indexes) {
  var i = indexes.length,
      permutes = new Array(i);

  while (i--) permutes[i] = array[indexes[i]];

  return permutes;
}
},{}],"/c8h":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _ascending = _interopRequireDefault(require("./ascending"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(values, compare) {
  if (!(n = values.length)) return;
  var n,
      i = 0,
      j = 0,
      xi,
      xj = values[j];
  if (compare == null) compare = _ascending.default;

  while (++i < n) {
    if (compare(xi = values[i], xj) < 0 || compare(xj, xj) !== 0) {
      xj = xi, j = i;
    }
  }

  if (compare(xj, xj) === 0) return j;
}
},{"./ascending":"5A6F"}],"Z0Nc":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(array, i0, i1) {
  var m = (i1 == null ? array.length : i1) - (i0 = i0 == null ? 0 : +i0),
      t,
      i;

  while (m) {
    i = Math.random() * m-- | 0;
    t = array[m + i0];
    array[m + i0] = array[i + i0];
    array[i + i0] = t;
  }

  return array;
}
},{}],"O7Vy":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(values, valueof) {
  var n = values.length,
      i = -1,
      value,
      sum = 0;

  if (valueof == null) {
    while (++i < n) {
      if (value = +values[i]) sum += value; // Note: zero and null are equivalent.
    }
  } else {
    while (++i < n) {
      if (value = +valueof(values[i], i, values)) sum += value;
    }
  }

  return sum;
}
},{}],"pk0a":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _min = _interopRequireDefault(require("./min"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(matrix) {
  if (!(n = matrix.length)) return [];

  for (var i = -1, m = (0, _min.default)(matrix, length), transpose = new Array(m); ++i < m;) {
    for (var j = -1, n, row = transpose[i] = new Array(n); ++j < n;) {
      row[j] = matrix[j][i];
    }
  }

  return transpose;
}

function length(d) {
  return d.length;
}
},{"./min":"WLfU"}],"oAxq":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _transpose = _interopRequireDefault(require("./transpose"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default() {
  return (0, _transpose.default)(arguments);
}
},{"./transpose":"pk0a"}],"cBuZ":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "bisect", {
  enumerable: true,
  get: function () {
    return _bisect.default;
  }
});
Object.defineProperty(exports, "bisectRight", {
  enumerable: true,
  get: function () {
    return _bisect.bisectRight;
  }
});
Object.defineProperty(exports, "bisectLeft", {
  enumerable: true,
  get: function () {
    return _bisect.bisectLeft;
  }
});
Object.defineProperty(exports, "ascending", {
  enumerable: true,
  get: function () {
    return _ascending.default;
  }
});
Object.defineProperty(exports, "bisector", {
  enumerable: true,
  get: function () {
    return _bisector.default;
  }
});
Object.defineProperty(exports, "cross", {
  enumerable: true,
  get: function () {
    return _cross.default;
  }
});
Object.defineProperty(exports, "descending", {
  enumerable: true,
  get: function () {
    return _descending.default;
  }
});
Object.defineProperty(exports, "deviation", {
  enumerable: true,
  get: function () {
    return _deviation.default;
  }
});
Object.defineProperty(exports, "extent", {
  enumerable: true,
  get: function () {
    return _extent.default;
  }
});
Object.defineProperty(exports, "histogram", {
  enumerable: true,
  get: function () {
    return _histogram.default;
  }
});
Object.defineProperty(exports, "thresholdFreedmanDiaconis", {
  enumerable: true,
  get: function () {
    return _freedmanDiaconis.default;
  }
});
Object.defineProperty(exports, "thresholdScott", {
  enumerable: true,
  get: function () {
    return _scott.default;
  }
});
Object.defineProperty(exports, "thresholdSturges", {
  enumerable: true,
  get: function () {
    return _sturges.default;
  }
});
Object.defineProperty(exports, "max", {
  enumerable: true,
  get: function () {
    return _max.default;
  }
});
Object.defineProperty(exports, "mean", {
  enumerable: true,
  get: function () {
    return _mean.default;
  }
});
Object.defineProperty(exports, "median", {
  enumerable: true,
  get: function () {
    return _median.default;
  }
});
Object.defineProperty(exports, "merge", {
  enumerable: true,
  get: function () {
    return _merge.default;
  }
});
Object.defineProperty(exports, "min", {
  enumerable: true,
  get: function () {
    return _min.default;
  }
});
Object.defineProperty(exports, "pairs", {
  enumerable: true,
  get: function () {
    return _pairs.default;
  }
});
Object.defineProperty(exports, "permute", {
  enumerable: true,
  get: function () {
    return _permute.default;
  }
});
Object.defineProperty(exports, "quantile", {
  enumerable: true,
  get: function () {
    return _quantile.default;
  }
});
Object.defineProperty(exports, "range", {
  enumerable: true,
  get: function () {
    return _range.default;
  }
});
Object.defineProperty(exports, "scan", {
  enumerable: true,
  get: function () {
    return _scan.default;
  }
});
Object.defineProperty(exports, "shuffle", {
  enumerable: true,
  get: function () {
    return _shuffle.default;
  }
});
Object.defineProperty(exports, "sum", {
  enumerable: true,
  get: function () {
    return _sum.default;
  }
});
Object.defineProperty(exports, "ticks", {
  enumerable: true,
  get: function () {
    return _ticks.default;
  }
});
Object.defineProperty(exports, "tickIncrement", {
  enumerable: true,
  get: function () {
    return _ticks.tickIncrement;
  }
});
Object.defineProperty(exports, "tickStep", {
  enumerable: true,
  get: function () {
    return _ticks.tickStep;
  }
});
Object.defineProperty(exports, "transpose", {
  enumerable: true,
  get: function () {
    return _transpose.default;
  }
});
Object.defineProperty(exports, "variance", {
  enumerable: true,
  get: function () {
    return _variance.default;
  }
});
Object.defineProperty(exports, "zip", {
  enumerable: true,
  get: function () {
    return _zip.default;
  }
});

var _bisect = _interopRequireWildcard(require("./bisect"));

var _ascending = _interopRequireDefault(require("./ascending"));

var _bisector = _interopRequireDefault(require("./bisector"));

var _cross = _interopRequireDefault(require("./cross"));

var _descending = _interopRequireDefault(require("./descending"));

var _deviation = _interopRequireDefault(require("./deviation"));

var _extent = _interopRequireDefault(require("./extent"));

var _histogram = _interopRequireDefault(require("./histogram"));

var _freedmanDiaconis = _interopRequireDefault(require("./threshold/freedmanDiaconis"));

var _scott = _interopRequireDefault(require("./threshold/scott"));

var _sturges = _interopRequireDefault(require("./threshold/sturges"));

var _max = _interopRequireDefault(require("./max"));

var _mean = _interopRequireDefault(require("./mean"));

var _median = _interopRequireDefault(require("./median"));

var _merge = _interopRequireDefault(require("./merge"));

var _min = _interopRequireDefault(require("./min"));

var _pairs = _interopRequireDefault(require("./pairs"));

var _permute = _interopRequireDefault(require("./permute"));

var _quantile = _interopRequireDefault(require("./quantile"));

var _range = _interopRequireDefault(require("./range"));

var _scan = _interopRequireDefault(require("./scan"));

var _shuffle = _interopRequireDefault(require("./shuffle"));

var _sum = _interopRequireDefault(require("./sum"));

var _ticks = _interopRequireWildcard(require("./ticks"));

var _transpose = _interopRequireDefault(require("./transpose"));

var _variance = _interopRequireDefault(require("./variance"));

var _zip = _interopRequireDefault(require("./zip"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }
},{"./bisect":"VX/h","./ascending":"5A6F","./bisector":"raOJ","./cross":"9JGh","./descending":"wjXp","./deviation":"JPBu","./extent":"tlMU","./histogram":"eRk3","./threshold/freedmanDiaconis":"a8Ry","./threshold/scott":"VlA4","./threshold/sturges":"Pg/U","./max":"8Rao","./mean":"hoEE","./median":"FMd1","./merge":"0SAj","./min":"WLfU","./pairs":"0aKl","./permute":"4V5Z","./quantile":"9qox","./range":"M4+6","./scan":"/c8h","./shuffle":"Z0Nc","./sum":"O7Vy","./ticks":"nJNY","./transpose":"pk0a","./variance":"IBjk","./zip":"oAxq"}],"rv5q":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.slice = void 0;
var slice = Array.prototype.slice;
exports.slice = slice;
},{}],"Qz/6":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.axisTop = axisTop;
exports.axisRight = axisRight;
exports.axisBottom = axisBottom;
exports.axisLeft = axisLeft;

var _array = require("./array");

var _identity = _interopRequireDefault(require("./identity"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var top = 1,
    right = 2,
    bottom = 3,
    left = 4,
    epsilon = 1e-6;

function translateX(x) {
  return "translate(" + (x + 0.5) + ",0)";
}

function translateY(y) {
  return "translate(0," + (y + 0.5) + ")";
}

function number(scale) {
  return function (d) {
    return +scale(d);
  };
}

function center(scale) {
  var offset = Math.max(0, scale.bandwidth() - 1) / 2; // Adjust for 0.5px offset.

  if (scale.round()) offset = Math.round(offset);
  return function (d) {
    return +scale(d) + offset;
  };
}

function entering() {
  return !this.__axis;
}

function axis(orient, scale) {
  var tickArguments = [],
      tickValues = null,
      tickFormat = null,
      tickSizeInner = 6,
      tickSizeOuter = 6,
      tickPadding = 3,
      k = orient === top || orient === left ? -1 : 1,
      x = orient === left || orient === right ? "x" : "y",
      transform = orient === top || orient === bottom ? translateX : translateY;

  function axis(context) {
    var values = tickValues == null ? scale.ticks ? scale.ticks.apply(scale, tickArguments) : scale.domain() : tickValues,
        format = tickFormat == null ? scale.tickFormat ? scale.tickFormat.apply(scale, tickArguments) : _identity.default : tickFormat,
        spacing = Math.max(tickSizeInner, 0) + tickPadding,
        range = scale.range(),
        range0 = +range[0] + 0.5,
        range1 = +range[range.length - 1] + 0.5,
        position = (scale.bandwidth ? center : number)(scale.copy()),
        selection = context.selection ? context.selection() : context,
        path = selection.selectAll(".domain").data([null]),
        tick = selection.selectAll(".tick").data(values, scale).order(),
        tickExit = tick.exit(),
        tickEnter = tick.enter().append("g").attr("class", "tick"),
        line = tick.select("line"),
        text = tick.select("text");
    path = path.merge(path.enter().insert("path", ".tick").attr("class", "domain").attr("stroke", "currentColor"));
    tick = tick.merge(tickEnter);
    line = line.merge(tickEnter.append("line").attr("stroke", "currentColor").attr(x + "2", k * tickSizeInner));
    text = text.merge(tickEnter.append("text").attr("fill", "currentColor").attr(x, k * spacing).attr("dy", orient === top ? "0em" : orient === bottom ? "0.71em" : "0.32em"));

    if (context !== selection) {
      path = path.transition(context);
      tick = tick.transition(context);
      line = line.transition(context);
      text = text.transition(context);
      tickExit = tickExit.transition(context).attr("opacity", epsilon).attr("transform", function (d) {
        return isFinite(d = position(d)) ? transform(d) : this.getAttribute("transform");
      });
      tickEnter.attr("opacity", epsilon).attr("transform", function (d) {
        var p = this.parentNode.__axis;
        return transform(p && isFinite(p = p(d)) ? p : position(d));
      });
    }

    tickExit.remove();
    path.attr("d", orient === left || orient == right ? tickSizeOuter ? "M" + k * tickSizeOuter + "," + range0 + "H0.5V" + range1 + "H" + k * tickSizeOuter : "M0.5," + range0 + "V" + range1 : tickSizeOuter ? "M" + range0 + "," + k * tickSizeOuter + "V0.5H" + range1 + "V" + k * tickSizeOuter : "M" + range0 + ",0.5H" + range1);
    tick.attr("opacity", 1).attr("transform", function (d) {
      return transform(position(d));
    });
    line.attr(x + "2", k * tickSizeInner);
    text.attr(x, k * spacing).text(format);
    selection.filter(entering).attr("fill", "none").attr("font-size", 10).attr("font-family", "sans-serif").attr("text-anchor", orient === right ? "start" : orient === left ? "end" : "middle");
    selection.each(function () {
      this.__axis = position;
    });
  }

  axis.scale = function (_) {
    return arguments.length ? (scale = _, axis) : scale;
  };

  axis.ticks = function () {
    return tickArguments = _array.slice.call(arguments), axis;
  };

  axis.tickArguments = function (_) {
    return arguments.length ? (tickArguments = _ == null ? [] : _array.slice.call(_), axis) : tickArguments.slice();
  };

  axis.tickValues = function (_) {
    return arguments.length ? (tickValues = _ == null ? null : _array.slice.call(_), axis) : tickValues && tickValues.slice();
  };

  axis.tickFormat = function (_) {
    return arguments.length ? (tickFormat = _, axis) : tickFormat;
  };

  axis.tickSize = function (_) {
    return arguments.length ? (tickSizeInner = tickSizeOuter = +_, axis) : tickSizeInner;
  };

  axis.tickSizeInner = function (_) {
    return arguments.length ? (tickSizeInner = +_, axis) : tickSizeInner;
  };

  axis.tickSizeOuter = function (_) {
    return arguments.length ? (tickSizeOuter = +_, axis) : tickSizeOuter;
  };

  axis.tickPadding = function (_) {
    return arguments.length ? (tickPadding = +_, axis) : tickPadding;
  };

  return axis;
}

function axisTop(scale) {
  return axis(top, scale);
}

function axisRight(scale) {
  return axis(right, scale);
}

function axisBottom(scale) {
  return axis(bottom, scale);
}

function axisLeft(scale) {
  return axis(left, scale);
}
},{"./array":"rv5q","./identity":"nPOL"}],"y9Kr":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "axisTop", {
  enumerable: true,
  get: function () {
    return _axis.axisTop;
  }
});
Object.defineProperty(exports, "axisRight", {
  enumerable: true,
  get: function () {
    return _axis.axisRight;
  }
});
Object.defineProperty(exports, "axisBottom", {
  enumerable: true,
  get: function () {
    return _axis.axisBottom;
  }
});
Object.defineProperty(exports, "axisLeft", {
  enumerable: true,
  get: function () {
    return _axis.axisLeft;
  }
});

var _axis = require("./axis");
},{"./axis":"Qz/6"}],"C/lH":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var noop = {
  value: function () {}
};

function dispatch() {
  for (var i = 0, n = arguments.length, _ = {}, t; i < n; ++i) {
    if (!(t = arguments[i] + "") || t in _) throw new Error("illegal type: " + t);
    _[t] = [];
  }

  return new Dispatch(_);
}

function Dispatch(_) {
  this._ = _;
}

function parseTypenames(typenames, types) {
  return typenames.trim().split(/^|\s+/).map(function (t) {
    var name = "",
        i = t.indexOf(".");
    if (i >= 0) name = t.slice(i + 1), t = t.slice(0, i);
    if (t && !types.hasOwnProperty(t)) throw new Error("unknown type: " + t);
    return {
      type: t,
      name: name
    };
  });
}

Dispatch.prototype = dispatch.prototype = {
  constructor: Dispatch,
  on: function (typename, callback) {
    var _ = this._,
        T = parseTypenames(typename + "", _),
        t,
        i = -1,
        n = T.length; // If no callback was specified, return the callback of the given type and name.

    if (arguments.length < 2) {
      while (++i < n) if ((t = (typename = T[i]).type) && (t = get(_[t], typename.name))) return t;

      return;
    } // If a type was specified, set the callback for the given type and name.
    // Otherwise, if a null callback was specified, remove callbacks of the given name.


    if (callback != null && typeof callback !== "function") throw new Error("invalid callback: " + callback);

    while (++i < n) {
      if (t = (typename = T[i]).type) _[t] = set(_[t], typename.name, callback);else if (callback == null) for (t in _) _[t] = set(_[t], typename.name, null);
    }

    return this;
  },
  copy: function () {
    var copy = {},
        _ = this._;

    for (var t in _) copy[t] = _[t].slice();

    return new Dispatch(copy);
  },
  call: function (type, that) {
    if ((n = arguments.length - 2) > 0) for (var args = new Array(n), i = 0, n, t; i < n; ++i) args[i] = arguments[i + 2];
    if (!this._.hasOwnProperty(type)) throw new Error("unknown type: " + type);

    for (t = this._[type], i = 0, n = t.length; i < n; ++i) t[i].value.apply(that, args);
  },
  apply: function (type, that, args) {
    if (!this._.hasOwnProperty(type)) throw new Error("unknown type: " + type);

    for (var t = this._[type], i = 0, n = t.length; i < n; ++i) t[i].value.apply(that, args);
  }
};

function get(type, name) {
  for (var i = 0, n = type.length, c; i < n; ++i) {
    if ((c = type[i]).name === name) {
      return c.value;
    }
  }
}

function set(type, name, callback) {
  for (var i = 0, n = type.length; i < n; ++i) {
    if (type[i].name === name) {
      type[i] = noop, type = type.slice(0, i).concat(type.slice(i + 1));
      break;
    }
  }

  if (callback != null) type.push({
    name: name,
    value: callback
  });
  return type;
}

var _default = dispatch;
exports.default = _default;
},{}],"UU/c":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "dispatch", {
  enumerable: true,
  get: function () {
    return _dispatch.default;
  }
});

var _dispatch = _interopRequireDefault(require("./dispatch"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
},{"./dispatch":"C/lH"}],"UzOB":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.xhtml = void 0;
var xhtml = "http://www.w3.org/1999/xhtml";
exports.xhtml = xhtml;
var _default = {
  svg: "http://www.w3.org/2000/svg",
  xhtml: xhtml,
  xlink: "http://www.w3.org/1999/xlink",
  xml: "http://www.w3.org/XML/1998/namespace",
  xmlns: "http://www.w3.org/2000/xmlns/"
};
exports.default = _default;
},{}],"OLJ5":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _namespaces = _interopRequireDefault(require("./namespaces"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(name) {
  var prefix = name += "",
      i = prefix.indexOf(":");
  if (i >= 0 && (prefix = name.slice(0, i)) !== "xmlns") name = name.slice(i + 1);
  return _namespaces.default.hasOwnProperty(prefix) ? {
    space: _namespaces.default[prefix],
    local: name
  } : name;
}
},{"./namespaces":"UzOB"}],"EIjt":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _namespace = _interopRequireDefault(require("./namespace"));

var _namespaces = require("./namespaces");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function creatorInherit(name) {
  return function () {
    var document = this.ownerDocument,
        uri = this.namespaceURI;
    return uri === _namespaces.xhtml && document.documentElement.namespaceURI === _namespaces.xhtml ? document.createElement(name) : document.createElementNS(uri, name);
  };
}

function creatorFixed(fullname) {
  return function () {
    return this.ownerDocument.createElementNS(fullname.space, fullname.local);
  };
}

function _default(name) {
  var fullname = (0, _namespace.default)(name);
  return (fullname.local ? creatorFixed : creatorInherit)(fullname);
}
},{"./namespace":"OLJ5","./namespaces":"UzOB"}],"xs2I":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function none() {}

function _default(selector) {
  return selector == null ? none : function () {
    return this.querySelector(selector);
  };
}
},{}],"LRy5":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _index = require("./index");

var _selector = _interopRequireDefault(require("../selector"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(select) {
  if (typeof select !== "function") select = (0, _selector.default)(select);

  for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {
    for (var group = groups[j], n = group.length, subgroup = subgroups[j] = new Array(n), node, subnode, i = 0; i < n; ++i) {
      if ((node = group[i]) && (subnode = select.call(node, node.__data__, i, group))) {
        if ("__data__" in node) subnode.__data__ = node.__data__;
        subgroup[i] = subnode;
      }
    }
  }

  return new _index.Selection(subgroups, this._parents);
}
},{"./index":"jpDG","../selector":"xs2I"}],"+mHY":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function empty() {
  return [];
}

function _default(selector) {
  return selector == null ? empty : function () {
    return this.querySelectorAll(selector);
  };
}
},{}],"ijGs":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _index = require("./index");

var _selectorAll = _interopRequireDefault(require("../selectorAll"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(select) {
  if (typeof select !== "function") select = (0, _selectorAll.default)(select);

  for (var groups = this._groups, m = groups.length, subgroups = [], parents = [], j = 0; j < m; ++j) {
    for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {
      if (node = group[i]) {
        subgroups.push(select.call(node, node.__data__, i, group));
        parents.push(node);
      }
    }
  }

  return new _index.Selection(subgroups, parents);
}
},{"./index":"jpDG","../selectorAll":"+mHY"}],"4PkZ":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var matcher = function (selector) {
  return function () {
    return this.matches(selector);
  };
};

if (typeof document !== "undefined") {
  var element = document.documentElement;

  if (!element.matches) {
    var vendorMatches = element.webkitMatchesSelector || element.msMatchesSelector || element.mozMatchesSelector || element.oMatchesSelector;

    matcher = function (selector) {
      return function () {
        return vendorMatches.call(this, selector);
      };
    };
  }
}

var _default = matcher;
exports.default = _default;
},{}],"hrVj":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _index = require("./index");

var _matcher = _interopRequireDefault(require("../matcher"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(match) {
  if (typeof match !== "function") match = (0, _matcher.default)(match);

  for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {
    for (var group = groups[j], n = group.length, subgroup = subgroups[j] = [], node, i = 0; i < n; ++i) {
      if ((node = group[i]) && match.call(node, node.__data__, i, group)) {
        subgroup.push(node);
      }
    }
  }

  return new _index.Selection(subgroups, this._parents);
}
},{"./index":"jpDG","../matcher":"4PkZ"}],"NmjR":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(update) {
  return new Array(update.length);
}
},{}],"wXei":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;
exports.EnterNode = EnterNode;

var _sparse = _interopRequireDefault(require("./sparse"));

var _index = require("./index");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default() {
  return new _index.Selection(this._enter || this._groups.map(_sparse.default), this._parents);
}

function EnterNode(parent, datum) {
  this.ownerDocument = parent.ownerDocument;
  this.namespaceURI = parent.namespaceURI;
  this._next = null;
  this._parent = parent;
  this.__data__ = datum;
}

EnterNode.prototype = {
  constructor: EnterNode,
  appendChild: function (child) {
    return this._parent.insertBefore(child, this._next);
  },
  insertBefore: function (child, next) {
    return this._parent.insertBefore(child, next);
  },
  querySelector: function (selector) {
    return this._parent.querySelector(selector);
  },
  querySelectorAll: function (selector) {
    return this._parent.querySelectorAll(selector);
  }
};
},{"./sparse":"NmjR","./index":"jpDG"}],"8QmP":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _index = require("./index");

var _enter = require("./enter");

var _constant = _interopRequireDefault(require("../constant"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var keyPrefix = "$"; // Protect against keys like “__proto__”.

function bindIndex(parent, group, enter, update, exit, data) {
  var i = 0,
      node,
      groupLength = group.length,
      dataLength = data.length; // Put any non-null nodes that fit into update.
  // Put any null nodes into enter.
  // Put any remaining data into enter.

  for (; i < dataLength; ++i) {
    if (node = group[i]) {
      node.__data__ = data[i];
      update[i] = node;
    } else {
      enter[i] = new _enter.EnterNode(parent, data[i]);
    }
  } // Put any non-null nodes that don’t fit into exit.


  for (; i < groupLength; ++i) {
    if (node = group[i]) {
      exit[i] = node;
    }
  }
}

function bindKey(parent, group, enter, update, exit, data, key) {
  var i,
      node,
      nodeByKeyValue = {},
      groupLength = group.length,
      dataLength = data.length,
      keyValues = new Array(groupLength),
      keyValue; // Compute the key for each node.
  // If multiple nodes have the same key, the duplicates are added to exit.

  for (i = 0; i < groupLength; ++i) {
    if (node = group[i]) {
      keyValues[i] = keyValue = keyPrefix + key.call(node, node.__data__, i, group);

      if (keyValue in nodeByKeyValue) {
        exit[i] = node;
      } else {
        nodeByKeyValue[keyValue] = node;
      }
    }
  } // Compute the key for each datum.
  // If there a node associated with this key, join and add it to update.
  // If there is not (or the key is a duplicate), add it to enter.


  for (i = 0; i < dataLength; ++i) {
    keyValue = keyPrefix + key.call(parent, data[i], i, data);

    if (node = nodeByKeyValue[keyValue]) {
      update[i] = node;
      node.__data__ = data[i];
      nodeByKeyValue[keyValue] = null;
    } else {
      enter[i] = new _enter.EnterNode(parent, data[i]);
    }
  } // Add any remaining nodes that were not bound to data to exit.


  for (i = 0; i < groupLength; ++i) {
    if ((node = group[i]) && nodeByKeyValue[keyValues[i]] === node) {
      exit[i] = node;
    }
  }
}

function _default(value, key) {
  if (!value) {
    data = new Array(this.size()), j = -1;
    this.each(function (d) {
      data[++j] = d;
    });
    return data;
  }

  var bind = key ? bindKey : bindIndex,
      parents = this._parents,
      groups = this._groups;
  if (typeof value !== "function") value = (0, _constant.default)(value);

  for (var m = groups.length, update = new Array(m), enter = new Array(m), exit = new Array(m), j = 0; j < m; ++j) {
    var parent = parents[j],
        group = groups[j],
        groupLength = group.length,
        data = value.call(parent, parent && parent.__data__, j, parents),
        dataLength = data.length,
        enterGroup = enter[j] = new Array(dataLength),
        updateGroup = update[j] = new Array(dataLength),
        exitGroup = exit[j] = new Array(groupLength);
    bind(parent, group, enterGroup, updateGroup, exitGroup, data, key); // Now connect the enter nodes to their following update node, such that
    // appendChild can insert the materialized enter node before this node,
    // rather than at the end of the parent node.

    for (var i0 = 0, i1 = 0, previous, next; i0 < dataLength; ++i0) {
      if (previous = enterGroup[i0]) {
        if (i0 >= i1) i1 = i0 + 1;

        while (!(next = updateGroup[i1]) && ++i1 < dataLength);

        previous._next = next || null;
      }
    }
  }

  update = new _index.Selection(update, parents);
  update._enter = enter;
  update._exit = exit;
  return update;
}
},{"./index":"jpDG","./enter":"wXei","../constant":"5O/Y"}],"tchs":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _sparse = _interopRequireDefault(require("./sparse"));

var _index = require("./index");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default() {
  return new _index.Selection(this._exit || this._groups.map(_sparse.default), this._parents);
}
},{"./sparse":"NmjR","./index":"jpDG"}],"1i+5":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _index = require("./index");

function _default(selection) {
  for (var groups0 = this._groups, groups1 = selection._groups, m0 = groups0.length, m1 = groups1.length, m = Math.min(m0, m1), merges = new Array(m0), j = 0; j < m; ++j) {
    for (var group0 = groups0[j], group1 = groups1[j], n = group0.length, merge = merges[j] = new Array(n), node, i = 0; i < n; ++i) {
      if (node = group0[i] || group1[i]) {
        merge[i] = node;
      }
    }
  }

  for (; j < m0; ++j) {
    merges[j] = groups0[j];
  }

  return new _index.Selection(merges, this._parents);
}
},{"./index":"jpDG"}],"RepQ":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default() {
  for (var groups = this._groups, j = -1, m = groups.length; ++j < m;) {
    for (var group = groups[j], i = group.length - 1, next = group[i], node; --i >= 0;) {
      if (node = group[i]) {
        if (next && next !== node.nextSibling) next.parentNode.insertBefore(node, next);
        next = node;
      }
    }
  }

  return this;
}
},{}],"D8yW":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _index = require("./index");

function _default(compare) {
  if (!compare) compare = ascending;

  function compareNode(a, b) {
    return a && b ? compare(a.__data__, b.__data__) : !a - !b;
  }

  for (var groups = this._groups, m = groups.length, sortgroups = new Array(m), j = 0; j < m; ++j) {
    for (var group = groups[j], n = group.length, sortgroup = sortgroups[j] = new Array(n), node, i = 0; i < n; ++i) {
      if (node = group[i]) {
        sortgroup[i] = node;
      }
    }

    sortgroup.sort(compareNode);
  }

  return new _index.Selection(sortgroups, this._parents).order();
}

function ascending(a, b) {
  return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;
}
},{"./index":"jpDG"}],"+pbQ":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default() {
  var callback = arguments[0];
  arguments[0] = this;
  callback.apply(null, arguments);
  return this;
}
},{}],"kO0T":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default() {
  var nodes = new Array(this.size()),
      i = -1;
  this.each(function () {
    nodes[++i] = this;
  });
  return nodes;
}
},{}],"84xF":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default() {
  for (var groups = this._groups, j = 0, m = groups.length; j < m; ++j) {
    for (var group = groups[j], i = 0, n = group.length; i < n; ++i) {
      var node = group[i];
      if (node) return node;
    }
  }

  return null;
}
},{}],"w9fp":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default() {
  var size = 0;
  this.each(function () {
    ++size;
  });
  return size;
}
},{}],"UF+O":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default() {
  return !this.node();
}
},{}],"q4XW":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(callback) {
  for (var groups = this._groups, j = 0, m = groups.length; j < m; ++j) {
    for (var group = groups[j], i = 0, n = group.length, node; i < n; ++i) {
      if (node = group[i]) callback.call(node, node.__data__, i, group);
    }
  }

  return this;
}
},{}],"Tdf9":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _namespace = _interopRequireDefault(require("../namespace"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function attrRemove(name) {
  return function () {
    this.removeAttribute(name);
  };
}

function attrRemoveNS(fullname) {
  return function () {
    this.removeAttributeNS(fullname.space, fullname.local);
  };
}

function attrConstant(name, value) {
  return function () {
    this.setAttribute(name, value);
  };
}

function attrConstantNS(fullname, value) {
  return function () {
    this.setAttributeNS(fullname.space, fullname.local, value);
  };
}

function attrFunction(name, value) {
  return function () {
    var v = value.apply(this, arguments);
    if (v == null) this.removeAttribute(name);else this.setAttribute(name, v);
  };
}

function attrFunctionNS(fullname, value) {
  return function () {
    var v = value.apply(this, arguments);
    if (v == null) this.removeAttributeNS(fullname.space, fullname.local);else this.setAttributeNS(fullname.space, fullname.local, v);
  };
}

function _default(name, value) {
  var fullname = (0, _namespace.default)(name);

  if (arguments.length < 2) {
    var node = this.node();
    return fullname.local ? node.getAttributeNS(fullname.space, fullname.local) : node.getAttribute(fullname);
  }

  return this.each((value == null ? fullname.local ? attrRemoveNS : attrRemove : typeof value === "function" ? fullname.local ? attrFunctionNS : attrFunction : fullname.local ? attrConstantNS : attrConstant)(fullname, value));
}
},{"../namespace":"OLJ5"}],"D1dR":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(node) {
  return node.ownerDocument && node.ownerDocument.defaultView || // node is a Node
  node.document && node // node is a Window
  || node.defaultView; // node is a Document
}
},{}],"3VXj":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;
exports.styleValue = styleValue;

var _window = _interopRequireDefault(require("../window"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function styleRemove(name) {
  return function () {
    this.style.removeProperty(name);
  };
}

function styleConstant(name, value, priority) {
  return function () {
    this.style.setProperty(name, value, priority);
  };
}

function styleFunction(name, value, priority) {
  return function () {
    var v = value.apply(this, arguments);
    if (v == null) this.style.removeProperty(name);else this.style.setProperty(name, v, priority);
  };
}

function _default(name, value, priority) {
  return arguments.length > 1 ? this.each((value == null ? styleRemove : typeof value === "function" ? styleFunction : styleConstant)(name, value, priority == null ? "" : priority)) : styleValue(this.node(), name);
}

function styleValue(node, name) {
  return node.style.getPropertyValue(name) || (0, _window.default)(node).getComputedStyle(node, null).getPropertyValue(name);
}
},{"../window":"D1dR"}],"Q/OW":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function propertyRemove(name) {
  return function () {
    delete this[name];
  };
}

function propertyConstant(name, value) {
  return function () {
    this[name] = value;
  };
}

function propertyFunction(name, value) {
  return function () {
    var v = value.apply(this, arguments);
    if (v == null) delete this[name];else this[name] = v;
  };
}

function _default(name, value) {
  return arguments.length > 1 ? this.each((value == null ? propertyRemove : typeof value === "function" ? propertyFunction : propertyConstant)(name, value)) : this.node()[name];
}
},{}],"+rtN":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function classArray(string) {
  return string.trim().split(/^|\s+/);
}

function classList(node) {
  return node.classList || new ClassList(node);
}

function ClassList(node) {
  this._node = node;
  this._names = classArray(node.getAttribute("class") || "");
}

ClassList.prototype = {
  add: function (name) {
    var i = this._names.indexOf(name);

    if (i < 0) {
      this._names.push(name);

      this._node.setAttribute("class", this._names.join(" "));
    }
  },
  remove: function (name) {
    var i = this._names.indexOf(name);

    if (i >= 0) {
      this._names.splice(i, 1);

      this._node.setAttribute("class", this._names.join(" "));
    }
  },
  contains: function (name) {
    return this._names.indexOf(name) >= 0;
  }
};

function classedAdd(node, names) {
  var list = classList(node),
      i = -1,
      n = names.length;

  while (++i < n) list.add(names[i]);
}

function classedRemove(node, names) {
  var list = classList(node),
      i = -1,
      n = names.length;

  while (++i < n) list.remove(names[i]);
}

function classedTrue(names) {
  return function () {
    classedAdd(this, names);
  };
}

function classedFalse(names) {
  return function () {
    classedRemove(this, names);
  };
}

function classedFunction(names, value) {
  return function () {
    (value.apply(this, arguments) ? classedAdd : classedRemove)(this, names);
  };
}

function _default(name, value) {
  var names = classArray(name + "");

  if (arguments.length < 2) {
    var list = classList(this.node()),
        i = -1,
        n = names.length;

    while (++i < n) if (!list.contains(names[i])) return false;

    return true;
  }

  return this.each((typeof value === "function" ? classedFunction : value ? classedTrue : classedFalse)(names, value));
}
},{}],"hAJ3":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function textRemove() {
  this.textContent = "";
}

function textConstant(value) {
  return function () {
    this.textContent = value;
  };
}

function textFunction(value) {
  return function () {
    var v = value.apply(this, arguments);
    this.textContent = v == null ? "" : v;
  };
}

function _default(value) {
  return arguments.length ? this.each(value == null ? textRemove : (typeof value === "function" ? textFunction : textConstant)(value)) : this.node().textContent;
}
},{}],"FiSM":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function htmlRemove() {
  this.innerHTML = "";
}

function htmlConstant(value) {
  return function () {
    this.innerHTML = value;
  };
}

function htmlFunction(value) {
  return function () {
    var v = value.apply(this, arguments);
    this.innerHTML = v == null ? "" : v;
  };
}

function _default(value) {
  return arguments.length ? this.each(value == null ? htmlRemove : (typeof value === "function" ? htmlFunction : htmlConstant)(value)) : this.node().innerHTML;
}
},{}],"gvi7":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function raise() {
  if (this.nextSibling) this.parentNode.appendChild(this);
}

function _default() {
  return this.each(raise);
}
},{}],"gv/5":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function lower() {
  if (this.previousSibling) this.parentNode.insertBefore(this, this.parentNode.firstChild);
}

function _default() {
  return this.each(lower);
}
},{}],"efv1":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _creator = _interopRequireDefault(require("../creator"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(name) {
  var create = typeof name === "function" ? name : (0, _creator.default)(name);
  return this.select(function () {
    return this.appendChild(create.apply(this, arguments));
  });
}
},{"../creator":"EIjt"}],"6ILQ":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _creator = _interopRequireDefault(require("../creator"));

var _selector = _interopRequireDefault(require("../selector"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function constantNull() {
  return null;
}

function _default(name, before) {
  var create = typeof name === "function" ? name : (0, _creator.default)(name),
      select = before == null ? constantNull : typeof before === "function" ? before : (0, _selector.default)(before);
  return this.select(function () {
    return this.insertBefore(create.apply(this, arguments), select.apply(this, arguments) || null);
  });
}
},{"../creator":"EIjt","../selector":"xs2I"}],"quBB":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function remove() {
  var parent = this.parentNode;
  if (parent) parent.removeChild(this);
}

function _default() {
  return this.each(remove);
}
},{}],"UpcG":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function selection_cloneShallow() {
  return this.parentNode.insertBefore(this.cloneNode(false), this.nextSibling);
}

function selection_cloneDeep() {
  return this.parentNode.insertBefore(this.cloneNode(true), this.nextSibling);
}

function _default(deep) {
  return this.select(deep ? selection_cloneDeep : selection_cloneShallow);
}
},{}],"fuQ8":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(value) {
  return arguments.length ? this.property("__data__", value) : this.node().__data__;
}
},{}],"j4rF":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;
exports.customEvent = customEvent;
exports.event = void 0;
var filterEvents = {};
var event = null;
exports.event = event;

if (typeof document !== "undefined") {
  var element = document.documentElement;

  if (!("onmouseenter" in element)) {
    filterEvents = {
      mouseenter: "mouseover",
      mouseleave: "mouseout"
    };
  }
}

function filterContextListener(listener, index, group) {
  listener = contextListener(listener, index, group);
  return function (event) {
    var related = event.relatedTarget;

    if (!related || related !== this && !(related.compareDocumentPosition(this) & 8)) {
      listener.call(this, event);
    }
  };
}

function contextListener(listener, index, group) {
  return function (event1) {
    var event0 = event; // Events can be reentrant (e.g., focus).

    exports.event = event = event1;

    try {
      listener.call(this, this.__data__, index, group);
    } finally {
      exports.event = event = event0;
    }
  };
}

function parseTypenames(typenames) {
  return typenames.trim().split(/^|\s+/).map(function (t) {
    var name = "",
        i = t.indexOf(".");
    if (i >= 0) name = t.slice(i + 1), t = t.slice(0, i);
    return {
      type: t,
      name: name
    };
  });
}

function onRemove(typename) {
  return function () {
    var on = this.__on;
    if (!on) return;

    for (var j = 0, i = -1, m = on.length, o; j < m; ++j) {
      if (o = on[j], (!typename.type || o.type === typename.type) && o.name === typename.name) {
        this.removeEventListener(o.type, o.listener, o.capture);
      } else {
        on[++i] = o;
      }
    }

    if (++i) on.length = i;else delete this.__on;
  };
}

function onAdd(typename, value, capture) {
  var wrap = filterEvents.hasOwnProperty(typename.type) ? filterContextListener : contextListener;
  return function (d, i, group) {
    var on = this.__on,
        o,
        listener = wrap(value, i, group);
    if (on) for (var j = 0, m = on.length; j < m; ++j) {
      if ((o = on[j]).type === typename.type && o.name === typename.name) {
        this.removeEventListener(o.type, o.listener, o.capture);
        this.addEventListener(o.type, o.listener = listener, o.capture = capture);
        o.value = value;
        return;
      }
    }
    this.addEventListener(typename.type, listener, capture);
    o = {
      type: typename.type,
      name: typename.name,
      value: value,
      listener: listener,
      capture: capture
    };
    if (!on) this.__on = [o];else on.push(o);
  };
}

function _default(typename, value, capture) {
  var typenames = parseTypenames(typename + ""),
      i,
      n = typenames.length,
      t;

  if (arguments.length < 2) {
    var on = this.node().__on;

    if (on) for (var j = 0, m = on.length, o; j < m; ++j) {
      for (i = 0, o = on[j]; i < n; ++i) {
        if ((t = typenames[i]).type === o.type && t.name === o.name) {
          return o.value;
        }
      }
    }
    return;
  }

  on = value ? onAdd : onRemove;
  if (capture == null) capture = false;

  for (i = 0; i < n; ++i) this.each(on(typenames[i], value, capture));

  return this;
}

function customEvent(event1, listener, that, args) {
  var event0 = event;
  event1.sourceEvent = event;
  exports.event = event = event1;

  try {
    return listener.apply(that, args);
  } finally {
    exports.event = event = event0;
  }
}
},{}],"enVu":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _window = _interopRequireDefault(require("../window"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function dispatchEvent(node, type, params) {
  var window = (0, _window.default)(node),
      event = window.CustomEvent;

  if (typeof event === "function") {
    event = new event(type, params);
  } else {
    event = window.document.createEvent("Event");
    if (params) event.initEvent(type, params.bubbles, params.cancelable), event.detail = params.detail;else event.initEvent(type, false, false);
  }

  node.dispatchEvent(event);
}

function dispatchConstant(type, params) {
  return function () {
    return dispatchEvent(this, type, params);
  };
}

function dispatchFunction(type, params) {
  return function () {
    return dispatchEvent(this, type, params.apply(this, arguments));
  };
}

function _default(type, params) {
  return this.each((typeof params === "function" ? dispatchFunction : dispatchConstant)(type, params));
}
},{"../window":"D1dR"}],"jpDG":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Selection = Selection;
exports.default = exports.root = void 0;

var _select = _interopRequireDefault(require("./select"));

var _selectAll = _interopRequireDefault(require("./selectAll"));

var _filter = _interopRequireDefault(require("./filter"));

var _data = _interopRequireDefault(require("./data"));

var _enter = _interopRequireDefault(require("./enter"));

var _exit = _interopRequireDefault(require("./exit"));

var _merge = _interopRequireDefault(require("./merge"));

var _order = _interopRequireDefault(require("./order"));

var _sort = _interopRequireDefault(require("./sort"));

var _call = _interopRequireDefault(require("./call"));

var _nodes = _interopRequireDefault(require("./nodes"));

var _node = _interopRequireDefault(require("./node"));

var _size = _interopRequireDefault(require("./size"));

var _empty = _interopRequireDefault(require("./empty"));

var _each = _interopRequireDefault(require("./each"));

var _attr = _interopRequireDefault(require("./attr"));

var _style = _interopRequireDefault(require("./style"));

var _property = _interopRequireDefault(require("./property"));

var _classed = _interopRequireDefault(require("./classed"));

var _text = _interopRequireDefault(require("./text"));

var _html = _interopRequireDefault(require("./html"));

var _raise = _interopRequireDefault(require("./raise"));

var _lower = _interopRequireDefault(require("./lower"));

var _append = _interopRequireDefault(require("./append"));

var _insert = _interopRequireDefault(require("./insert"));

var _remove = _interopRequireDefault(require("./remove"));

var _clone = _interopRequireDefault(require("./clone"));

var _datum = _interopRequireDefault(require("./datum"));

var _on = _interopRequireDefault(require("./on"));

var _dispatch = _interopRequireDefault(require("./dispatch"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var root = [null];
exports.root = root;

function Selection(groups, parents) {
  this._groups = groups;
  this._parents = parents;
}

function selection() {
  return new Selection([[document.documentElement]], root);
}

Selection.prototype = selection.prototype = {
  constructor: Selection,
  select: _select.default,
  selectAll: _selectAll.default,
  filter: _filter.default,
  data: _data.default,
  enter: _enter.default,
  exit: _exit.default,
  merge: _merge.default,
  order: _order.default,
  sort: _sort.default,
  call: _call.default,
  nodes: _nodes.default,
  node: _node.default,
  size: _size.default,
  empty: _empty.default,
  each: _each.default,
  attr: _attr.default,
  style: _style.default,
  property: _property.default,
  classed: _classed.default,
  text: _text.default,
  html: _html.default,
  raise: _raise.default,
  lower: _lower.default,
  append: _append.default,
  insert: _insert.default,
  remove: _remove.default,
  clone: _clone.default,
  datum: _datum.default,
  on: _on.default,
  dispatch: _dispatch.default
};
var _default = selection;
exports.default = _default;
},{"./select":"LRy5","./selectAll":"ijGs","./filter":"hrVj","./data":"8QmP","./enter":"wXei","./exit":"tchs","./merge":"1i+5","./order":"RepQ","./sort":"D8yW","./call":"+pbQ","./nodes":"kO0T","./node":"84xF","./size":"w9fp","./empty":"UF+O","./each":"q4XW","./attr":"Tdf9","./style":"3VXj","./property":"Q/OW","./classed":"+rtN","./text":"hAJ3","./html":"FiSM","./raise":"gvi7","./lower":"gv/5","./append":"efv1","./insert":"6ILQ","./remove":"quBB","./clone":"UpcG","./datum":"fuQ8","./on":"j4rF","./dispatch":"enVu"}],"i/TO":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _index = require("./selection/index");

function _default(selector) {
  return typeof selector === "string" ? new _index.Selection([[document.querySelector(selector)]], [document.documentElement]) : new _index.Selection([[selector]], _index.root);
}
},{"./selection/index":"jpDG"}],"tmZ+":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _creator = _interopRequireDefault(require("./creator"));

var _select = _interopRequireDefault(require("./select"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(name) {
  return (0, _select.default)((0, _creator.default)(name).call(document.documentElement));
}
},{"./creator":"EIjt","./select":"i/TO"}],"JuPP":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = local;
var nextId = 0;

function local() {
  return new Local();
}

function Local() {
  this._ = "@" + (++nextId).toString(36);
}

Local.prototype = local.prototype = {
  constructor: Local,
  get: function (node) {
    var id = this._;

    while (!(id in node)) if (!(node = node.parentNode)) return;

    return node[id];
  },
  set: function (node, value) {
    return node[this._] = value;
  },
  remove: function (node) {
    return this._ in node && delete node[this._];
  },
  toString: function () {
    return this._;
  }
};
},{}],"mu9P":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _on = require("./selection/on");

function _default() {
  var current = _on.event,
      source;

  while (source = current.sourceEvent) current = source;

  return current;
}
},{"./selection/on":"j4rF"}],"9ZIl":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(node, event) {
  var svg = node.ownerSVGElement || node;

  if (svg.createSVGPoint) {
    var point = svg.createSVGPoint();
    point.x = event.clientX, point.y = event.clientY;
    point = point.matrixTransform(node.getScreenCTM().inverse());
    return [point.x, point.y];
  }

  var rect = node.getBoundingClientRect();
  return [event.clientX - rect.left - node.clientLeft, event.clientY - rect.top - node.clientTop];
}
},{}],"lbxf":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _sourceEvent = _interopRequireDefault(require("./sourceEvent"));

var _point = _interopRequireDefault(require("./point"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(node) {
  var event = (0, _sourceEvent.default)();
  if (event.changedTouches) event = event.changedTouches[0];
  return (0, _point.default)(node, event);
}
},{"./sourceEvent":"mu9P","./point":"9ZIl"}],"7/to":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _index = require("./selection/index");

function _default(selector) {
  return typeof selector === "string" ? new _index.Selection([document.querySelectorAll(selector)], [document.documentElement]) : new _index.Selection([selector == null ? [] : selector], _index.root);
}
},{"./selection/index":"jpDG"}],"3Mh7":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _sourceEvent = _interopRequireDefault(require("./sourceEvent"));

var _point = _interopRequireDefault(require("./point"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(node, touches, identifier) {
  if (arguments.length < 3) identifier = touches, touches = (0, _sourceEvent.default)().changedTouches;

  for (var i = 0, n = touches ? touches.length : 0, touch; i < n; ++i) {
    if ((touch = touches[i]).identifier === identifier) {
      return (0, _point.default)(node, touch);
    }
  }

  return null;
}
},{"./sourceEvent":"mu9P","./point":"9ZIl"}],"RG1U":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _sourceEvent = _interopRequireDefault(require("./sourceEvent"));

var _point = _interopRequireDefault(require("./point"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(node, touches) {
  if (touches == null) touches = (0, _sourceEvent.default)().touches;

  for (var i = 0, n = touches ? touches.length : 0, points = new Array(n); i < n; ++i) {
    points[i] = (0, _point.default)(node, touches[i]);
  }

  return points;
}
},{"./sourceEvent":"mu9P","./point":"9ZIl"}],"lm1C":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "create", {
  enumerable: true,
  get: function () {
    return _create.default;
  }
});
Object.defineProperty(exports, "creator", {
  enumerable: true,
  get: function () {
    return _creator.default;
  }
});
Object.defineProperty(exports, "local", {
  enumerable: true,
  get: function () {
    return _local.default;
  }
});
Object.defineProperty(exports, "matcher", {
  enumerable: true,
  get: function () {
    return _matcher.default;
  }
});
Object.defineProperty(exports, "mouse", {
  enumerable: true,
  get: function () {
    return _mouse.default;
  }
});
Object.defineProperty(exports, "namespace", {
  enumerable: true,
  get: function () {
    return _namespace.default;
  }
});
Object.defineProperty(exports, "namespaces", {
  enumerable: true,
  get: function () {
    return _namespaces.default;
  }
});
Object.defineProperty(exports, "clientPoint", {
  enumerable: true,
  get: function () {
    return _point.default;
  }
});
Object.defineProperty(exports, "select", {
  enumerable: true,
  get: function () {
    return _select.default;
  }
});
Object.defineProperty(exports, "selectAll", {
  enumerable: true,
  get: function () {
    return _selectAll.default;
  }
});
Object.defineProperty(exports, "selection", {
  enumerable: true,
  get: function () {
    return _index.default;
  }
});
Object.defineProperty(exports, "selector", {
  enumerable: true,
  get: function () {
    return _selector.default;
  }
});
Object.defineProperty(exports, "selectorAll", {
  enumerable: true,
  get: function () {
    return _selectorAll.default;
  }
});
Object.defineProperty(exports, "style", {
  enumerable: true,
  get: function () {
    return _style.styleValue;
  }
});
Object.defineProperty(exports, "touch", {
  enumerable: true,
  get: function () {
    return _touch.default;
  }
});
Object.defineProperty(exports, "touches", {
  enumerable: true,
  get: function () {
    return _touches.default;
  }
});
Object.defineProperty(exports, "window", {
  enumerable: true,
  get: function () {
    return _window.default;
  }
});
Object.defineProperty(exports, "event", {
  enumerable: true,
  get: function () {
    return _on.event;
  }
});
Object.defineProperty(exports, "customEvent", {
  enumerable: true,
  get: function () {
    return _on.customEvent;
  }
});

var _create = _interopRequireDefault(require("./create"));

var _creator = _interopRequireDefault(require("./creator"));

var _local = _interopRequireDefault(require("./local"));

var _matcher = _interopRequireDefault(require("./matcher"));

var _mouse = _interopRequireDefault(require("./mouse"));

var _namespace = _interopRequireDefault(require("./namespace"));

var _namespaces = _interopRequireDefault(require("./namespaces"));

var _point = _interopRequireDefault(require("./point"));

var _select = _interopRequireDefault(require("./select"));

var _selectAll = _interopRequireDefault(require("./selectAll"));

var _index = _interopRequireDefault(require("./selection/index"));

var _selector = _interopRequireDefault(require("./selector"));

var _selectorAll = _interopRequireDefault(require("./selectorAll"));

var _style = require("./selection/style");

var _touch = _interopRequireDefault(require("./touch"));

var _touches = _interopRequireDefault(require("./touches"));

var _window = _interopRequireDefault(require("./window"));

var _on = require("./selection/on");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
},{"./create":"tmZ+","./creator":"EIjt","./local":"JuPP","./matcher":"4PkZ","./mouse":"lbxf","./namespace":"OLJ5","./namespaces":"UzOB","./point":"9ZIl","./select":"i/TO","./selectAll":"7/to","./selection/index":"jpDG","./selector":"xs2I","./selectorAll":"+mHY","./selection/style":"3VXj","./touch":"3Mh7","./touches":"RG1U","./window":"D1dR","./selection/on":"j4rF"}],"DCEg":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.nopropagation = nopropagation;
exports.default = _default;

var _d3Selection = require("d3-selection");

function nopropagation() {
  _d3Selection.event.stopImmediatePropagation();
}

function _default() {
  _d3Selection.event.preventDefault();

  _d3Selection.event.stopImmediatePropagation();
}
},{"d3-selection":"lm1C"}],"6rD9":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;
exports.yesdrag = yesdrag;

var _d3Selection = require("d3-selection");

var _noevent = _interopRequireDefault(require("./noevent"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(view) {
  var root = view.document.documentElement,
      selection = (0, _d3Selection.select)(view).on("dragstart.drag", _noevent.default, true);

  if ("onselectstart" in root) {
    selection.on("selectstart.drag", _noevent.default, true);
  } else {
    root.__noselect = root.style.MozUserSelect;
    root.style.MozUserSelect = "none";
  }
}

function yesdrag(view, noclick) {
  var root = view.document.documentElement,
      selection = (0, _d3Selection.select)(view).on("dragstart.drag", null);

  if (noclick) {
    selection.on("click.drag", _noevent.default, true);
    setTimeout(function () {
      selection.on("click.drag", null);
    }, 0);
  }

  if ("onselectstart" in root) {
    selection.on("selectstart.drag", null);
  } else {
    root.style.MozUserSelect = root.__noselect;
    delete root.__noselect;
  }
}
},{"d3-selection":"lm1C","./noevent":"DCEg"}],"IkUE":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = DragEvent;

function DragEvent(target, type, subject, id, active, x, y, dx, dy, dispatch) {
  this.target = target;
  this.type = type;
  this.subject = subject;
  this.identifier = id;
  this.active = active;
  this.x = x;
  this.y = y;
  this.dx = dx;
  this.dy = dy;
  this._ = dispatch;
}

DragEvent.prototype.on = function () {
  var value = this._.on.apply(this._, arguments);

  return value === this._ ? this : value;
};
},{}],"68fG":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _d3Dispatch = require("d3-dispatch");

var _d3Selection = require("d3-selection");

var _nodrag = _interopRequireWildcard(require("./nodrag"));

var _noevent = _interopRequireWildcard(require("./noevent"));

var _constant = _interopRequireDefault(require("./constant"));

var _event = _interopRequireDefault(require("./event"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

// Ignore right-click, since that should open the context menu.
function defaultFilter() {
  return !_d3Selection.event.button;
}

function defaultContainer() {
  return this.parentNode;
}

function defaultSubject(d) {
  return d == null ? {
    x: _d3Selection.event.x,
    y: _d3Selection.event.y
  } : d;
}

function defaultTouchable() {
  return "ontouchstart" in this;
}

function _default() {
  var filter = defaultFilter,
      container = defaultContainer,
      subject = defaultSubject,
      touchable = defaultTouchable,
      gestures = {},
      listeners = (0, _d3Dispatch.dispatch)("start", "drag", "end"),
      active = 0,
      mousedownx,
      mousedowny,
      mousemoving,
      touchending,
      clickDistance2 = 0;

  function drag(selection) {
    selection.on("mousedown.drag", mousedowned).filter(touchable).on("touchstart.drag", touchstarted).on("touchmove.drag", touchmoved).on("touchend.drag touchcancel.drag", touchended).style("touch-action", "none").style("-webkit-tap-highlight-color", "rgba(0,0,0,0)");
  }

  function mousedowned() {
    if (touchending || !filter.apply(this, arguments)) return;
    var gesture = beforestart("mouse", container.apply(this, arguments), _d3Selection.mouse, this, arguments);
    if (!gesture) return;
    (0, _d3Selection.select)(_d3Selection.event.view).on("mousemove.drag", mousemoved, true).on("mouseup.drag", mouseupped, true);
    (0, _nodrag.default)(_d3Selection.event.view);
    (0, _noevent.nopropagation)();
    mousemoving = false;
    mousedownx = _d3Selection.event.clientX;
    mousedowny = _d3Selection.event.clientY;
    gesture("start");
  }

  function mousemoved() {
    (0, _noevent.default)();

    if (!mousemoving) {
      var dx = _d3Selection.event.clientX - mousedownx,
          dy = _d3Selection.event.clientY - mousedowny;
      mousemoving = dx * dx + dy * dy > clickDistance2;
    }

    gestures.mouse("drag");
  }

  function mouseupped() {
    (0, _d3Selection.select)(_d3Selection.event.view).on("mousemove.drag mouseup.drag", null);
    (0, _nodrag.yesdrag)(_d3Selection.event.view, mousemoving);
    (0, _noevent.default)();
    gestures.mouse("end");
  }

  function touchstarted() {
    if (!filter.apply(this, arguments)) return;
    var touches = _d3Selection.event.changedTouches,
        c = container.apply(this, arguments),
        n = touches.length,
        i,
        gesture;

    for (i = 0; i < n; ++i) {
      if (gesture = beforestart(touches[i].identifier, c, _d3Selection.touch, this, arguments)) {
        (0, _noevent.nopropagation)();
        gesture("start");
      }
    }
  }

  function touchmoved() {
    var touches = _d3Selection.event.changedTouches,
        n = touches.length,
        i,
        gesture;

    for (i = 0; i < n; ++i) {
      if (gesture = gestures[touches[i].identifier]) {
        (0, _noevent.default)();
        gesture("drag");
      }
    }
  }

  function touchended() {
    var touches = _d3Selection.event.changedTouches,
        n = touches.length,
        i,
        gesture;
    if (touchending) clearTimeout(touchending);
    touchending = setTimeout(function () {
      touchending = null;
    }, 500); // Ghost clicks are delayed!

    for (i = 0; i < n; ++i) {
      if (gesture = gestures[touches[i].identifier]) {
        (0, _noevent.nopropagation)();
        gesture("end");
      }
    }
  }

  function beforestart(id, container, point, that, args) {
    var p = point(container, id),
        s,
        dx,
        dy,
        sublisteners = listeners.copy();
    if (!(0, _d3Selection.customEvent)(new _event.default(drag, "beforestart", s, id, active, p[0], p[1], 0, 0, sublisteners), function () {
      if ((_d3Selection.event.subject = s = subject.apply(that, args)) == null) return false;
      dx = s.x - p[0] || 0;
      dy = s.y - p[1] || 0;
      return true;
    })) return;
    return function gesture(type) {
      var p0 = p,
          n;

      switch (type) {
        case "start":
          gestures[id] = gesture, n = active++;
          break;

        case "end":
          delete gestures[id], --active;
        // nobreak

        case "drag":
          p = point(container, id), n = active;
          break;
      }

      (0, _d3Selection.customEvent)(new _event.default(drag, type, s, id, n, p[0] + dx, p[1] + dy, p[0] - p0[0], p[1] - p0[1], sublisteners), sublisteners.apply, sublisteners, [type, that, args]);
    };
  }

  drag.filter = function (_) {
    return arguments.length ? (filter = typeof _ === "function" ? _ : (0, _constant.default)(!!_), drag) : filter;
  };

  drag.container = function (_) {
    return arguments.length ? (container = typeof _ === "function" ? _ : (0, _constant.default)(_), drag) : container;
  };

  drag.subject = function (_) {
    return arguments.length ? (subject = typeof _ === "function" ? _ : (0, _constant.default)(_), drag) : subject;
  };

  drag.touchable = function (_) {
    return arguments.length ? (touchable = typeof _ === "function" ? _ : (0, _constant.default)(!!_), drag) : touchable;
  };

  drag.on = function () {
    var value = listeners.on.apply(listeners, arguments);
    return value === listeners ? drag : value;
  };

  drag.clickDistance = function (_) {
    return arguments.length ? (clickDistance2 = (_ = +_) * _, drag) : Math.sqrt(clickDistance2);
  };

  return drag;
}
},{"d3-dispatch":"UU/c","d3-selection":"lm1C","./nodrag":"6rD9","./noevent":"DCEg","./constant":"5O/Y","./event":"IkUE"}],"LrBi":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "drag", {
  enumerable: true,
  get: function () {
    return _drag.default;
  }
});
Object.defineProperty(exports, "dragDisable", {
  enumerable: true,
  get: function () {
    return _nodrag.default;
  }
});
Object.defineProperty(exports, "dragEnable", {
  enumerable: true,
  get: function () {
    return _nodrag.yesdrag;
  }
});

var _drag = _interopRequireDefault(require("./drag"));

var _nodrag = _interopRequireWildcard(require("./nodrag"));

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
},{"./drag":"68fG","./nodrag":"6rD9"}],"CSb3":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;
exports.extend = extend;

function _default(constructor, factory, prototype) {
  constructor.prototype = factory.prototype = prototype;
  prototype.constructor = constructor;
}

function extend(parent, definition) {
  var prototype = Object.create(parent.prototype);

  for (var key in definition) prototype[key] = definition[key];

  return prototype;
}
},{}],"UAf0":[function(require,module,exports) {

"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Color = Color;
exports.default = color;
exports.rgbConvert = rgbConvert;
exports.rgb = rgb;
exports.Rgb = Rgb;
exports.hslConvert = hslConvert;
exports.hsl = hsl;
exports.brighter = exports.darker = void 0;

var _define = _interopRequireWildcard(require("./define"));

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function Color() {}

var darker = 0.7;
exports.darker = darker;
var brighter = 1 / darker;
exports.brighter = brighter;
var reI = "\\s*([+-]?\\d+)\\s*",
    reN = "\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)\\s*",
    reP = "\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)%\\s*",
    reHex3 = /^#([0-9a-f]{3})$/,
    reHex6 = /^#([0-9a-f]{6})$/,
    reRgbInteger = new RegExp("^rgb\\(" + [reI, reI, reI] + "\\)$"),
    reRgbPercent = new RegExp("^rgb\\(" + [reP, reP, reP] + "\\)$"),
    reRgbaInteger = new RegExp("^rgba\\(" + [reI, reI, reI, reN] + "\\)$"),
    reRgbaPercent = new RegExp("^rgba\\(" + [reP, reP, reP, reN] + "\\)$"),
    reHslPercent = new RegExp("^hsl\\(" + [reN, reP, reP] + "\\)$"),
    reHslaPercent = new RegExp("^hsla\\(" + [reN, reP, reP, reN] + "\\)$");
var named = {
  aliceblue: 0xf0f8ff,
  antiquewhite: 0xfaebd7,
  aqua: 0x00ffff,
  aquamarine: 0x7fffd4,
  azure: 0xf0ffff,
  beige: 0xf5f5dc,
  bisque: 0xffe4c4,
  black: 0x000000,
  blanchedalmond: 0xffebcd,
  blue: 0x0000ff,
  blueviolet: 0x8a2be2,
  brown: 0xa52a2a,
  burlywood: 0xdeb887,
  cadetblue: 0x5f9ea0,
  chartreuse: 0x7fff00,
  chocolate: 0xd2691e,
  coral: 0xff7f50,
  cornflowerblue: 0x6495ed,
  cornsilk: 0xfff8dc,
  crimson: 0xdc143c,
  cyan: 0x00ffff,
  darkblue: 0x00008b,
  darkcyan: 0x008b8b,
  darkgoldenrod: 0xb8860b,
  darkgray: 0xa9a9a9,
  darkgreen: 0x006400,
  darkgrey: 0xa9a9a9,
  darkkhaki: 0xbdb76b,
  darkmagenta: 0x8b008b,
  darkolivegreen: 0x556b2f,
  darkorange: 0xff8c00,
  darkorchid: 0x9932cc,
  darkred: 0x8b0000,
  darksalmon: 0xe9967a,
  darkseagreen: 0x8fbc8f,
  darkslateblue: 0x483d8b,
  darkslategray: 0x2f4f4f,
  darkslategrey: 0x2f4f4f,
  darkturquoise: 0x00ced1,
  darkviolet: 0x9400d3,
  deeppink: 0xff1493,
  deepskyblue: 0x00bfff,
  dimgray: 0x696969,
  dimgrey: 0x696969,
  dodgerblue: 0x1e90ff,
  firebrick: 0xb22222,
  floralwhite: 0xfffaf0,
  forestgreen: 0x228b22,
  fuchsia: 0xff00ff,
  gainsboro: 0xdcdcdc,
  ghostwhite: 0xf8f8ff,
  gold: 0xffd700,
  goldenrod: 0xdaa520,
  gray: 0x808080,
  green: 0x008000,
  greenyellow: 0xadff2f,
  grey: 0x808080,
  honeydew: 0xf0fff0,
  hotpink: 0xff69b4,
  indianred: 0xcd5c5c,
  indigo: 0x4b0082,
  ivory: 0xfffff0,
  khaki: 0xf0e68c,
  lavender: 0xe6e6fa,
  lavenderblush: 0xfff0f5,
  lawngreen: 0x7cfc00,
  lemonchiffon: 0xfffacd,
  lightblue: 0xadd8e6,
  lightcoral: 0xf08080,
  lightcyan: 0xe0ffff,
  lightgoldenrodyellow: 0xfafad2,
  lightgray: 0xd3d3d3,
  lightgreen: 0x90ee90,
  lightgrey: 0xd3d3d3,
  lightpink: 0xffb6c1,
  lightsalmon: 0xffa07a,
  lightseagreen: 0x20b2aa,
  lightskyblue: 0x87cefa,
  lightslategray: 0x778899,
  lightslategrey: 0x778899,
  lightsteelblue: 0xb0c4de,
  lightyellow: 0xffffe0,
  lime: 0x00ff00,
  limegreen: 0x32cd32,
  linen: 0xfaf0e6,
  magenta: 0xff00ff,
  maroon: 0x800000,
  mediumaquamarine: 0x66cdaa,
  mediumblue: 0x0000cd,
  mediumorchid: 0xba55d3,
  mediumpurple: 0x9370db,
  mediumseagreen: 0x3cb371,
  mediumslateblue: 0x7b68ee,
  mediumspringgreen: 0x00fa9a,
  mediumturquoise: 0x48d1cc,
  mediumvioletred: 0xc71585,
  midnightblue: 0x191970,
  mintcream: 0xf5fffa,
  mistyrose: 0xffe4e1,
  moccasin: 0xffe4b5,
  navajowhite: 0xffdead,
  navy: 0x000080,
  oldlace: 0xfdf5e6,
  olive: 0x808000,
  olivedrab: 0x6b8e23,
  orange: 0xffa500,
  orangered: 0xff4500,
  orchid: 0xda70d6,
  palegoldenrod: 0xeee8aa,
  palegreen: 0x98fb98,
  paleturquoise: 0xafeeee,
  palevioletred: 0xdb7093,
  papayawhip: 0xffefd5,
  peachpuff: 0xffdab9,
  peru: 0xcd853f,
  pink: 0xffc0cb,
  plum: 0xdda0dd,
  powderblue: 0xb0e0e6,
  purple: 0x800080,
  rebeccapurple: 0x663399,
  red: 0xff0000,
  rosybrown: 0xbc8f8f,
  royalblue: 0x4169e1,
  saddlebrown: 0x8b4513,
  salmon: 0xfa8072,
  sandybrown: 0xf4a460,
  seagreen: 0x2e8b57,
  seashell: 0xfff5ee,
  sienna: 0xa0522d,
  silver: 0xc0c0c0,
  skyblue: 0x87ceeb,
  slateblue: 0x6a5acd,
  slategray: 0x708090,
  slategrey: 0x708090,
  snow: 0xfffafa,
  springgreen: 0x00ff7f,
  steelblue: 0x4682b4,
  tan: 0xd2b48c,
  teal: 0x008080,
  thistle: 0xd8bfd8,
  tomato: 0xff6347,
  turquoise: 0x40e0d0,
  violet: 0xee82ee,
  wheat: 0xf5deb3,
  white: 0xffffff,
  whitesmoke: 0xf5f5f5,
  yellow: 0xffff00,
  yellowgreen: 0x9acd32
};
(0, _define.default)(Color, color, {
  displayable: function () {
    return this.rgb().displayable();
  },
  hex: function () {
    return this.rgb().hex();
  },
  toString: function () {
    return this.rgb() + "";
  }
});

function color(format) {
  var m;
  format = (format + "").trim().toLowerCase();
  return (m = reHex3.exec(format)) ? (m = parseInt(m[1], 16), new Rgb(m >> 8 & 0xf | m >> 4 & 0x0f0, m >> 4 & 0xf | m & 0xf0, (m & 0xf) << 4 | m & 0xf, 1) // #f00
  ) : (m = reHex6.exec(format)) ? rgbn(parseInt(m[1], 16)) // #ff0000
  : (m = reRgbInteger.exec(format)) ? new Rgb(m[1], m[2], m[3], 1) // rgb(255, 0, 0)
  : (m = reRgbPercent.exec(format)) ? new Rgb(m[1] * 255 / 100, m[2] * 255 / 100, m[3] * 255 / 100, 1) // rgb(100%, 0%, 0%)
  : (m = reRgbaInteger.exec(format)) ? rgba(m[1], m[2], m[3], m[4]) // rgba(255, 0, 0, 1)
  : (m = reRgbaPercent.exec(format)) ? rgba(m[1] * 255 / 100, m[2] * 255 / 100, m[3] * 255 / 100, m[4]) // rgb(100%, 0%, 0%, 1)
  : (m = reHslPercent.exec(format)) ? hsla(m[1], m[2] / 100, m[3] / 100, 1) // hsl(120, 50%, 50%)
  : (m = reHslaPercent.exec(format)) ? hsla(m[1], m[2] / 100, m[3] / 100, m[4]) // hsla(120, 50%, 50%, 1)
  : named.hasOwnProperty(format) ? rgbn(named[format]) : format === "transparent" ? new Rgb(NaN, NaN, NaN, 0) : null;
}

function rgbn(n) {
  return new Rgb(n >> 16 & 0xff, n >> 8 & 0xff, n & 0xff, 1);
}

function rgba(r, g, b, a) {
  if (a <= 0) r = g = b = NaN;
  return new Rgb(r, g, b, a);
}

function rgbConvert(o) {
  if (!(o instanceof Color)) o = color(o);
  if (!o) return new Rgb();
  o = o.rgb();
  return new Rgb(o.r, o.g, o.b, o.opacity);
}

function rgb(r, g, b, opacity) {
  return arguments.length === 1 ? rgbConvert(r) : new Rgb(r, g, b, opacity == null ? 1 : opacity);
}

function Rgb(r, g, b, opacity) {
  this.r = +r;
  this.g = +g;
  this.b = +b;
  this.opacity = +opacity;
}

(0, _define.default)(Rgb, rgb, (0, _define.extend)(Color, {
  brighter: function (k) {
    k = k == null ? brighter : Math.pow(brighter, k);
    return new Rgb(this.r * k, this.g * k, this.b * k, this.opacity);
  },
  darker: function (k) {
    k = k == null ? darker : Math.pow(darker, k);
    return new Rgb(this.r * k, this.g * k, this.b * k, this.opacity);
  },
  rgb: function () {
    return this;
  },
  displayable: function () {
    return 0 <= this.r && this.r <= 255 && 0 <= this.g && this.g <= 255 && 0 <= this.b && this.b <= 255 && 0 <= this.opacity && this.opacity <= 1;
  },
  hex: function () {
    return "#" + hex(this.r) + hex(this.g) + hex(this.b);
  },
  toString: function () {
    var a = this.opacity;
    a = isNaN(a) ? 1 : Math.max(0, Math.min(1, a));
    return (a === 1 ? "rgb(" : "rgba(") + Math.max(0, Math.min(255, Math.round(this.r) || 0)) + ", " + Math.max(0, Math.min(255, Math.round(this.g) || 0)) + ", " + Math.max(0, Math.min(255, Math.round(this.b) || 0)) + (a === 1 ? ")" : ", " + a + ")");
  }
}));

function hex(value) {
  value = Math.max(0, Math.min(255, Math.round(value) || 0));
  return (value < 16 ? "0" : "") + value.toString(16);
}

function hsla(h, s, l, a) {
  if (a <= 0) h = s = l = NaN;else if (l <= 0 || l >= 1) h = s = NaN;else if (s <= 0) h = NaN;
  return new Hsl(h, s, l, a);
}

function hslConvert(o) {
  if (o instanceof Hsl) return new Hsl(o.h, o.s, o.l, o.opacity);
  if (!(o instanceof Color)) o = color(o);
  if (!o) return new Hsl();
  if (o instanceof Hsl) return o;
  o = o.rgb();
  var r = o.r / 255,
      g = o.g / 255,
      b = o.b / 255,
      min = Math.min(r, g, b),
      max = Math.max(r, g, b),
      h = NaN,
      s = max - min,
      l = (max + min) / 2;

  if (s) {
    if (r === max) h = (g - b) / s + (g < b) * 6;else if (g === max) h = (b - r) / s + 2;else h = (r - g) / s + 4;
    s /= l < 0.5 ? max + min : 2 - max - min;
    h *= 60;
  } else {
    s = l > 0 && l < 1 ? 0 : h;
  }

  return new Hsl(h, s, l, o.opacity);
}

function hsl(h, s, l, opacity) {
  return arguments.length === 1 ? hslConvert(h) : new Hsl(h, s, l, opacity == null ? 1 : opacity);
}

function Hsl(h, s, l, opacity) {
  this.h = +h;
  this.s = +s;
  this.l = +l;
  this.opacity = +opacity;
}

(0, _define.default)(Hsl, hsl, (0, _define.extend)(Color, {
  brighter: function (k) {
    k = k == null ? brighter : Math.pow(brighter, k);
    return new Hsl(this.h, this.s, this.l * k, this.opacity);
  },
  darker: function (k) {
    k = k == null ? darker : Math.pow(darker, k);
    return new Hsl(this.h, this.s, this.l * k, this.opacity);
  },
  rgb: function () {
    var h = this.h % 360 + (this.h < 0) * 360,
        s = isNaN(h) || isNaN(this.s) ? 0 : this.s,
        l = this.l,
        m2 = l + (l < 0.5 ? l : 1 - l) * s,
        m1 = 2 * l - m2;
    return new Rgb(hsl2rgb(h >= 240 ? h - 240 : h + 120, m1, m2), hsl2rgb(h, m1, m2), hsl2rgb(h < 120 ? h + 240 : h - 120, m1, m2), this.opacity);
  },
  displayable: function () {
    return (0 <= this.s && this.s <= 1 || isNaN(this.s)) && 0 <= this.l && this.l <= 1 && 0 <= this.opacity && this.opacity <= 1;
  }
}));
/* From FvD 13.37, CSS Color Module Level 3 */

function hsl2rgb(h, m1, m2) {
  return (h < 60 ? m1 + (m2 - m1) * h / 60 : h < 180 ? m2 : h < 240 ? m1 + (m2 - m1) * (240 - h) / 60 : m1) * 255;
}
},{"./define":"CSb3"}],"8ykI":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.rad2deg = exports.deg2rad = void 0;
var deg2rad = Math.PI / 180;
exports.deg2rad = deg2rad;
var rad2deg = 180 / Math.PI;
exports.rad2deg = rad2deg;
},{}],"n21X":[function(require,module,exports) {

"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.gray = gray;
exports.default = lab;
exports.Lab = Lab;
exports.lch = lch;
exports.hcl = hcl;
exports.Hcl = Hcl;

var _define = _interopRequireWildcard(require("./define"));

var _color = require("./color");

var _math = require("./math");

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

// https://beta.observablehq.com/@mbostock/lab-and-rgb
var K = 18,
    Xn = 0.96422,
    Yn = 1,
    Zn = 0.82521,
    t0 = 4 / 29,
    t1 = 6 / 29,
    t2 = 3 * t1 * t1,
    t3 = t1 * t1 * t1;

function labConvert(o) {
  if (o instanceof Lab) return new Lab(o.l, o.a, o.b, o.opacity);

  if (o instanceof Hcl) {
    if (isNaN(o.h)) return new Lab(o.l, 0, 0, o.opacity);
    var h = o.h * _math.deg2rad;
    return new Lab(o.l, Math.cos(h) * o.c, Math.sin(h) * o.c, o.opacity);
  }

  if (!(o instanceof _color.Rgb)) o = (0, _color.rgbConvert)(o);
  var r = rgb2lrgb(o.r),
      g = rgb2lrgb(o.g),
      b = rgb2lrgb(o.b),
      y = xyz2lab((0.2225045 * r + 0.7168786 * g + 0.0606169 * b) / Yn),
      x,
      z;
  if (r === g && g === b) x = z = y;else {
    x = xyz2lab((0.4360747 * r + 0.3850649 * g + 0.1430804 * b) / Xn);
    z = xyz2lab((0.0139322 * r + 0.0971045 * g + 0.7141733 * b) / Zn);
  }
  return new Lab(116 * y - 16, 500 * (x - y), 200 * (y - z), o.opacity);
}

function gray(l, opacity) {
  return new Lab(l, 0, 0, opacity == null ? 1 : opacity);
}

function lab(l, a, b, opacity) {
  return arguments.length === 1 ? labConvert(l) : new Lab(l, a, b, opacity == null ? 1 : opacity);
}

function Lab(l, a, b, opacity) {
  this.l = +l;
  this.a = +a;
  this.b = +b;
  this.opacity = +opacity;
}

(0, _define.default)(Lab, lab, (0, _define.extend)(_color.Color, {
  brighter: function (k) {
    return new Lab(this.l + K * (k == null ? 1 : k), this.a, this.b, this.opacity);
  },
  darker: function (k) {
    return new Lab(this.l - K * (k == null ? 1 : k), this.a, this.b, this.opacity);
  },
  rgb: function () {
    var y = (this.l + 16) / 116,
        x = isNaN(this.a) ? y : y + this.a / 500,
        z = isNaN(this.b) ? y : y - this.b / 200;
    x = Xn * lab2xyz(x);
    y = Yn * lab2xyz(y);
    z = Zn * lab2xyz(z);
    return new _color.Rgb(lrgb2rgb(3.1338561 * x - 1.6168667 * y - 0.4906146 * z), lrgb2rgb(-0.9787684 * x + 1.9161415 * y + 0.0334540 * z), lrgb2rgb(0.0719453 * x - 0.2289914 * y + 1.4052427 * z), this.opacity);
  }
}));

function xyz2lab(t) {
  return t > t3 ? Math.pow(t, 1 / 3) : t / t2 + t0;
}

function lab2xyz(t) {
  return t > t1 ? t * t * t : t2 * (t - t0);
}

function lrgb2rgb(x) {
  return 255 * (x <= 0.0031308 ? 12.92 * x : 1.055 * Math.pow(x, 1 / 2.4) - 0.055);
}

function rgb2lrgb(x) {
  return (x /= 255) <= 0.04045 ? x / 12.92 : Math.pow((x + 0.055) / 1.055, 2.4);
}

function hclConvert(o) {
  if (o instanceof Hcl) return new Hcl(o.h, o.c, o.l, o.opacity);
  if (!(o instanceof Lab)) o = labConvert(o);
  if (o.a === 0 && o.b === 0) return new Hcl(NaN, 0, o.l, o.opacity);

  var h = Math.atan2(o.b, o.a) * _math.rad2deg;

  return new Hcl(h < 0 ? h + 360 : h, Math.sqrt(o.a * o.a + o.b * o.b), o.l, o.opacity);
}

function lch(l, c, h, opacity) {
  return arguments.length === 1 ? hclConvert(l) : new Hcl(h, c, l, opacity == null ? 1 : opacity);
}

function hcl(h, c, l, opacity) {
  return arguments.length === 1 ? hclConvert(h) : new Hcl(h, c, l, opacity == null ? 1 : opacity);
}

function Hcl(h, c, l, opacity) {
  this.h = +h;
  this.c = +c;
  this.l = +l;
  this.opacity = +opacity;
}

(0, _define.default)(Hcl, hcl, (0, _define.extend)(_color.Color, {
  brighter: function (k) {
    return new Hcl(this.h, this.c, this.l + K * (k == null ? 1 : k), this.opacity);
  },
  darker: function (k) {
    return new Hcl(this.h, this.c, this.l - K * (k == null ? 1 : k), this.opacity);
  },
  rgb: function () {
    return labConvert(this).rgb();
  }
}));
},{"./define":"CSb3","./color":"UAf0","./math":"8ykI"}],"aDX2":[function(require,module,exports) {

"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = cubehelix;
exports.Cubehelix = Cubehelix;

var _define = _interopRequireWildcard(require("./define"));

var _color = require("./color");

var _math = require("./math");

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

var A = -0.14861,
    B = +1.78277,
    C = -0.29227,
    D = -0.90649,
    E = +1.97294,
    ED = E * D,
    EB = E * B,
    BC_DA = B * C - D * A;

function cubehelixConvert(o) {
  if (o instanceof Cubehelix) return new Cubehelix(o.h, o.s, o.l, o.opacity);
  if (!(o instanceof _color.Rgb)) o = (0, _color.rgbConvert)(o);
  var r = o.r / 255,
      g = o.g / 255,
      b = o.b / 255,
      l = (BC_DA * b + ED * r - EB * g) / (BC_DA + ED - EB),
      bl = b - l,
      k = (E * (g - l) - C * bl) / D,
      s = Math.sqrt(k * k + bl * bl) / (E * l * (1 - l)),
      // NaN if l=0 or l=1
  h = s ? Math.atan2(k, bl) * _math.rad2deg - 120 : NaN;
  return new Cubehelix(h < 0 ? h + 360 : h, s, l, o.opacity);
}

function cubehelix(h, s, l, opacity) {
  return arguments.length === 1 ? cubehelixConvert(h) : new Cubehelix(h, s, l, opacity == null ? 1 : opacity);
}

function Cubehelix(h, s, l, opacity) {
  this.h = +h;
  this.s = +s;
  this.l = +l;
  this.opacity = +opacity;
}

(0, _define.default)(Cubehelix, cubehelix, (0, _define.extend)(_color.Color, {
  brighter: function (k) {
    k = k == null ? _color.brighter : Math.pow(_color.brighter, k);
    return new Cubehelix(this.h, this.s, this.l * k, this.opacity);
  },
  darker: function (k) {
    k = k == null ? _color.darker : Math.pow(_color.darker, k);
    return new Cubehelix(this.h, this.s, this.l * k, this.opacity);
  },
  rgb: function () {
    var h = isNaN(this.h) ? 0 : (this.h + 120) * _math.deg2rad,
        l = +this.l,
        a = isNaN(this.s) ? 0 : this.s * l * (1 - l),
        cosh = Math.cos(h),
        sinh = Math.sin(h);
    return new _color.Rgb(255 * (l + a * (A * cosh + B * sinh)), 255 * (l + a * (C * cosh + D * sinh)), 255 * (l + a * (E * cosh)), this.opacity);
  }
}));
},{"./define":"CSb3","./color":"UAf0","./math":"8ykI"}],"4TJ2":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "color", {
  enumerable: true,
  get: function () {
    return _color.default;
  }
});
Object.defineProperty(exports, "rgb", {
  enumerable: true,
  get: function () {
    return _color.rgb;
  }
});
Object.defineProperty(exports, "hsl", {
  enumerable: true,
  get: function () {
    return _color.hsl;
  }
});
Object.defineProperty(exports, "lab", {
  enumerable: true,
  get: function () {
    return _lab.default;
  }
});
Object.defineProperty(exports, "hcl", {
  enumerable: true,
  get: function () {
    return _lab.hcl;
  }
});
Object.defineProperty(exports, "lch", {
  enumerable: true,
  get: function () {
    return _lab.lch;
  }
});
Object.defineProperty(exports, "gray", {
  enumerable: true,
  get: function () {
    return _lab.gray;
  }
});
Object.defineProperty(exports, "cubehelix", {
  enumerable: true,
  get: function () {
    return _cubehelix.default;
  }
});

var _color = _interopRequireWildcard(require("./color"));

var _lab = _interopRequireWildcard(require("./lab"));

var _cubehelix = _interopRequireDefault(require("./cubehelix"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }
},{"./color":"UAf0","./lab":"n21X","./cubehelix":"aDX2"}],"mIuw":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.basis = basis;
exports.default = _default;

function basis(t1, v0, v1, v2, v3) {
  var t2 = t1 * t1,
      t3 = t2 * t1;
  return ((1 - 3 * t1 + 3 * t2 - t3) * v0 + (4 - 6 * t2 + 3 * t3) * v1 + (1 + 3 * t1 + 3 * t2 - 3 * t3) * v2 + t3 * v3) / 6;
}

function _default(values) {
  var n = values.length - 1;
  return function (t) {
    var i = t <= 0 ? t = 0 : t >= 1 ? (t = 1, n - 1) : Math.floor(t * n),
        v1 = values[i],
        v2 = values[i + 1],
        v0 = i > 0 ? values[i - 1] : 2 * v1 - v2,
        v3 = i < n - 1 ? values[i + 2] : 2 * v2 - v1;
    return basis((t - i / n) * n, v0, v1, v2, v3);
  };
}
},{}],"t9MF":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _basis = require("./basis");

function _default(values) {
  var n = values.length;
  return function (t) {
    var i = Math.floor(((t %= 1) < 0 ? ++t : t) * n),
        v0 = values[(i + n - 1) % n],
        v1 = values[i % n],
        v2 = values[(i + 1) % n],
        v3 = values[(i + 2) % n];
    return (0, _basis.basis)((t - i / n) * n, v0, v1, v2, v3);
  };
}
},{"./basis":"mIuw"}],"OW+9":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.hue = hue;
exports.gamma = gamma;
exports.default = nogamma;

var _constant = _interopRequireDefault(require("./constant"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function linear(a, d) {
  return function (t) {
    return a + t * d;
  };
}

function exponential(a, b, y) {
  return a = Math.pow(a, y), b = Math.pow(b, y) - a, y = 1 / y, function (t) {
    return Math.pow(a + t * b, y);
  };
}

function hue(a, b) {
  var d = b - a;
  return d ? linear(a, d > 180 || d < -180 ? d - 360 * Math.round(d / 360) : d) : (0, _constant.default)(isNaN(a) ? b : a);
}

function gamma(y) {
  return (y = +y) === 1 ? nogamma : function (a, b) {
    return b - a ? exponential(a, b, y) : (0, _constant.default)(isNaN(a) ? b : a);
  };
}

function nogamma(a, b) {
  var d = b - a;
  return d ? linear(a, d) : (0, _constant.default)(isNaN(a) ? b : a);
}
},{"./constant":"5O/Y"}],"hw5o":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.rgbBasisClosed = exports.rgbBasis = exports.default = void 0;

var _d3Color = require("d3-color");

var _basis = _interopRequireDefault(require("./basis"));

var _basisClosed = _interopRequireDefault(require("./basisClosed"));

var _color = _interopRequireWildcard(require("./color"));

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _default = function rgbGamma(y) {
  var color = (0, _color.gamma)(y);

  function rgb(start, end) {
    var r = color((start = (0, _d3Color.rgb)(start)).r, (end = (0, _d3Color.rgb)(end)).r),
        g = color(start.g, end.g),
        b = color(start.b, end.b),
        opacity = (0, _color.default)(start.opacity, end.opacity);
    return function (t) {
      start.r = r(t);
      start.g = g(t);
      start.b = b(t);
      start.opacity = opacity(t);
      return start + "";
    };
  }

  rgb.gamma = rgbGamma;
  return rgb;
}(1);

exports.default = _default;

function rgbSpline(spline) {
  return function (colors) {
    var n = colors.length,
        r = new Array(n),
        g = new Array(n),
        b = new Array(n),
        i,
        color;

    for (i = 0; i < n; ++i) {
      color = (0, _d3Color.rgb)(colors[i]);
      r[i] = color.r || 0;
      g[i] = color.g || 0;
      b[i] = color.b || 0;
    }

    r = spline(r);
    g = spline(g);
    b = spline(b);
    color.opacity = 1;
    return function (t) {
      color.r = r(t);
      color.g = g(t);
      color.b = b(t);
      return color + "";
    };
  };
}

var rgbBasis = rgbSpline(_basis.default);
exports.rgbBasis = rgbBasis;
var rgbBasisClosed = rgbSpline(_basisClosed.default);
exports.rgbBasisClosed = rgbBasisClosed;
},{"d3-color":"4TJ2","./basis":"mIuw","./basisClosed":"t9MF","./color":"OW+9"}],"j6Kl":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _value = _interopRequireDefault(require("./value"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(a, b) {
  var nb = b ? b.length : 0,
      na = a ? Math.min(nb, a.length) : 0,
      x = new Array(na),
      c = new Array(nb),
      i;

  for (i = 0; i < na; ++i) x[i] = (0, _value.default)(a[i], b[i]);

  for (; i < nb; ++i) c[i] = b[i];

  return function (t) {
    for (i = 0; i < na; ++i) c[i] = x[i](t);

    return c;
  };
}
},{"./value":"5ONG"}],"npIv":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(a, b) {
  var d = new Date();
  return a = +a, b -= a, function (t) {
    return d.setTime(a + b * t), d;
  };
}
},{}],"eUtU":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(a, b) {
  return a = +a, b -= a, function (t) {
    return a + b * t;
  };
}
},{}],"9Ci2":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _value = _interopRequireDefault(require("./value"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(a, b) {
  var i = {},
      c = {},
      k;
  if (a === null || typeof a !== "object") a = {};
  if (b === null || typeof b !== "object") b = {};

  for (k in b) {
    if (k in a) {
      i[k] = (0, _value.default)(a[k], b[k]);
    } else {
      c[k] = b[k];
    }
  }

  return function (t) {
    for (k in i) c[k] = i[k](t);

    return c;
  };
}
},{"./value":"5ONG"}],"WNxQ":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _number = _interopRequireDefault(require("./number"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var reA = /[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g,
    reB = new RegExp(reA.source, "g");

function zero(b) {
  return function () {
    return b;
  };
}

function one(b) {
  return function (t) {
    return b(t) + "";
  };
}

function _default(a, b) {
  var bi = reA.lastIndex = reB.lastIndex = 0,
      // scan index for next number in b
  am,
      // current match in a
  bm,
      // current match in b
  bs,
      // string preceding current number in b, if any
  i = -1,
      // index in s
  s = [],
      // string constants and placeholders
  q = []; // number interpolators
  // Coerce inputs to strings.

  a = a + "", b = b + ""; // Interpolate pairs of numbers in a & b.

  while ((am = reA.exec(a)) && (bm = reB.exec(b))) {
    if ((bs = bm.index) > bi) {
      // a string precedes the next number in b
      bs = b.slice(bi, bs);
      if (s[i]) s[i] += bs; // coalesce with previous string
      else s[++i] = bs;
    }

    if ((am = am[0]) === (bm = bm[0])) {
      // numbers in a & b match
      if (s[i]) s[i] += bm; // coalesce with previous string
      else s[++i] = bm;
    } else {
      // interpolate non-matching numbers
      s[++i] = null;
      q.push({
        i: i,
        x: (0, _number.default)(am, bm)
      });
    }

    bi = reB.lastIndex;
  } // Add remains of b.


  if (bi < b.length) {
    bs = b.slice(bi);
    if (s[i]) s[i] += bs; // coalesce with previous string
    else s[++i] = bs;
  } // Special optimization for only a single match.
  // Otherwise, interpolate each of the numbers and rejoin the string.


  return s.length < 2 ? q[0] ? one(q[0].x) : zero(b) : (b = q.length, function (t) {
    for (var i = 0, o; i < b; ++i) s[(o = q[i]).i] = o.x(t);

    return s.join("");
  });
}
},{"./number":"eUtU"}],"5ONG":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _d3Color = require("d3-color");

var _rgb = _interopRequireDefault(require("./rgb"));

var _array = _interopRequireDefault(require("./array"));

var _date = _interopRequireDefault(require("./date"));

var _number = _interopRequireDefault(require("./number"));

var _object = _interopRequireDefault(require("./object"));

var _string = _interopRequireDefault(require("./string"));

var _constant = _interopRequireDefault(require("./constant"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(a, b) {
  var t = typeof b,
      c;
  return b == null || t === "boolean" ? (0, _constant.default)(b) : (t === "number" ? _number.default : t === "string" ? (c = (0, _d3Color.color)(b)) ? (b = c, _rgb.default) : _string.default : b instanceof _d3Color.color ? _rgb.default : b instanceof Date ? _date.default : Array.isArray(b) ? _array.default : typeof b.valueOf !== "function" && typeof b.toString !== "function" || isNaN(b) ? _object.default : _number.default)(a, b);
}
},{"d3-color":"4TJ2","./rgb":"hw5o","./array":"j6Kl","./date":"npIv","./number":"eUtU","./object":"9Ci2","./string":"WNxQ","./constant":"5O/Y"}],"9iFP":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(range) {
  var n = range.length;
  return function (t) {
    return range[Math.max(0, Math.min(n - 1, Math.floor(t * n)))];
  };
}
},{}],"/lYd":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _color = require("./color");

function _default(a, b) {
  var i = (0, _color.hue)(+a, +b);
  return function (t) {
    var x = i(t);
    return x - 360 * Math.floor(x / 360);
  };
}
},{"./color":"OW+9"}],"8Ehv":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(a, b) {
  return a = +a, b -= a, function (t) {
    return Math.round(a + b * t);
  };
}
},{}],"sFbg":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;
exports.identity = void 0;
var degrees = 180 / Math.PI;
var identity = {
  translateX: 0,
  translateY: 0,
  rotate: 0,
  skewX: 0,
  scaleX: 1,
  scaleY: 1
};
exports.identity = identity;

function _default(a, b, c, d, e, f) {
  var scaleX, scaleY, skewX;
  if (scaleX = Math.sqrt(a * a + b * b)) a /= scaleX, b /= scaleX;
  if (skewX = a * c + b * d) c -= a * skewX, d -= b * skewX;
  if (scaleY = Math.sqrt(c * c + d * d)) c /= scaleY, d /= scaleY, skewX /= scaleY;
  if (a * d < b * c) a = -a, b = -b, skewX = -skewX, scaleX = -scaleX;
  return {
    translateX: e,
    translateY: f,
    rotate: Math.atan2(b, a) * degrees,
    skewX: Math.atan(skewX) * degrees,
    scaleX: scaleX,
    scaleY: scaleY
  };
}
},{}],"igaz":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.parseCss = parseCss;
exports.parseSvg = parseSvg;

var _decompose = _interopRequireWildcard(require("./decompose"));

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

var cssNode, cssRoot, cssView, svgNode;

function parseCss(value) {
  if (value === "none") return _decompose.identity;
  if (!cssNode) cssNode = document.createElement("DIV"), cssRoot = document.documentElement, cssView = document.defaultView;
  cssNode.style.transform = value;
  value = cssView.getComputedStyle(cssRoot.appendChild(cssNode), null).getPropertyValue("transform");
  cssRoot.removeChild(cssNode);
  value = value.slice(7, -1).split(",");
  return (0, _decompose.default)(+value[0], +value[1], +value[2], +value[3], +value[4], +value[5]);
}

function parseSvg(value) {
  if (value == null) return _decompose.identity;
  if (!svgNode) svgNode = document.createElementNS("http://www.w3.org/2000/svg", "g");
  svgNode.setAttribute("transform", value);
  if (!(value = svgNode.transform.baseVal.consolidate())) return _decompose.identity;
  value = value.matrix;
  return (0, _decompose.default)(value.a, value.b, value.c, value.d, value.e, value.f);
}
},{"./decompose":"sFbg"}],"/tUK":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.interpolateTransformSvg = exports.interpolateTransformCss = void 0;

var _number = _interopRequireDefault(require("../number"));

var _parse = require("./parse");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function interpolateTransform(parse, pxComma, pxParen, degParen) {
  function pop(s) {
    return s.length ? s.pop() + " " : "";
  }

  function translate(xa, ya, xb, yb, s, q) {
    if (xa !== xb || ya !== yb) {
      var i = s.push("translate(", null, pxComma, null, pxParen);
      q.push({
        i: i - 4,
        x: (0, _number.default)(xa, xb)
      }, {
        i: i - 2,
        x: (0, _number.default)(ya, yb)
      });
    } else if (xb || yb) {
      s.push("translate(" + xb + pxComma + yb + pxParen);
    }
  }

  function rotate(a, b, s, q) {
    if (a !== b) {
      if (a - b > 180) b += 360;else if (b - a > 180) a += 360; // shortest path

      q.push({
        i: s.push(pop(s) + "rotate(", null, degParen) - 2,
        x: (0, _number.default)(a, b)
      });
    } else if (b) {
      s.push(pop(s) + "rotate(" + b + degParen);
    }
  }

  function skewX(a, b, s, q) {
    if (a !== b) {
      q.push({
        i: s.push(pop(s) + "skewX(", null, degParen) - 2,
        x: (0, _number.default)(a, b)
      });
    } else if (b) {
      s.push(pop(s) + "skewX(" + b + degParen);
    }
  }

  function scale(xa, ya, xb, yb, s, q) {
    if (xa !== xb || ya !== yb) {
      var i = s.push(pop(s) + "scale(", null, ",", null, ")");
      q.push({
        i: i - 4,
        x: (0, _number.default)(xa, xb)
      }, {
        i: i - 2,
        x: (0, _number.default)(ya, yb)
      });
    } else if (xb !== 1 || yb !== 1) {
      s.push(pop(s) + "scale(" + xb + "," + yb + ")");
    }
  }

  return function (a, b) {
    var s = [],
        // string constants and placeholders
    q = []; // number interpolators

    a = parse(a), b = parse(b);
    translate(a.translateX, a.translateY, b.translateX, b.translateY, s, q);
    rotate(a.rotate, b.rotate, s, q);
    skewX(a.skewX, b.skewX, s, q);
    scale(a.scaleX, a.scaleY, b.scaleX, b.scaleY, s, q);
    a = b = null; // gc

    return function (t) {
      var i = -1,
          n = q.length,
          o;

      while (++i < n) s[(o = q[i]).i] = o.x(t);

      return s.join("");
    };
  };
}

var interpolateTransformCss = interpolateTransform(_parse.parseCss, "px, ", "px)", "deg)");
exports.interpolateTransformCss = interpolateTransformCss;
var interpolateTransformSvg = interpolateTransform(_parse.parseSvg, ", ", ")", ")");
exports.interpolateTransformSvg = interpolateTransformSvg;
},{"../number":"eUtU","./parse":"igaz"}],"MbcF":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;
var rho = Math.SQRT2,
    rho2 = 2,
    rho4 = 4,
    epsilon2 = 1e-12;

function cosh(x) {
  return ((x = Math.exp(x)) + 1 / x) / 2;
}

function sinh(x) {
  return ((x = Math.exp(x)) - 1 / x) / 2;
}

function tanh(x) {
  return ((x = Math.exp(2 * x)) - 1) / (x + 1);
} // p0 = [ux0, uy0, w0]
// p1 = [ux1, uy1, w1]


function _default(p0, p1) {
  var ux0 = p0[0],
      uy0 = p0[1],
      w0 = p0[2],
      ux1 = p1[0],
      uy1 = p1[1],
      w1 = p1[2],
      dx = ux1 - ux0,
      dy = uy1 - uy0,
      d2 = dx * dx + dy * dy,
      i,
      S; // Special case for u0 ≅ u1.

  if (d2 < epsilon2) {
    S = Math.log(w1 / w0) / rho;

    i = function (t) {
      return [ux0 + t * dx, uy0 + t * dy, w0 * Math.exp(rho * t * S)];
    };
  } // General case.
  else {
      var d1 = Math.sqrt(d2),
          b0 = (w1 * w1 - w0 * w0 + rho4 * d2) / (2 * w0 * rho2 * d1),
          b1 = (w1 * w1 - w0 * w0 - rho4 * d2) / (2 * w1 * rho2 * d1),
          r0 = Math.log(Math.sqrt(b0 * b0 + 1) - b0),
          r1 = Math.log(Math.sqrt(b1 * b1 + 1) - b1);
      S = (r1 - r0) / rho;

      i = function (t) {
        var s = t * S,
            coshr0 = cosh(r0),
            u = w0 / (rho2 * d1) * (coshr0 * tanh(rho * s + r0) - sinh(r0));
        return [ux0 + u * dx, uy0 + u * dy, w0 * coshr0 / cosh(rho * s + r0)];
      };
    }

  i.duration = S * 1000;
  return i;
}
},{}],"BrWg":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.hslLong = exports.default = void 0;

var _d3Color = require("d3-color");

var _color = _interopRequireWildcard(require("./color"));

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function hsl(hue) {
  return function (start, end) {
    var h = hue((start = (0, _d3Color.hsl)(start)).h, (end = (0, _d3Color.hsl)(end)).h),
        s = (0, _color.default)(start.s, end.s),
        l = (0, _color.default)(start.l, end.l),
        opacity = (0, _color.default)(start.opacity, end.opacity);
    return function (t) {
      start.h = h(t);
      start.s = s(t);
      start.l = l(t);
      start.opacity = opacity(t);
      return start + "";
    };
  };
}

var _default = hsl(_color.hue);

exports.default = _default;
var hslLong = hsl(_color.default);
exports.hslLong = hslLong;
},{"d3-color":"4TJ2","./color":"OW+9"}],"5HCN":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = lab;

var _d3Color = require("d3-color");

var _color = _interopRequireDefault(require("./color"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function lab(start, end) {
  var l = (0, _color.default)((start = (0, _d3Color.lab)(start)).l, (end = (0, _d3Color.lab)(end)).l),
      a = (0, _color.default)(start.a, end.a),
      b = (0, _color.default)(start.b, end.b),
      opacity = (0, _color.default)(start.opacity, end.opacity);
  return function (t) {
    start.l = l(t);
    start.a = a(t);
    start.b = b(t);
    start.opacity = opacity(t);
    return start + "";
  };
}
},{"d3-color":"4TJ2","./color":"OW+9"}],"9VIl":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.hclLong = exports.default = void 0;

var _d3Color = require("d3-color");

var _color = _interopRequireWildcard(require("./color"));

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function hcl(hue) {
  return function (start, end) {
    var h = hue((start = (0, _d3Color.hcl)(start)).h, (end = (0, _d3Color.hcl)(end)).h),
        c = (0, _color.default)(start.c, end.c),
        l = (0, _color.default)(start.l, end.l),
        opacity = (0, _color.default)(start.opacity, end.opacity);
    return function (t) {
      start.h = h(t);
      start.c = c(t);
      start.l = l(t);
      start.opacity = opacity(t);
      return start + "";
    };
  };
}

var _default = hcl(_color.hue);

exports.default = _default;
var hclLong = hcl(_color.default);
exports.hclLong = hclLong;
},{"d3-color":"4TJ2","./color":"OW+9"}],"NOHm":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.cubehelixLong = exports.default = void 0;

var _d3Color = require("d3-color");

var _color = _interopRequireWildcard(require("./color"));

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function cubehelix(hue) {
  return function cubehelixGamma(y) {
    y = +y;

    function cubehelix(start, end) {
      var h = hue((start = (0, _d3Color.cubehelix)(start)).h, (end = (0, _d3Color.cubehelix)(end)).h),
          s = (0, _color.default)(start.s, end.s),
          l = (0, _color.default)(start.l, end.l),
          opacity = (0, _color.default)(start.opacity, end.opacity);
      return function (t) {
        start.h = h(t);
        start.s = s(t);
        start.l = l(Math.pow(t, y));
        start.opacity = opacity(t);
        return start + "";
      };
    }

    cubehelix.gamma = cubehelixGamma;
    return cubehelix;
  }(1);
}

var _default = cubehelix(_color.hue);

exports.default = _default;
var cubehelixLong = cubehelix(_color.default);
exports.cubehelixLong = cubehelixLong;
},{"d3-color":"4TJ2","./color":"OW+9"}],"nlPb":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = piecewise;

function piecewise(interpolate, values) {
  var i = 0,
      n = values.length - 1,
      v = values[0],
      I = new Array(n < 0 ? 0 : n);

  while (i < n) I[i] = interpolate(v, v = values[++i]);

  return function (t) {
    var i = Math.max(0, Math.min(n - 1, Math.floor(t *= n)));
    return I[i](t - i);
  };
}
},{}],"g3ua":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(interpolator, n) {
  var samples = new Array(n);

  for (var i = 0; i < n; ++i) samples[i] = interpolator(i / (n - 1));

  return samples;
}
},{}],"mkGF":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "interpolate", {
  enumerable: true,
  get: function () {
    return _value.default;
  }
});
Object.defineProperty(exports, "interpolateArray", {
  enumerable: true,
  get: function () {
    return _array.default;
  }
});
Object.defineProperty(exports, "interpolateBasis", {
  enumerable: true,
  get: function () {
    return _basis.default;
  }
});
Object.defineProperty(exports, "interpolateBasisClosed", {
  enumerable: true,
  get: function () {
    return _basisClosed.default;
  }
});
Object.defineProperty(exports, "interpolateDate", {
  enumerable: true,
  get: function () {
    return _date.default;
  }
});
Object.defineProperty(exports, "interpolateDiscrete", {
  enumerable: true,
  get: function () {
    return _discrete.default;
  }
});
Object.defineProperty(exports, "interpolateHue", {
  enumerable: true,
  get: function () {
    return _hue.default;
  }
});
Object.defineProperty(exports, "interpolateNumber", {
  enumerable: true,
  get: function () {
    return _number.default;
  }
});
Object.defineProperty(exports, "interpolateObject", {
  enumerable: true,
  get: function () {
    return _object.default;
  }
});
Object.defineProperty(exports, "interpolateRound", {
  enumerable: true,
  get: function () {
    return _round.default;
  }
});
Object.defineProperty(exports, "interpolateString", {
  enumerable: true,
  get: function () {
    return _string.default;
  }
});
Object.defineProperty(exports, "interpolateTransformCss", {
  enumerable: true,
  get: function () {
    return _index.interpolateTransformCss;
  }
});
Object.defineProperty(exports, "interpolateTransformSvg", {
  enumerable: true,
  get: function () {
    return _index.interpolateTransformSvg;
  }
});
Object.defineProperty(exports, "interpolateZoom", {
  enumerable: true,
  get: function () {
    return _zoom.default;
  }
});
Object.defineProperty(exports, "interpolateRgb", {
  enumerable: true,
  get: function () {
    return _rgb.default;
  }
});
Object.defineProperty(exports, "interpolateRgbBasis", {
  enumerable: true,
  get: function () {
    return _rgb.rgbBasis;
  }
});
Object.defineProperty(exports, "interpolateRgbBasisClosed", {
  enumerable: true,
  get: function () {
    return _rgb.rgbBasisClosed;
  }
});
Object.defineProperty(exports, "interpolateHsl", {
  enumerable: true,
  get: function () {
    return _hsl.default;
  }
});
Object.defineProperty(exports, "interpolateHslLong", {
  enumerable: true,
  get: function () {
    return _hsl.hslLong;
  }
});
Object.defineProperty(exports, "interpolateLab", {
  enumerable: true,
  get: function () {
    return _lab.default;
  }
});
Object.defineProperty(exports, "interpolateHcl", {
  enumerable: true,
  get: function () {
    return _hcl.default;
  }
});
Object.defineProperty(exports, "interpolateHclLong", {
  enumerable: true,
  get: function () {
    return _hcl.hclLong;
  }
});
Object.defineProperty(exports, "interpolateCubehelix", {
  enumerable: true,
  get: function () {
    return _cubehelix.default;
  }
});
Object.defineProperty(exports, "interpolateCubehelixLong", {
  enumerable: true,
  get: function () {
    return _cubehelix.cubehelixLong;
  }
});
Object.defineProperty(exports, "piecewise", {
  enumerable: true,
  get: function () {
    return _piecewise.default;
  }
});
Object.defineProperty(exports, "quantize", {
  enumerable: true,
  get: function () {
    return _quantize.default;
  }
});

var _value = _interopRequireDefault(require("./value"));

var _array = _interopRequireDefault(require("./array"));

var _basis = _interopRequireDefault(require("./basis"));

var _basisClosed = _interopRequireDefault(require("./basisClosed"));

var _date = _interopRequireDefault(require("./date"));

var _discrete = _interopRequireDefault(require("./discrete"));

var _hue = _interopRequireDefault(require("./hue"));

var _number = _interopRequireDefault(require("./number"));

var _object = _interopRequireDefault(require("./object"));

var _round = _interopRequireDefault(require("./round"));

var _string = _interopRequireDefault(require("./string"));

var _index = require("./transform/index");

var _zoom = _interopRequireDefault(require("./zoom"));

var _rgb = _interopRequireWildcard(require("./rgb"));

var _hsl = _interopRequireWildcard(require("./hsl"));

var _lab = _interopRequireDefault(require("./lab"));

var _hcl = _interopRequireWildcard(require("./hcl"));

var _cubehelix = _interopRequireWildcard(require("./cubehelix"));

var _piecewise = _interopRequireDefault(require("./piecewise"));

var _quantize = _interopRequireDefault(require("./quantize"));

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
},{"./value":"5ONG","./array":"j6Kl","./basis":"mIuw","./basisClosed":"t9MF","./date":"npIv","./discrete":"9iFP","./hue":"/lYd","./number":"eUtU","./object":"9Ci2","./round":"8Ehv","./string":"WNxQ","./transform/index":"/tUK","./zoom":"MbcF","./rgb":"hw5o","./hsl":"BrWg","./lab":"5HCN","./hcl":"9VIl","./cubehelix":"NOHm","./piecewise":"nlPb","./quantize":"g3ua"}],"9v2Y":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.now = now;
exports.Timer = Timer;
exports.timer = timer;
exports.timerFlush = timerFlush;
var frame = 0,
    // is an animation frame pending?
timeout = 0,
    // is a timeout pending?
interval = 0,
    // are any timers active?
pokeDelay = 1000,
    // how frequently we check for clock skew
taskHead,
    taskTail,
    clockLast = 0,
    clockNow = 0,
    clockSkew = 0,
    clock = typeof performance === "object" && performance.now ? performance : Date,
    setFrame = typeof window === "object" && window.requestAnimationFrame ? window.requestAnimationFrame.bind(window) : function (f) {
  setTimeout(f, 17);
};

function now() {
  return clockNow || (setFrame(clearNow), clockNow = clock.now() + clockSkew);
}

function clearNow() {
  clockNow = 0;
}

function Timer() {
  this._call = this._time = this._next = null;
}

Timer.prototype = timer.prototype = {
  constructor: Timer,
  restart: function (callback, delay, time) {
    if (typeof callback !== "function") throw new TypeError("callback is not a function");
    time = (time == null ? now() : +time) + (delay == null ? 0 : +delay);

    if (!this._next && taskTail !== this) {
      if (taskTail) taskTail._next = this;else taskHead = this;
      taskTail = this;
    }

    this._call = callback;
    this._time = time;
    sleep();
  },
  stop: function () {
    if (this._call) {
      this._call = null;
      this._time = Infinity;
      sleep();
    }
  }
};

function timer(callback, delay, time) {
  var t = new Timer();
  t.restart(callback, delay, time);
  return t;
}

function timerFlush() {
  now(); // Get the current time, if not already set.

  ++frame; // Pretend we’ve set an alarm, if we haven’t already.

  var t = taskHead,
      e;

  while (t) {
    if ((e = clockNow - t._time) >= 0) t._call.call(null, e);
    t = t._next;
  }

  --frame;
}

function wake() {
  clockNow = (clockLast = clock.now()) + clockSkew;
  frame = timeout = 0;

  try {
    timerFlush();
  } finally {
    frame = 0;
    nap();
    clockNow = 0;
  }
}

function poke() {
  var now = clock.now(),
      delay = now - clockLast;
  if (delay > pokeDelay) clockSkew -= delay, clockLast = now;
}

function nap() {
  var t0,
      t1 = taskHead,
      t2,
      time = Infinity;

  while (t1) {
    if (t1._call) {
      if (time > t1._time) time = t1._time;
      t0 = t1, t1 = t1._next;
    } else {
      t2 = t1._next, t1._next = null;
      t1 = t0 ? t0._next = t2 : taskHead = t2;
    }
  }

  taskTail = t0;
  sleep(time);
}

function sleep(time) {
  if (frame) return; // Soonest alarm already set, or will be.

  if (timeout) timeout = clearTimeout(timeout);
  var delay = time - clockNow; // Strictly less than if we recomputed clockNow.

  if (delay > 24) {
    if (time < Infinity) timeout = setTimeout(wake, time - clock.now() - clockSkew);
    if (interval) interval = clearInterval(interval);
  } else {
    if (!interval) clockLast = clock.now(), interval = setInterval(poke, pokeDelay);
    frame = 1, setFrame(wake);
  }
}
},{}],"iEU7":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _timer = require("./timer");

function _default(callback, delay, time) {
  var t = new _timer.Timer();
  delay = delay == null ? 0 : +delay;
  t.restart(function (elapsed) {
    t.stop();
    callback(elapsed + delay);
  }, delay, time);
  return t;
}
},{"./timer":"9v2Y"}],"B8zX":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _timer = require("./timer");

function _default(callback, delay, time) {
  var t = new _timer.Timer(),
      total = delay;
  if (delay == null) return t.restart(callback, delay, time), t;
  delay = +delay, time = time == null ? (0, _timer.now)() : +time;
  t.restart(function tick(elapsed) {
    elapsed += total;
    t.restart(tick, total += delay, time);
    callback(elapsed);
  }, delay, time);
  return t;
}
},{"./timer":"9v2Y"}],"CBES":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "now", {
  enumerable: true,
  get: function () {
    return _timer.now;
  }
});
Object.defineProperty(exports, "timer", {
  enumerable: true,
  get: function () {
    return _timer.timer;
  }
});
Object.defineProperty(exports, "timerFlush", {
  enumerable: true,
  get: function () {
    return _timer.timerFlush;
  }
});
Object.defineProperty(exports, "timeout", {
  enumerable: true,
  get: function () {
    return _timeout.default;
  }
});
Object.defineProperty(exports, "interval", {
  enumerable: true,
  get: function () {
    return _interval.default;
  }
});

var _timer = require("./timer");

var _timeout = _interopRequireDefault(require("./timeout"));

var _interval = _interopRequireDefault(require("./interval"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
},{"./timer":"9v2Y","./timeout":"iEU7","./interval":"B8zX"}],"GDz/":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;
exports.init = init;
exports.set = set;
exports.get = get;
exports.ENDED = exports.ENDING = exports.RUNNING = exports.STARTED = exports.STARTING = exports.SCHEDULED = exports.CREATED = void 0;

var _d3Dispatch = require("d3-dispatch");

var _d3Timer = require("d3-timer");

var emptyOn = (0, _d3Dispatch.dispatch)("start", "end", "interrupt");
var emptyTween = [];
var CREATED = 0;
exports.CREATED = CREATED;
var SCHEDULED = 1;
exports.SCHEDULED = SCHEDULED;
var STARTING = 2;
exports.STARTING = STARTING;
var STARTED = 3;
exports.STARTED = STARTED;
var RUNNING = 4;
exports.RUNNING = RUNNING;
var ENDING = 5;
exports.ENDING = ENDING;
var ENDED = 6;
exports.ENDED = ENDED;

function _default(node, name, id, index, group, timing) {
  var schedules = node.__transition;
  if (!schedules) node.__transition = {};else if (id in schedules) return;
  create(node, id, {
    name: name,
    index: index,
    // For context during callback.
    group: group,
    // For context during callback.
    on: emptyOn,
    tween: emptyTween,
    time: timing.time,
    delay: timing.delay,
    duration: timing.duration,
    ease: timing.ease,
    timer: null,
    state: CREATED
  });
}

function init(node, id) {
  var schedule = get(node, id);
  if (schedule.state > CREATED) throw new Error("too late; already scheduled");
  return schedule;
}

function set(node, id) {
  var schedule = get(node, id);
  if (schedule.state > STARTING) throw new Error("too late; already started");
  return schedule;
}

function get(node, id) {
  var schedule = node.__transition;
  if (!schedule || !(schedule = schedule[id])) throw new Error("transition not found");
  return schedule;
}

function create(node, id, self) {
  var schedules = node.__transition,
      tween; // Initialize the self timer when the transition is created.
  // Note the actual delay is not known until the first callback!

  schedules[id] = self;
  self.timer = (0, _d3Timer.timer)(schedule, 0, self.time);

  function schedule(elapsed) {
    self.state = SCHEDULED;
    self.timer.restart(start, self.delay, self.time); // If the elapsed delay is less than our first sleep, start immediately.

    if (self.delay <= elapsed) start(elapsed - self.delay);
  }

  function start(elapsed) {
    var i, j, n, o; // If the state is not SCHEDULED, then we previously errored on start.

    if (self.state !== SCHEDULED) return stop();

    for (i in schedules) {
      o = schedules[i];
      if (o.name !== self.name) continue; // While this element already has a starting transition during this frame,
      // defer starting an interrupting transition until that transition has a
      // chance to tick (and possibly end); see d3/d3-transition#54!

      if (o.state === STARTED) return (0, _d3Timer.timeout)(start); // Interrupt the active transition, if any.
      // Dispatch the interrupt event.

      if (o.state === RUNNING) {
        o.state = ENDED;
        o.timer.stop();
        o.on.call("interrupt", node, node.__data__, o.index, o.group);
        delete schedules[i];
      } // Cancel any pre-empted transitions. No interrupt event is dispatched
      // because the cancelled transitions never started. Note that this also
      // removes this transition from the pending list!
      else if (+i < id) {
          o.state = ENDED;
          o.timer.stop();
          delete schedules[i];
        }
    } // Defer the first tick to end of the current frame; see d3/d3#1576.
    // Note the transition may be canceled after start and before the first tick!
    // Note this must be scheduled before the start event; see d3/d3-transition#16!
    // Assuming this is successful, subsequent callbacks go straight to tick.


    (0, _d3Timer.timeout)(function () {
      if (self.state === STARTED) {
        self.state = RUNNING;
        self.timer.restart(tick, self.delay, self.time);
        tick(elapsed);
      }
    }); // Dispatch the start event.
    // Note this must be done before the tween are initialized.

    self.state = STARTING;
    self.on.call("start", node, node.__data__, self.index, self.group);
    if (self.state !== STARTING) return; // interrupted

    self.state = STARTED; // Initialize the tween, deleting null tween.

    tween = new Array(n = self.tween.length);

    for (i = 0, j = -1; i < n; ++i) {
      if (o = self.tween[i].value.call(node, node.__data__, self.index, self.group)) {
        tween[++j] = o;
      }
    }

    tween.length = j + 1;
  }

  function tick(elapsed) {
    var t = elapsed < self.duration ? self.ease.call(null, elapsed / self.duration) : (self.timer.restart(stop), self.state = ENDING, 1),
        i = -1,
        n = tween.length;

    while (++i < n) {
      tween[i].call(null, t);
    } // Dispatch the end event.


    if (self.state === ENDING) {
      self.on.call("end", node, node.__data__, self.index, self.group);
      stop();
    }
  }

  function stop() {
    self.state = ENDED;
    self.timer.stop();
    delete schedules[id];

    for (var i in schedules) return; // eslint-disable-line no-unused-vars


    delete node.__transition;
  }
}
},{"d3-dispatch":"UU/c","d3-timer":"CBES"}],"+xAn":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _schedule = require("./transition/schedule");

function _default(node, name) {
  var schedules = node.__transition,
      schedule,
      active,
      empty = true,
      i;
  if (!schedules) return;
  name = name == null ? null : name + "";

  for (i in schedules) {
    if ((schedule = schedules[i]).name !== name) {
      empty = false;
      continue;
    }

    active = schedule.state > _schedule.STARTING && schedule.state < _schedule.ENDING;
    schedule.state = _schedule.ENDED;
    schedule.timer.stop();
    if (active) schedule.on.call("interrupt", node, node.__data__, schedule.index, schedule.group);
    delete schedules[i];
  }

  if (empty) delete node.__transition;
}
},{"./transition/schedule":"GDz/"}],"JwzZ":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _interrupt = _interopRequireDefault(require("../interrupt"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(name) {
  return this.each(function () {
    (0, _interrupt.default)(this, name);
  });
}
},{"../interrupt":"+xAn"}],"CgJV":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;
exports.tweenValue = tweenValue;

var _schedule = require("./schedule");

function tweenRemove(id, name) {
  var tween0, tween1;
  return function () {
    var schedule = (0, _schedule.set)(this, id),
        tween = schedule.tween; // If this node shared tween with the previous node,
    // just assign the updated shared tween and we’re done!
    // Otherwise, copy-on-write.

    if (tween !== tween0) {
      tween1 = tween0 = tween;

      for (var i = 0, n = tween1.length; i < n; ++i) {
        if (tween1[i].name === name) {
          tween1 = tween1.slice();
          tween1.splice(i, 1);
          break;
        }
      }
    }

    schedule.tween = tween1;
  };
}

function tweenFunction(id, name, value) {
  var tween0, tween1;
  if (typeof value !== "function") throw new Error();
  return function () {
    var schedule = (0, _schedule.set)(this, id),
        tween = schedule.tween; // If this node shared tween with the previous node,
    // just assign the updated shared tween and we’re done!
    // Otherwise, copy-on-write.

    if (tween !== tween0) {
      tween1 = (tween0 = tween).slice();

      for (var t = {
        name: name,
        value: value
      }, i = 0, n = tween1.length; i < n; ++i) {
        if (tween1[i].name === name) {
          tween1[i] = t;
          break;
        }
      }

      if (i === n) tween1.push(t);
    }

    schedule.tween = tween1;
  };
}

function _default(name, value) {
  var id = this._id;
  name += "";

  if (arguments.length < 2) {
    var tween = (0, _schedule.get)(this.node(), id).tween;

    for (var i = 0, n = tween.length, t; i < n; ++i) {
      if ((t = tween[i]).name === name) {
        return t.value;
      }
    }

    return null;
  }

  return this.each((value == null ? tweenRemove : tweenFunction)(id, name, value));
}

function tweenValue(transition, name, value) {
  var id = transition._id;
  transition.each(function () {
    var schedule = (0, _schedule.set)(this, id);
    (schedule.value || (schedule.value = {}))[name] = value.apply(this, arguments);
  });
  return function (node) {
    return (0, _schedule.get)(node, id).value[name];
  };
}
},{"./schedule":"GDz/"}],"KSuB":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _d3Color = require("d3-color");

var _d3Interpolate = require("d3-interpolate");

function _default(a, b) {
  var c;
  return (typeof b === "number" ? _d3Interpolate.interpolateNumber : b instanceof _d3Color.color ? _d3Interpolate.interpolateRgb : (c = (0, _d3Color.color)(b)) ? (b = c, _d3Interpolate.interpolateRgb) : _d3Interpolate.interpolateString)(a, b);
}
},{"d3-color":"4TJ2","d3-interpolate":"mkGF"}],"/e4S":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _d3Interpolate = require("d3-interpolate");

var _d3Selection = require("d3-selection");

var _tween = require("./tween");

var _interpolate = _interopRequireDefault(require("./interpolate"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function attrRemove(name) {
  return function () {
    this.removeAttribute(name);
  };
}

function attrRemoveNS(fullname) {
  return function () {
    this.removeAttributeNS(fullname.space, fullname.local);
  };
}

function attrConstant(name, interpolate, value1) {
  var value00, interpolate0;
  return function () {
    var value0 = this.getAttribute(name);
    return value0 === value1 ? null : value0 === value00 ? interpolate0 : interpolate0 = interpolate(value00 = value0, value1);
  };
}

function attrConstantNS(fullname, interpolate, value1) {
  var value00, interpolate0;
  return function () {
    var value0 = this.getAttributeNS(fullname.space, fullname.local);
    return value0 === value1 ? null : value0 === value00 ? interpolate0 : interpolate0 = interpolate(value00 = value0, value1);
  };
}

function attrFunction(name, interpolate, value) {
  var value00, value10, interpolate0;
  return function () {
    var value0,
        value1 = value(this);
    if (value1 == null) return void this.removeAttribute(name);
    value0 = this.getAttribute(name);
    return value0 === value1 ? null : value0 === value00 && value1 === value10 ? interpolate0 : interpolate0 = interpolate(value00 = value0, value10 = value1);
  };
}

function attrFunctionNS(fullname, interpolate, value) {
  var value00, value10, interpolate0;
  return function () {
    var value0,
        value1 = value(this);
    if (value1 == null) return void this.removeAttributeNS(fullname.space, fullname.local);
    value0 = this.getAttributeNS(fullname.space, fullname.local);
    return value0 === value1 ? null : value0 === value00 && value1 === value10 ? interpolate0 : interpolate0 = interpolate(value00 = value0, value10 = value1);
  };
}

function _default(name, value) {
  var fullname = (0, _d3Selection.namespace)(name),
      i = fullname === "transform" ? _d3Interpolate.interpolateTransformSvg : _interpolate.default;
  return this.attrTween(name, typeof value === "function" ? (fullname.local ? attrFunctionNS : attrFunction)(fullname, i, (0, _tween.tweenValue)(this, "attr." + name, value)) : value == null ? (fullname.local ? attrRemoveNS : attrRemove)(fullname) : (fullname.local ? attrConstantNS : attrConstant)(fullname, i, value + ""));
}
},{"d3-interpolate":"mkGF","d3-selection":"lm1C","./tween":"CgJV","./interpolate":"KSuB"}],"L4WC":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _d3Selection = require("d3-selection");

function attrTweenNS(fullname, value) {
  function tween() {
    var node = this,
        i = value.apply(node, arguments);
    return i && function (t) {
      node.setAttributeNS(fullname.space, fullname.local, i(t));
    };
  }

  tween._value = value;
  return tween;
}

function attrTween(name, value) {
  function tween() {
    var node = this,
        i = value.apply(node, arguments);
    return i && function (t) {
      node.setAttribute(name, i(t));
    };
  }

  tween._value = value;
  return tween;
}

function _default(name, value) {
  var key = "attr." + name;
  if (arguments.length < 2) return (key = this.tween(key)) && key._value;
  if (value == null) return this.tween(key, null);
  if (typeof value !== "function") throw new Error();
  var fullname = (0, _d3Selection.namespace)(name);
  return this.tween(key, (fullname.local ? attrTweenNS : attrTween)(fullname, value));
}
},{"d3-selection":"lm1C"}],"1K26":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _schedule = require("./schedule");

function delayFunction(id, value) {
  return function () {
    (0, _schedule.init)(this, id).delay = +value.apply(this, arguments);
  };
}

function delayConstant(id, value) {
  return value = +value, function () {
    (0, _schedule.init)(this, id).delay = value;
  };
}

function _default(value) {
  var id = this._id;
  return arguments.length ? this.each((typeof value === "function" ? delayFunction : delayConstant)(id, value)) : (0, _schedule.get)(this.node(), id).delay;
}
},{"./schedule":"GDz/"}],"ZZtL":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _schedule = require("./schedule");

function durationFunction(id, value) {
  return function () {
    (0, _schedule.set)(this, id).duration = +value.apply(this, arguments);
  };
}

function durationConstant(id, value) {
  return value = +value, function () {
    (0, _schedule.set)(this, id).duration = value;
  };
}

function _default(value) {
  var id = this._id;
  return arguments.length ? this.each((typeof value === "function" ? durationFunction : durationConstant)(id, value)) : (0, _schedule.get)(this.node(), id).duration;
}
},{"./schedule":"GDz/"}],"6pgS":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _schedule = require("./schedule");

function easeConstant(id, value) {
  if (typeof value !== "function") throw new Error();
  return function () {
    (0, _schedule.set)(this, id).ease = value;
  };
}

function _default(value) {
  var id = this._id;
  return arguments.length ? this.each(easeConstant(id, value)) : (0, _schedule.get)(this.node(), id).ease;
}
},{"./schedule":"GDz/"}],"0QDl":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _d3Selection = require("d3-selection");

var _index = require("./index");

function _default(match) {
  if (typeof match !== "function") match = (0, _d3Selection.matcher)(match);

  for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {
    for (var group = groups[j], n = group.length, subgroup = subgroups[j] = [], node, i = 0; i < n; ++i) {
      if ((node = group[i]) && match.call(node, node.__data__, i, group)) {
        subgroup.push(node);
      }
    }
  }

  return new _index.Transition(subgroups, this._parents, this._name, this._id);
}
},{"d3-selection":"lm1C","./index":"J3C7"}],"Z2Q+":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _index = require("./index");

function _default(transition) {
  if (transition._id !== this._id) throw new Error();

  for (var groups0 = this._groups, groups1 = transition._groups, m0 = groups0.length, m1 = groups1.length, m = Math.min(m0, m1), merges = new Array(m0), j = 0; j < m; ++j) {
    for (var group0 = groups0[j], group1 = groups1[j], n = group0.length, merge = merges[j] = new Array(n), node, i = 0; i < n; ++i) {
      if (node = group0[i] || group1[i]) {
        merge[i] = node;
      }
    }
  }

  for (; j < m0; ++j) {
    merges[j] = groups0[j];
  }

  return new _index.Transition(merges, this._parents, this._name, this._id);
}
},{"./index":"J3C7"}],"VZes":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _schedule = require("./schedule");

function start(name) {
  return (name + "").trim().split(/^|\s+/).every(function (t) {
    var i = t.indexOf(".");
    if (i >= 0) t = t.slice(0, i);
    return !t || t === "start";
  });
}

function onFunction(id, name, listener) {
  var on0,
      on1,
      sit = start(name) ? _schedule.init : _schedule.set;
  return function () {
    var schedule = sit(this, id),
        on = schedule.on; // If this node shared a dispatch with the previous node,
    // just assign the updated shared dispatch and we’re done!
    // Otherwise, copy-on-write.

    if (on !== on0) (on1 = (on0 = on).copy()).on(name, listener);
    schedule.on = on1;
  };
}

function _default(name, listener) {
  var id = this._id;
  return arguments.length < 2 ? (0, _schedule.get)(this.node(), id).on.on(name) : this.each(onFunction(id, name, listener));
}
},{"./schedule":"GDz/"}],"FS2t":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function removeFunction(id) {
  return function () {
    var parent = this.parentNode;

    for (var i in this.__transition) if (+i !== id) return;

    if (parent) parent.removeChild(this);
  };
}

function _default() {
  return this.on("end.remove", removeFunction(this._id));
}
},{}],"Xvwr":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _d3Selection = require("d3-selection");

var _index = require("./index");

var _schedule = _interopRequireWildcard(require("./schedule"));

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _default(select) {
  var name = this._name,
      id = this._id;
  if (typeof select !== "function") select = (0, _d3Selection.selector)(select);

  for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {
    for (var group = groups[j], n = group.length, subgroup = subgroups[j] = new Array(n), node, subnode, i = 0; i < n; ++i) {
      if ((node = group[i]) && (subnode = select.call(node, node.__data__, i, group))) {
        if ("__data__" in node) subnode.__data__ = node.__data__;
        subgroup[i] = subnode;
        (0, _schedule.default)(subgroup[i], name, id, i, subgroup, (0, _schedule.get)(node, id));
      }
    }
  }

  return new _index.Transition(subgroups, this._parents, name, id);
}
},{"d3-selection":"lm1C","./index":"J3C7","./schedule":"GDz/"}],"DOdJ":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _d3Selection = require("d3-selection");

var _index = require("./index");

var _schedule = _interopRequireWildcard(require("./schedule"));

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _default(select) {
  var name = this._name,
      id = this._id;
  if (typeof select !== "function") select = (0, _d3Selection.selectorAll)(select);

  for (var groups = this._groups, m = groups.length, subgroups = [], parents = [], j = 0; j < m; ++j) {
    for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {
      if (node = group[i]) {
        for (var children = select.call(node, node.__data__, i, group), child, inherit = (0, _schedule.get)(node, id), k = 0, l = children.length; k < l; ++k) {
          if (child = children[k]) {
            (0, _schedule.default)(child, name, id, k, children, inherit);
          }
        }

        subgroups.push(children);
        parents.push(node);
      }
    }
  }

  return new _index.Transition(subgroups, parents, name, id);
}
},{"d3-selection":"lm1C","./index":"J3C7","./schedule":"GDz/"}],"bQR7":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _d3Selection = require("d3-selection");

var Selection = _d3Selection.selection.prototype.constructor;

function _default() {
  return new Selection(this._groups, this._parents);
}
},{"d3-selection":"lm1C"}],"gXfd":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _d3Interpolate = require("d3-interpolate");

var _d3Selection = require("d3-selection");

var _tween = require("./tween");

var _interpolate = _interopRequireDefault(require("./interpolate"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function styleRemove(name, interpolate) {
  var value00, value10, interpolate0;
  return function () {
    var value0 = (0, _d3Selection.style)(this, name),
        value1 = (this.style.removeProperty(name), (0, _d3Selection.style)(this, name));
    return value0 === value1 ? null : value0 === value00 && value1 === value10 ? interpolate0 : interpolate0 = interpolate(value00 = value0, value10 = value1);
  };
}

function styleRemoveEnd(name) {
  return function () {
    this.style.removeProperty(name);
  };
}

function styleConstant(name, interpolate, value1) {
  var value00, interpolate0;
  return function () {
    var value0 = (0, _d3Selection.style)(this, name);
    return value0 === value1 ? null : value0 === value00 ? interpolate0 : interpolate0 = interpolate(value00 = value0, value1);
  };
}

function styleFunction(name, interpolate, value) {
  var value00, value10, interpolate0;
  return function () {
    var value0 = (0, _d3Selection.style)(this, name),
        value1 = value(this);
    if (value1 == null) value1 = (this.style.removeProperty(name), (0, _d3Selection.style)(this, name));
    return value0 === value1 ? null : value0 === value00 && value1 === value10 ? interpolate0 : interpolate0 = interpolate(value00 = value0, value10 = value1);
  };
}

function _default(name, value, priority) {
  var i = (name += "") === "transform" ? _d3Interpolate.interpolateTransformCss : _interpolate.default;
  return value == null ? this.styleTween(name, styleRemove(name, i)).on("end.style." + name, styleRemoveEnd(name)) : this.styleTween(name, typeof value === "function" ? styleFunction(name, i, (0, _tween.tweenValue)(this, "style." + name, value)) : styleConstant(name, i, value + ""), priority);
}
},{"d3-interpolate":"mkGF","d3-selection":"lm1C","./tween":"CgJV","./interpolate":"KSuB"}],"SCZW":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function styleTween(name, value, priority) {
  function tween() {
    var node = this,
        i = value.apply(node, arguments);
    return i && function (t) {
      node.style.setProperty(name, i(t), priority);
    };
  }

  tween._value = value;
  return tween;
}

function _default(name, value, priority) {
  var key = "style." + (name += "");
  if (arguments.length < 2) return (key = this.tween(key)) && key._value;
  if (value == null) return this.tween(key, null);
  if (typeof value !== "function") throw new Error();
  return this.tween(key, styleTween(name, value, priority == null ? "" : priority));
}
},{}],"HTlb":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _tween = require("./tween");

function textConstant(value) {
  return function () {
    this.textContent = value;
  };
}

function textFunction(value) {
  return function () {
    var value1 = value(this);
    this.textContent = value1 == null ? "" : value1;
  };
}

function _default(value) {
  return this.tween("text", typeof value === "function" ? textFunction((0, _tween.tweenValue)(this, "text", value)) : textConstant(value == null ? "" : value + ""));
}
},{"./tween":"CgJV"}],"rWxz":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _index = require("./index");

var _schedule = _interopRequireWildcard(require("./schedule"));

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _default() {
  var name = this._name,
      id0 = this._id,
      id1 = (0, _index.newId)();

  for (var groups = this._groups, m = groups.length, j = 0; j < m; ++j) {
    for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {
      if (node = group[i]) {
        var inherit = (0, _schedule.get)(node, id0);
        (0, _schedule.default)(node, name, id1, i, group, {
          time: inherit.time + inherit.delay + inherit.duration,
          delay: 0,
          duration: inherit.duration,
          ease: inherit.ease
        });
      }
    }
  }

  return new _index.Transition(groups, this._parents, name, id1);
}
},{"./index":"J3C7","./schedule":"GDz/"}],"J3C7":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Transition = Transition;
exports.default = transition;
exports.newId = newId;

var _d3Selection = require("d3-selection");

var _attr = _interopRequireDefault(require("./attr"));

var _attrTween = _interopRequireDefault(require("./attrTween"));

var _delay = _interopRequireDefault(require("./delay"));

var _duration = _interopRequireDefault(require("./duration"));

var _ease = _interopRequireDefault(require("./ease"));

var _filter = _interopRequireDefault(require("./filter"));

var _merge = _interopRequireDefault(require("./merge"));

var _on = _interopRequireDefault(require("./on"));

var _remove = _interopRequireDefault(require("./remove"));

var _select = _interopRequireDefault(require("./select"));

var _selectAll = _interopRequireDefault(require("./selectAll"));

var _selection = _interopRequireDefault(require("./selection"));

var _style = _interopRequireDefault(require("./style"));

var _styleTween = _interopRequireDefault(require("./styleTween"));

var _text = _interopRequireDefault(require("./text"));

var _transition = _interopRequireDefault(require("./transition"));

var _tween = _interopRequireDefault(require("./tween"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var id = 0;

function Transition(groups, parents, name, id) {
  this._groups = groups;
  this._parents = parents;
  this._name = name;
  this._id = id;
}

function transition(name) {
  return (0, _d3Selection.selection)().transition(name);
}

function newId() {
  return ++id;
}

var selection_prototype = _d3Selection.selection.prototype;
Transition.prototype = transition.prototype = {
  constructor: Transition,
  select: _select.default,
  selectAll: _selectAll.default,
  filter: _filter.default,
  merge: _merge.default,
  selection: _selection.default,
  transition: _transition.default,
  call: selection_prototype.call,
  nodes: selection_prototype.nodes,
  node: selection_prototype.node,
  size: selection_prototype.size,
  empty: selection_prototype.empty,
  each: selection_prototype.each,
  on: _on.default,
  attr: _attr.default,
  attrTween: _attrTween.default,
  style: _style.default,
  styleTween: _styleTween.default,
  text: _text.default,
  remove: _remove.default,
  tween: _tween.default,
  delay: _delay.default,
  duration: _duration.default,
  ease: _ease.default
};
},{"d3-selection":"lm1C","./attr":"/e4S","./attrTween":"L4WC","./delay":"1K26","./duration":"ZZtL","./ease":"6pgS","./filter":"0QDl","./merge":"Z2Q+","./on":"VZes","./remove":"FS2t","./select":"Xvwr","./selectAll":"DOdJ","./selection":"bQR7","./style":"gXfd","./styleTween":"SCZW","./text":"HTlb","./transition":"rWxz","./tween":"CgJV"}],"fXiu":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.linear = linear;

function linear(t) {
  return +t;
}
},{}],"GaS5":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.quadIn = quadIn;
exports.quadOut = quadOut;
exports.quadInOut = quadInOut;

function quadIn(t) {
  return t * t;
}

function quadOut(t) {
  return t * (2 - t);
}

function quadInOut(t) {
  return ((t *= 2) <= 1 ? t * t : --t * (2 - t) + 1) / 2;
}
},{}],"PA7e":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.cubicIn = cubicIn;
exports.cubicOut = cubicOut;
exports.cubicInOut = cubicInOut;

function cubicIn(t) {
  return t * t * t;
}

function cubicOut(t) {
  return --t * t * t + 1;
}

function cubicInOut(t) {
  return ((t *= 2) <= 1 ? t * t * t : (t -= 2) * t * t + 2) / 2;
}
},{}],"ECJi":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.polyInOut = exports.polyOut = exports.polyIn = void 0;
var exponent = 3;

var polyIn = function custom(e) {
  e = +e;

  function polyIn(t) {
    return Math.pow(t, e);
  }

  polyIn.exponent = custom;
  return polyIn;
}(exponent);

exports.polyIn = polyIn;

var polyOut = function custom(e) {
  e = +e;

  function polyOut(t) {
    return 1 - Math.pow(1 - t, e);
  }

  polyOut.exponent = custom;
  return polyOut;
}(exponent);

exports.polyOut = polyOut;

var polyInOut = function custom(e) {
  e = +e;

  function polyInOut(t) {
    return ((t *= 2) <= 1 ? Math.pow(t, e) : 2 - Math.pow(2 - t, e)) / 2;
  }

  polyInOut.exponent = custom;
  return polyInOut;
}(exponent);

exports.polyInOut = polyInOut;
},{}],"sZZb":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.sinIn = sinIn;
exports.sinOut = sinOut;
exports.sinInOut = sinInOut;
var pi = Math.PI,
    halfPi = pi / 2;

function sinIn(t) {
  return 1 - Math.cos(t * halfPi);
}

function sinOut(t) {
  return Math.sin(t * halfPi);
}

function sinInOut(t) {
  return (1 - Math.cos(pi * t)) / 2;
}
},{}],"rYq8":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.expIn = expIn;
exports.expOut = expOut;
exports.expInOut = expInOut;

function expIn(t) {
  return Math.pow(2, 10 * t - 10);
}

function expOut(t) {
  return 1 - Math.pow(2, -10 * t);
}

function expInOut(t) {
  return ((t *= 2) <= 1 ? Math.pow(2, 10 * t - 10) : 2 - Math.pow(2, 10 - 10 * t)) / 2;
}
},{}],"1+hE":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.circleIn = circleIn;
exports.circleOut = circleOut;
exports.circleInOut = circleInOut;

function circleIn(t) {
  return 1 - Math.sqrt(1 - t * t);
}

function circleOut(t) {
  return Math.sqrt(1 - --t * t);
}

function circleInOut(t) {
  return ((t *= 2) <= 1 ? 1 - Math.sqrt(1 - t * t) : Math.sqrt(1 - (t -= 2) * t) + 1) / 2;
}
},{}],"MKsh":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.bounceIn = bounceIn;
exports.bounceOut = bounceOut;
exports.bounceInOut = bounceInOut;
var b1 = 4 / 11,
    b2 = 6 / 11,
    b3 = 8 / 11,
    b4 = 3 / 4,
    b5 = 9 / 11,
    b6 = 10 / 11,
    b7 = 15 / 16,
    b8 = 21 / 22,
    b9 = 63 / 64,
    b0 = 1 / b1 / b1;

function bounceIn(t) {
  return 1 - bounceOut(1 - t);
}

function bounceOut(t) {
  return (t = +t) < b1 ? b0 * t * t : t < b3 ? b0 * (t -= b2) * t + b4 : t < b6 ? b0 * (t -= b5) * t + b7 : b0 * (t -= b8) * t + b9;
}

function bounceInOut(t) {
  return ((t *= 2) <= 1 ? 1 - bounceOut(1 - t) : bounceOut(t - 1) + 1) / 2;
}
},{}],"fCsL":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.backInOut = exports.backOut = exports.backIn = void 0;
var overshoot = 1.70158;

var backIn = function custom(s) {
  s = +s;

  function backIn(t) {
    return t * t * ((s + 1) * t - s);
  }

  backIn.overshoot = custom;
  return backIn;
}(overshoot);

exports.backIn = backIn;

var backOut = function custom(s) {
  s = +s;

  function backOut(t) {
    return --t * t * ((s + 1) * t + s) + 1;
  }

  backOut.overshoot = custom;
  return backOut;
}(overshoot);

exports.backOut = backOut;

var backInOut = function custom(s) {
  s = +s;

  function backInOut(t) {
    return ((t *= 2) < 1 ? t * t * ((s + 1) * t - s) : (t -= 2) * t * ((s + 1) * t + s) + 2) / 2;
  }

  backInOut.overshoot = custom;
  return backInOut;
}(overshoot);

exports.backInOut = backInOut;
},{}],"xolo":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.elasticInOut = exports.elasticOut = exports.elasticIn = void 0;
var tau = 2 * Math.PI,
    amplitude = 1,
    period = 0.3;

var elasticIn = function custom(a, p) {
  var s = Math.asin(1 / (a = Math.max(1, a))) * (p /= tau);

  function elasticIn(t) {
    return a * Math.pow(2, 10 * --t) * Math.sin((s - t) / p);
  }

  elasticIn.amplitude = function (a) {
    return custom(a, p * tau);
  };

  elasticIn.period = function (p) {
    return custom(a, p);
  };

  return elasticIn;
}(amplitude, period);

exports.elasticIn = elasticIn;

var elasticOut = function custom(a, p) {
  var s = Math.asin(1 / (a = Math.max(1, a))) * (p /= tau);

  function elasticOut(t) {
    return 1 - a * Math.pow(2, -10 * (t = +t)) * Math.sin((t + s) / p);
  }

  elasticOut.amplitude = function (a) {
    return custom(a, p * tau);
  };

  elasticOut.period = function (p) {
    return custom(a, p);
  };

  return elasticOut;
}(amplitude, period);

exports.elasticOut = elasticOut;

var elasticInOut = function custom(a, p) {
  var s = Math.asin(1 / (a = Math.max(1, a))) * (p /= tau);

  function elasticInOut(t) {
    return ((t = t * 2 - 1) < 0 ? a * Math.pow(2, 10 * t) * Math.sin((s - t) / p) : 2 - a * Math.pow(2, -10 * t) * Math.sin((s + t) / p)) / 2;
  }

  elasticInOut.amplitude = function (a) {
    return custom(a, p * tau);
  };

  elasticInOut.period = function (p) {
    return custom(a, p);
  };

  return elasticInOut;
}(amplitude, period);

exports.elasticInOut = elasticInOut;
},{}],"CFyW":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "easeLinear", {
  enumerable: true,
  get: function () {
    return _linear.linear;
  }
});
Object.defineProperty(exports, "easeQuad", {
  enumerable: true,
  get: function () {
    return _quad.quadInOut;
  }
});
Object.defineProperty(exports, "easeQuadIn", {
  enumerable: true,
  get: function () {
    return _quad.quadIn;
  }
});
Object.defineProperty(exports, "easeQuadOut", {
  enumerable: true,
  get: function () {
    return _quad.quadOut;
  }
});
Object.defineProperty(exports, "easeQuadInOut", {
  enumerable: true,
  get: function () {
    return _quad.quadInOut;
  }
});
Object.defineProperty(exports, "easeCubic", {
  enumerable: true,
  get: function () {
    return _cubic.cubicInOut;
  }
});
Object.defineProperty(exports, "easeCubicIn", {
  enumerable: true,
  get: function () {
    return _cubic.cubicIn;
  }
});
Object.defineProperty(exports, "easeCubicOut", {
  enumerable: true,
  get: function () {
    return _cubic.cubicOut;
  }
});
Object.defineProperty(exports, "easeCubicInOut", {
  enumerable: true,
  get: function () {
    return _cubic.cubicInOut;
  }
});
Object.defineProperty(exports, "easePoly", {
  enumerable: true,
  get: function () {
    return _poly.polyInOut;
  }
});
Object.defineProperty(exports, "easePolyIn", {
  enumerable: true,
  get: function () {
    return _poly.polyIn;
  }
});
Object.defineProperty(exports, "easePolyOut", {
  enumerable: true,
  get: function () {
    return _poly.polyOut;
  }
});
Object.defineProperty(exports, "easePolyInOut", {
  enumerable: true,
  get: function () {
    return _poly.polyInOut;
  }
});
Object.defineProperty(exports, "easeSin", {
  enumerable: true,
  get: function () {
    return _sin.sinInOut;
  }
});
Object.defineProperty(exports, "easeSinIn", {
  enumerable: true,
  get: function () {
    return _sin.sinIn;
  }
});
Object.defineProperty(exports, "easeSinOut", {
  enumerable: true,
  get: function () {
    return _sin.sinOut;
  }
});
Object.defineProperty(exports, "easeSinInOut", {
  enumerable: true,
  get: function () {
    return _sin.sinInOut;
  }
});
Object.defineProperty(exports, "easeExp", {
  enumerable: true,
  get: function () {
    return _exp.expInOut;
  }
});
Object.defineProperty(exports, "easeExpIn", {
  enumerable: true,
  get: function () {
    return _exp.expIn;
  }
});
Object.defineProperty(exports, "easeExpOut", {
  enumerable: true,
  get: function () {
    return _exp.expOut;
  }
});
Object.defineProperty(exports, "easeExpInOut", {
  enumerable: true,
  get: function () {
    return _exp.expInOut;
  }
});
Object.defineProperty(exports, "easeCircle", {
  enumerable: true,
  get: function () {
    return _circle.circleInOut;
  }
});
Object.defineProperty(exports, "easeCircleIn", {
  enumerable: true,
  get: function () {
    return _circle.circleIn;
  }
});
Object.defineProperty(exports, "easeCircleOut", {
  enumerable: true,
  get: function () {
    return _circle.circleOut;
  }
});
Object.defineProperty(exports, "easeCircleInOut", {
  enumerable: true,
  get: function () {
    return _circle.circleInOut;
  }
});
Object.defineProperty(exports, "easeBounce", {
  enumerable: true,
  get: function () {
    return _bounce.bounceOut;
  }
});
Object.defineProperty(exports, "easeBounceIn", {
  enumerable: true,
  get: function () {
    return _bounce.bounceIn;
  }
});
Object.defineProperty(exports, "easeBounceOut", {
  enumerable: true,
  get: function () {
    return _bounce.bounceOut;
  }
});
Object.defineProperty(exports, "easeBounceInOut", {
  enumerable: true,
  get: function () {
    return _bounce.bounceInOut;
  }
});
Object.defineProperty(exports, "easeBack", {
  enumerable: true,
  get: function () {
    return _back.backInOut;
  }
});
Object.defineProperty(exports, "easeBackIn", {
  enumerable: true,
  get: function () {
    return _back.backIn;
  }
});
Object.defineProperty(exports, "easeBackOut", {
  enumerable: true,
  get: function () {
    return _back.backOut;
  }
});
Object.defineProperty(exports, "easeBackInOut", {
  enumerable: true,
  get: function () {
    return _back.backInOut;
  }
});
Object.defineProperty(exports, "easeElastic", {
  enumerable: true,
  get: function () {
    return _elastic.elasticOut;
  }
});
Object.defineProperty(exports, "easeElasticIn", {
  enumerable: true,
  get: function () {
    return _elastic.elasticIn;
  }
});
Object.defineProperty(exports, "easeElasticOut", {
  enumerable: true,
  get: function () {
    return _elastic.elasticOut;
  }
});
Object.defineProperty(exports, "easeElasticInOut", {
  enumerable: true,
  get: function () {
    return _elastic.elasticInOut;
  }
});

var _linear = require("./linear");

var _quad = require("./quad");

var _cubic = require("./cubic");

var _poly = require("./poly");

var _sin = require("./sin");

var _exp = require("./exp");

var _circle = require("./circle");

var _bounce = require("./bounce");

var _back = require("./back");

var _elastic = require("./elastic");
},{"./linear":"fXiu","./quad":"GaS5","./cubic":"PA7e","./poly":"ECJi","./sin":"sZZb","./exp":"rYq8","./circle":"1+hE","./bounce":"MKsh","./back":"fCsL","./elastic":"xolo"}],"CNir":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _index = require("../transition/index");

var _schedule = _interopRequireDefault(require("../transition/schedule"));

var _d3Ease = require("d3-ease");

var _d3Timer = require("d3-timer");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var defaultTiming = {
  time: null,
  // Set on use.
  delay: 0,
  duration: 250,
  ease: _d3Ease.easeCubicInOut
};

function inherit(node, id) {
  var timing;

  while (!(timing = node.__transition) || !(timing = timing[id])) {
    if (!(node = node.parentNode)) {
      return defaultTiming.time = (0, _d3Timer.now)(), defaultTiming;
    }
  }

  return timing;
}

function _default(name) {
  var id, timing;

  if (name instanceof _index.Transition) {
    id = name._id, name = name._name;
  } else {
    id = (0, _index.newId)(), (timing = defaultTiming).time = (0, _d3Timer.now)(), name = name == null ? null : name + "";
  }

  for (var groups = this._groups, m = groups.length, j = 0; j < m; ++j) {
    for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {
      if (node = group[i]) {
        (0, _schedule.default)(node, name, id, i, group, timing || inherit(node, id));
      }
    }
  }

  return new _index.Transition(groups, this._parents, name, id);
}
},{"../transition/index":"J3C7","../transition/schedule":"GDz/","d3-ease":"CFyW","d3-timer":"CBES"}],"uhVG":[function(require,module,exports) {
"use strict";

var _d3Selection = require("d3-selection");

var _interrupt = _interopRequireDefault(require("./interrupt"));

var _transition = _interopRequireDefault(require("./transition"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

_d3Selection.selection.prototype.interrupt = _interrupt.default;
_d3Selection.selection.prototype.transition = _transition.default;
},{"d3-selection":"lm1C","./interrupt":"JwzZ","./transition":"CNir"}],"zz7H":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _index = require("./transition/index");

var _schedule = require("./transition/schedule");

var root = [null];

function _default(node, name) {
  var schedules = node.__transition,
      schedule,
      i;

  if (schedules) {
    name = name == null ? null : name + "";

    for (i in schedules) {
      if ((schedule = schedules[i]).state > _schedule.SCHEDULED && schedule.name === name) {
        return new _index.Transition([[node]], root, name, +i);
      }
    }
  }

  return null;
}
},{"./transition/index":"J3C7","./transition/schedule":"GDz/"}],"Fcbi":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "transition", {
  enumerable: true,
  get: function () {
    return _index2.default;
  }
});
Object.defineProperty(exports, "active", {
  enumerable: true,
  get: function () {
    return _active.default;
  }
});
Object.defineProperty(exports, "interrupt", {
  enumerable: true,
  get: function () {
    return _interrupt.default;
  }
});

require("./selection/index");

var _index2 = _interopRequireDefault(require("./transition/index"));

var _active = _interopRequireDefault(require("./active"));

var _interrupt = _interopRequireDefault(require("./interrupt"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
},{"./selection/index":"uhVG","./transition/index":"J3C7","./active":"zz7H","./interrupt":"+xAn"}],"iX60":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(target, type, selection) {
  this.target = target;
  this.type = type;
  this.selection = selection;
}
},{}],"HwJw":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.brushSelection = brushSelection;
exports.brushX = brushX;
exports.brushY = brushY;
exports.default = _default;

var _d3Dispatch = require("d3-dispatch");

var _d3Drag = require("d3-drag");

var _d3Interpolate = require("d3-interpolate");

var _d3Selection = require("d3-selection");

var _d3Transition = require("d3-transition");

var _constant = _interopRequireDefault(require("./constant"));

var _event = _interopRequireDefault(require("./event"));

var _noevent = _interopRequireWildcard(require("./noevent"));

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var MODE_DRAG = {
  name: "drag"
},
    MODE_SPACE = {
  name: "space"
},
    MODE_HANDLE = {
  name: "handle"
},
    MODE_CENTER = {
  name: "center"
};
var X = {
  name: "x",
  handles: ["e", "w"].map(type),
  input: function (x, e) {
    return x && [[x[0], e[0][1]], [x[1], e[1][1]]];
  },
  output: function (xy) {
    return xy && [xy[0][0], xy[1][0]];
  }
};
var Y = {
  name: "y",
  handles: ["n", "s"].map(type),
  input: function (y, e) {
    return y && [[e[0][0], y[0]], [e[1][0], y[1]]];
  },
  output: function (xy) {
    return xy && [xy[0][1], xy[1][1]];
  }
};
var XY = {
  name: "xy",
  handles: ["n", "e", "s", "w", "nw", "ne", "se", "sw"].map(type),
  input: function (xy) {
    return xy;
  },
  output: function (xy) {
    return xy;
  }
};
var cursors = {
  overlay: "crosshair",
  selection: "move",
  n: "ns-resize",
  e: "ew-resize",
  s: "ns-resize",
  w: "ew-resize",
  nw: "nwse-resize",
  ne: "nesw-resize",
  se: "nwse-resize",
  sw: "nesw-resize"
};
var flipX = {
  e: "w",
  w: "e",
  nw: "ne",
  ne: "nw",
  se: "sw",
  sw: "se"
};
var flipY = {
  n: "s",
  s: "n",
  nw: "sw",
  ne: "se",
  se: "ne",
  sw: "nw"
};
var signsX = {
  overlay: +1,
  selection: +1,
  n: null,
  e: +1,
  s: null,
  w: -1,
  nw: -1,
  ne: +1,
  se: +1,
  sw: -1
};
var signsY = {
  overlay: +1,
  selection: +1,
  n: -1,
  e: null,
  s: +1,
  w: null,
  nw: -1,
  ne: -1,
  se: +1,
  sw: +1
};

function type(t) {
  return {
    type: t
  };
} // Ignore right-click, since that should open the context menu.


function defaultFilter() {
  return !_d3Selection.event.button;
}

function defaultExtent() {
  var svg = this.ownerSVGElement || this;
  return [[0, 0], [svg.width.baseVal.value, svg.height.baseVal.value]];
} // Like d3.local, but with the name “__brush” rather than auto-generated.


function local(node) {
  while (!node.__brush) if (!(node = node.parentNode)) return;

  return node.__brush;
}

function empty(extent) {
  return extent[0][0] === extent[1][0] || extent[0][1] === extent[1][1];
}

function brushSelection(node) {
  var state = node.__brush;
  return state ? state.dim.output(state.selection) : null;
}

function brushX() {
  return brush(X);
}

function brushY() {
  return brush(Y);
}

function _default() {
  return brush(XY);
}

function brush(dim) {
  var extent = defaultExtent,
      filter = defaultFilter,
      listeners = (0, _d3Dispatch.dispatch)(brush, "start", "brush", "end"),
      handleSize = 6,
      touchending;

  function brush(group) {
    var overlay = group.property("__brush", initialize).selectAll(".overlay").data([type("overlay")]);
    overlay.enter().append("rect").attr("class", "overlay").attr("pointer-events", "all").attr("cursor", cursors.overlay).merge(overlay).each(function () {
      var extent = local(this).extent;
      (0, _d3Selection.select)(this).attr("x", extent[0][0]).attr("y", extent[0][1]).attr("width", extent[1][0] - extent[0][0]).attr("height", extent[1][1] - extent[0][1]);
    });
    group.selectAll(".selection").data([type("selection")]).enter().append("rect").attr("class", "selection").attr("cursor", cursors.selection).attr("fill", "#777").attr("fill-opacity", 0.3).attr("stroke", "#fff").attr("shape-rendering", "crispEdges");
    var handle = group.selectAll(".handle").data(dim.handles, function (d) {
      return d.type;
    });
    handle.exit().remove();
    handle.enter().append("rect").attr("class", function (d) {
      return "handle handle--" + d.type;
    }).attr("cursor", function (d) {
      return cursors[d.type];
    });
    group.each(redraw).attr("fill", "none").attr("pointer-events", "all").style("-webkit-tap-highlight-color", "rgba(0,0,0,0)").on("mousedown.brush touchstart.brush", started);
  }

  brush.move = function (group, selection) {
    if (group.selection) {
      group.on("start.brush", function () {
        emitter(this, arguments).beforestart().start();
      }).on("interrupt.brush end.brush", function () {
        emitter(this, arguments).end();
      }).tween("brush", function () {
        var that = this,
            state = that.__brush,
            emit = emitter(that, arguments),
            selection0 = state.selection,
            selection1 = dim.input(typeof selection === "function" ? selection.apply(this, arguments) : selection, state.extent),
            i = (0, _d3Interpolate.interpolate)(selection0, selection1);

        function tween(t) {
          state.selection = t === 1 && empty(selection1) ? null : i(t);
          redraw.call(that);
          emit.brush();
        }

        return selection0 && selection1 ? tween : tween(1);
      });
    } else {
      group.each(function () {
        var that = this,
            args = arguments,
            state = that.__brush,
            selection1 = dim.input(typeof selection === "function" ? selection.apply(that, args) : selection, state.extent),
            emit = emitter(that, args).beforestart();
        (0, _d3Transition.interrupt)(that);
        state.selection = selection1 == null || empty(selection1) ? null : selection1;
        redraw.call(that);
        emit.start().brush().end();
      });
    }
  };

  function redraw() {
    var group = (0, _d3Selection.select)(this),
        selection = local(this).selection;

    if (selection) {
      group.selectAll(".selection").style("display", null).attr("x", selection[0][0]).attr("y", selection[0][1]).attr("width", selection[1][0] - selection[0][0]).attr("height", selection[1][1] - selection[0][1]);
      group.selectAll(".handle").style("display", null).attr("x", function (d) {
        return d.type[d.type.length - 1] === "e" ? selection[1][0] - handleSize / 2 : selection[0][0] - handleSize / 2;
      }).attr("y", function (d) {
        return d.type[0] === "s" ? selection[1][1] - handleSize / 2 : selection[0][1] - handleSize / 2;
      }).attr("width", function (d) {
        return d.type === "n" || d.type === "s" ? selection[1][0] - selection[0][0] + handleSize : handleSize;
      }).attr("height", function (d) {
        return d.type === "e" || d.type === "w" ? selection[1][1] - selection[0][1] + handleSize : handleSize;
      });
    } else {
      group.selectAll(".selection,.handle").style("display", "none").attr("x", null).attr("y", null).attr("width", null).attr("height", null);
    }
  }

  function emitter(that, args) {
    return that.__brush.emitter || new Emitter(that, args);
  }

  function Emitter(that, args) {
    this.that = that;
    this.args = args;
    this.state = that.__brush;
    this.active = 0;
  }

  Emitter.prototype = {
    beforestart: function () {
      if (++this.active === 1) this.state.emitter = this, this.starting = true;
      return this;
    },
    start: function () {
      if (this.starting) this.starting = false, this.emit("start");
      return this;
    },
    brush: function () {
      this.emit("brush");
      return this;
    },
    end: function () {
      if (--this.active === 0) delete this.state.emitter, this.emit("end");
      return this;
    },
    emit: function (type) {
      (0, _d3Selection.customEvent)(new _event.default(brush, type, dim.output(this.state.selection)), listeners.apply, listeners, [type, this.that, this.args]);
    }
  };

  function started() {
    if (_d3Selection.event.touches) {
      if (_d3Selection.event.changedTouches.length < _d3Selection.event.touches.length) return (0, _noevent.default)();
    } else if (touchending) return;

    if (!filter.apply(this, arguments)) return;
    var that = this,
        type = _d3Selection.event.target.__data__.type,
        mode = (_d3Selection.event.metaKey ? type = "overlay" : type) === "selection" ? MODE_DRAG : _d3Selection.event.altKey ? MODE_CENTER : MODE_HANDLE,
        signX = dim === Y ? null : signsX[type],
        signY = dim === X ? null : signsY[type],
        state = local(that),
        extent = state.extent,
        selection = state.selection,
        W = extent[0][0],
        w0,
        w1,
        N = extent[0][1],
        n0,
        n1,
        E = extent[1][0],
        e0,
        e1,
        S = extent[1][1],
        s0,
        s1,
        dx,
        dy,
        moving,
        shifting = signX && signY && _d3Selection.event.shiftKey,
        lockX,
        lockY,
        point0 = (0, _d3Selection.mouse)(that),
        point = point0,
        emit = emitter(that, arguments).beforestart();

    if (type === "overlay") {
      state.selection = selection = [[w0 = dim === Y ? W : point0[0], n0 = dim === X ? N : point0[1]], [e0 = dim === Y ? E : w0, s0 = dim === X ? S : n0]];
    } else {
      w0 = selection[0][0];
      n0 = selection[0][1];
      e0 = selection[1][0];
      s0 = selection[1][1];
    }

    w1 = w0;
    n1 = n0;
    e1 = e0;
    s1 = s0;
    var group = (0, _d3Selection.select)(that).attr("pointer-events", "none");
    var overlay = group.selectAll(".overlay").attr("cursor", cursors[type]);

    if (_d3Selection.event.touches) {
      group.on("touchmove.brush", moved, true).on("touchend.brush touchcancel.brush", ended, true);
    } else {
      var view = (0, _d3Selection.select)(_d3Selection.event.view).on("keydown.brush", keydowned, true).on("keyup.brush", keyupped, true).on("mousemove.brush", moved, true).on("mouseup.brush", ended, true);
      (0, _d3Drag.dragDisable)(_d3Selection.event.view);
    }

    (0, _noevent.nopropagation)();
    (0, _d3Transition.interrupt)(that);
    redraw.call(that);
    emit.start();

    function moved() {
      var point1 = (0, _d3Selection.mouse)(that);

      if (shifting && !lockX && !lockY) {
        if (Math.abs(point1[0] - point[0]) > Math.abs(point1[1] - point[1])) lockY = true;else lockX = true;
      }

      point = point1;
      moving = true;
      (0, _noevent.default)();
      move();
    }

    function move() {
      var t;
      dx = point[0] - point0[0];
      dy = point[1] - point0[1];

      switch (mode) {
        case MODE_SPACE:
        case MODE_DRAG:
          {
            if (signX) dx = Math.max(W - w0, Math.min(E - e0, dx)), w1 = w0 + dx, e1 = e0 + dx;
            if (signY) dy = Math.max(N - n0, Math.min(S - s0, dy)), n1 = n0 + dy, s1 = s0 + dy;
            break;
          }

        case MODE_HANDLE:
          {
            if (signX < 0) dx = Math.max(W - w0, Math.min(E - w0, dx)), w1 = w0 + dx, e1 = e0;else if (signX > 0) dx = Math.max(W - e0, Math.min(E - e0, dx)), w1 = w0, e1 = e0 + dx;
            if (signY < 0) dy = Math.max(N - n0, Math.min(S - n0, dy)), n1 = n0 + dy, s1 = s0;else if (signY > 0) dy = Math.max(N - s0, Math.min(S - s0, dy)), n1 = n0, s1 = s0 + dy;
            break;
          }

        case MODE_CENTER:
          {
            if (signX) w1 = Math.max(W, Math.min(E, w0 - dx * signX)), e1 = Math.max(W, Math.min(E, e0 + dx * signX));
            if (signY) n1 = Math.max(N, Math.min(S, n0 - dy * signY)), s1 = Math.max(N, Math.min(S, s0 + dy * signY));
            break;
          }
      }

      if (e1 < w1) {
        signX *= -1;
        t = w0, w0 = e0, e0 = t;
        t = w1, w1 = e1, e1 = t;
        if (type in flipX) overlay.attr("cursor", cursors[type = flipX[type]]);
      }

      if (s1 < n1) {
        signY *= -1;
        t = n0, n0 = s0, s0 = t;
        t = n1, n1 = s1, s1 = t;
        if (type in flipY) overlay.attr("cursor", cursors[type = flipY[type]]);
      }

      if (state.selection) selection = state.selection; // May be set by brush.move!

      if (lockX) w1 = selection[0][0], e1 = selection[1][0];
      if (lockY) n1 = selection[0][1], s1 = selection[1][1];

      if (selection[0][0] !== w1 || selection[0][1] !== n1 || selection[1][0] !== e1 || selection[1][1] !== s1) {
        state.selection = [[w1, n1], [e1, s1]];
        redraw.call(that);
        emit.brush();
      }
    }

    function ended() {
      (0, _noevent.nopropagation)();

      if (_d3Selection.event.touches) {
        if (_d3Selection.event.touches.length) return;
        if (touchending) clearTimeout(touchending);
        touchending = setTimeout(function () {
          touchending = null;
        }, 500); // Ghost clicks are delayed!

        group.on("touchmove.brush touchend.brush touchcancel.brush", null);
      } else {
        (0, _d3Drag.dragEnable)(_d3Selection.event.view, moving);
        view.on("keydown.brush keyup.brush mousemove.brush mouseup.brush", null);
      }

      group.attr("pointer-events", "all");
      overlay.attr("cursor", cursors.overlay);
      if (state.selection) selection = state.selection; // May be set by brush.move (on start)!

      if (empty(selection)) state.selection = null, redraw.call(that);
      emit.end();
    }

    function keydowned() {
      switch (_d3Selection.event.keyCode) {
        case 16:
          {
            // SHIFT
            shifting = signX && signY;
            break;
          }

        case 18:
          {
            // ALT
            if (mode === MODE_HANDLE) {
              if (signX) e0 = e1 - dx * signX, w0 = w1 + dx * signX;
              if (signY) s0 = s1 - dy * signY, n0 = n1 + dy * signY;
              mode = MODE_CENTER;
              move();
            }

            break;
          }

        case 32:
          {
            // SPACE; takes priority over ALT
            if (mode === MODE_HANDLE || mode === MODE_CENTER) {
              if (signX < 0) e0 = e1 - dx;else if (signX > 0) w0 = w1 - dx;
              if (signY < 0) s0 = s1 - dy;else if (signY > 0) n0 = n1 - dy;
              mode = MODE_SPACE;
              overlay.attr("cursor", cursors.selection);
              move();
            }

            break;
          }

        default:
          return;
      }

      (0, _noevent.default)();
    }

    function keyupped() {
      switch (_d3Selection.event.keyCode) {
        case 16:
          {
            // SHIFT
            if (shifting) {
              lockX = lockY = shifting = false;
              move();
            }

            break;
          }

        case 18:
          {
            // ALT
            if (mode === MODE_CENTER) {
              if (signX < 0) e0 = e1;else if (signX > 0) w0 = w1;
              if (signY < 0) s0 = s1;else if (signY > 0) n0 = n1;
              mode = MODE_HANDLE;
              move();
            }

            break;
          }

        case 32:
          {
            // SPACE
            if (mode === MODE_SPACE) {
              if (_d3Selection.event.altKey) {
                if (signX) e0 = e1 - dx * signX, w0 = w1 + dx * signX;
                if (signY) s0 = s1 - dy * signY, n0 = n1 + dy * signY;
                mode = MODE_CENTER;
              } else {
                if (signX < 0) e0 = e1;else if (signX > 0) w0 = w1;
                if (signY < 0) s0 = s1;else if (signY > 0) n0 = n1;
                mode = MODE_HANDLE;
              }

              overlay.attr("cursor", cursors[type]);
              move();
            }

            break;
          }

        default:
          return;
      }

      (0, _noevent.default)();
    }
  }

  function initialize() {
    var state = this.__brush || {
      selection: null
    };
    state.extent = extent.apply(this, arguments);
    state.dim = dim;
    return state;
  }

  brush.extent = function (_) {
    return arguments.length ? (extent = typeof _ === "function" ? _ : (0, _constant.default)([[+_[0][0], +_[0][1]], [+_[1][0], +_[1][1]]]), brush) : extent;
  };

  brush.filter = function (_) {
    return arguments.length ? (filter = typeof _ === "function" ? _ : (0, _constant.default)(!!_), brush) : filter;
  };

  brush.handleSize = function (_) {
    return arguments.length ? (handleSize = +_, brush) : handleSize;
  };

  brush.on = function () {
    var value = listeners.on.apply(listeners, arguments);
    return value === listeners ? brush : value;
  };

  return brush;
}
},{"d3-dispatch":"UU/c","d3-drag":"LrBi","d3-interpolate":"mkGF","d3-selection":"lm1C","d3-transition":"Fcbi","./constant":"5O/Y","./event":"iX60","./noevent":"DCEg"}],"TNt0":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "brush", {
  enumerable: true,
  get: function () {
    return _brush.default;
  }
});
Object.defineProperty(exports, "brushX", {
  enumerable: true,
  get: function () {
    return _brush.brushX;
  }
});
Object.defineProperty(exports, "brushY", {
  enumerable: true,
  get: function () {
    return _brush.brushY;
  }
});
Object.defineProperty(exports, "brushSelection", {
  enumerable: true,
  get: function () {
    return _brush.brushSelection;
  }
});

var _brush = _interopRequireWildcard(require("./brush"));

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }
},{"./brush":"HwJw"}],"z+rd":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.max = exports.tau = exports.halfPi = exports.pi = exports.sin = exports.cos = void 0;
var cos = Math.cos;
exports.cos = cos;
var sin = Math.sin;
exports.sin = sin;
var pi = Math.PI;
exports.pi = pi;
var halfPi = pi / 2;
exports.halfPi = halfPi;
var tau = pi * 2;
exports.tau = tau;
var max = Math.max;
exports.max = max;
},{}],"YLYV":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _d3Array = require("d3-array");

var _math = require("./math");

function compareValue(compare) {
  return function (a, b) {
    return compare(a.source.value + a.target.value, b.source.value + b.target.value);
  };
}

function _default() {
  var padAngle = 0,
      sortGroups = null,
      sortSubgroups = null,
      sortChords = null;

  function chord(matrix) {
    var n = matrix.length,
        groupSums = [],
        groupIndex = (0, _d3Array.range)(n),
        subgroupIndex = [],
        chords = [],
        groups = chords.groups = new Array(n),
        subgroups = new Array(n * n),
        k,
        x,
        x0,
        dx,
        i,
        j; // Compute the sum.

    k = 0, i = -1;

    while (++i < n) {
      x = 0, j = -1;

      while (++j < n) {
        x += matrix[i][j];
      }

      groupSums.push(x);
      subgroupIndex.push((0, _d3Array.range)(n));
      k += x;
    } // Sort groups…


    if (sortGroups) groupIndex.sort(function (a, b) {
      return sortGroups(groupSums[a], groupSums[b]);
    }); // Sort subgroups…

    if (sortSubgroups) subgroupIndex.forEach(function (d, i) {
      d.sort(function (a, b) {
        return sortSubgroups(matrix[i][a], matrix[i][b]);
      });
    }); // Convert the sum to scaling factor for [0, 2pi].
    // TODO Allow start and end angle to be specified?
    // TODO Allow padding to be specified as percentage?

    k = (0, _math.max)(0, _math.tau - padAngle * n) / k;
    dx = k ? padAngle : _math.tau / n; // Compute the start and end angle for each group and subgroup.
    // Note: Opera has a bug reordering object literal properties!

    x = 0, i = -1;

    while (++i < n) {
      x0 = x, j = -1;

      while (++j < n) {
        var di = groupIndex[i],
            dj = subgroupIndex[di][j],
            v = matrix[di][dj],
            a0 = x,
            a1 = x += v * k;
        subgroups[dj * n + di] = {
          index: di,
          subindex: dj,
          startAngle: a0,
          endAngle: a1,
          value: v
        };
      }

      groups[di] = {
        index: di,
        startAngle: x0,
        endAngle: x,
        value: groupSums[di]
      };
      x += dx;
    } // Generate chords for each (non-empty) subgroup-subgroup link.


    i = -1;

    while (++i < n) {
      j = i - 1;

      while (++j < n) {
        var source = subgroups[j * n + i],
            target = subgroups[i * n + j];

        if (source.value || target.value) {
          chords.push(source.value < target.value ? {
            source: target,
            target: source
          } : {
            source: source,
            target: target
          });
        }
      }
    }

    return sortChords ? chords.sort(sortChords) : chords;
  }

  chord.padAngle = function (_) {
    return arguments.length ? (padAngle = (0, _math.max)(0, _), chord) : padAngle;
  };

  chord.sortGroups = function (_) {
    return arguments.length ? (sortGroups = _, chord) : sortGroups;
  };

  chord.sortSubgroups = function (_) {
    return arguments.length ? (sortSubgroups = _, chord) : sortSubgroups;
  };

  chord.sortChords = function (_) {
    return arguments.length ? (_ == null ? sortChords = null : (sortChords = compareValue(_))._ = _, chord) : sortChords && sortChords._;
  };

  return chord;
}
},{"d3-array":"cBuZ","./math":"z+rd"}],"E5FC":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var pi = Math.PI,
    tau = 2 * pi,
    epsilon = 1e-6,
    tauEpsilon = tau - epsilon;

function Path() {
  this._x0 = this._y0 = // start of current subpath
  this._x1 = this._y1 = null; // end of current subpath

  this._ = "";
}

function path() {
  return new Path();
}

Path.prototype = path.prototype = {
  constructor: Path,
  moveTo: function (x, y) {
    this._ += "M" + (this._x0 = this._x1 = +x) + "," + (this._y0 = this._y1 = +y);
  },
  closePath: function () {
    if (this._x1 !== null) {
      this._x1 = this._x0, this._y1 = this._y0;
      this._ += "Z";
    }
  },
  lineTo: function (x, y) {
    this._ += "L" + (this._x1 = +x) + "," + (this._y1 = +y);
  },
  quadraticCurveTo: function (x1, y1, x, y) {
    this._ += "Q" + +x1 + "," + +y1 + "," + (this._x1 = +x) + "," + (this._y1 = +y);
  },
  bezierCurveTo: function (x1, y1, x2, y2, x, y) {
    this._ += "C" + +x1 + "," + +y1 + "," + +x2 + "," + +y2 + "," + (this._x1 = +x) + "," + (this._y1 = +y);
  },
  arcTo: function (x1, y1, x2, y2, r) {
    x1 = +x1, y1 = +y1, x2 = +x2, y2 = +y2, r = +r;
    var x0 = this._x1,
        y0 = this._y1,
        x21 = x2 - x1,
        y21 = y2 - y1,
        x01 = x0 - x1,
        y01 = y0 - y1,
        l01_2 = x01 * x01 + y01 * y01; // Is the radius negative? Error.

    if (r < 0) throw new Error("negative radius: " + r); // Is this path empty? Move to (x1,y1).

    if (this._x1 === null) {
      this._ += "M" + (this._x1 = x1) + "," + (this._y1 = y1);
    } // Or, is (x1,y1) coincident with (x0,y0)? Do nothing.
    else if (!(l01_2 > epsilon)) ; // Or, are (x0,y0), (x1,y1) and (x2,y2) collinear?
      // Equivalently, is (x1,y1) coincident with (x2,y2)?
      // Or, is the radius zero? Line to (x1,y1).
      else if (!(Math.abs(y01 * x21 - y21 * x01) > epsilon) || !r) {
          this._ += "L" + (this._x1 = x1) + "," + (this._y1 = y1);
        } // Otherwise, draw an arc!
        else {
            var x20 = x2 - x0,
                y20 = y2 - y0,
                l21_2 = x21 * x21 + y21 * y21,
                l20_2 = x20 * x20 + y20 * y20,
                l21 = Math.sqrt(l21_2),
                l01 = Math.sqrt(l01_2),
                l = r * Math.tan((pi - Math.acos((l21_2 + l01_2 - l20_2) / (2 * l21 * l01))) / 2),
                t01 = l / l01,
                t21 = l / l21; // If the start tangent is not coincident with (x0,y0), line to.

            if (Math.abs(t01 - 1) > epsilon) {
              this._ += "L" + (x1 + t01 * x01) + "," + (y1 + t01 * y01);
            }

            this._ += "A" + r + "," + r + ",0,0," + +(y01 * x20 > x01 * y20) + "," + (this._x1 = x1 + t21 * x21) + "," + (this._y1 = y1 + t21 * y21);
          }
  },
  arc: function (x, y, r, a0, a1, ccw) {
    x = +x, y = +y, r = +r;
    var dx = r * Math.cos(a0),
        dy = r * Math.sin(a0),
        x0 = x + dx,
        y0 = y + dy,
        cw = 1 ^ ccw,
        da = ccw ? a0 - a1 : a1 - a0; // Is the radius negative? Error.

    if (r < 0) throw new Error("negative radius: " + r); // Is this path empty? Move to (x0,y0).

    if (this._x1 === null) {
      this._ += "M" + x0 + "," + y0;
    } // Or, is (x0,y0) not coincident with the previous point? Line to (x0,y0).
    else if (Math.abs(this._x1 - x0) > epsilon || Math.abs(this._y1 - y0) > epsilon) {
        this._ += "L" + x0 + "," + y0;
      } // Is this arc empty? We’re done.


    if (!r) return; // Does the angle go the wrong way? Flip the direction.

    if (da < 0) da = da % tau + tau; // Is this a complete circle? Draw two arcs to complete the circle.

    if (da > tauEpsilon) {
      this._ += "A" + r + "," + r + ",0,1," + cw + "," + (x - dx) + "," + (y - dy) + "A" + r + "," + r + ",0,1," + cw + "," + (this._x1 = x0) + "," + (this._y1 = y0);
    } // Is this arc non-empty? Draw an arc!
    else if (da > epsilon) {
        this._ += "A" + r + "," + r + ",0," + +(da >= pi) + "," + cw + "," + (this._x1 = x + r * Math.cos(a1)) + "," + (this._y1 = y + r * Math.sin(a1));
      }
  },
  rect: function (x, y, w, h) {
    this._ += "M" + (this._x0 = this._x1 = +x) + "," + (this._y0 = this._y1 = +y) + "h" + +w + "v" + +h + "h" + -w + "Z";
  },
  toString: function () {
    return this._;
  }
};
var _default = path;
exports.default = _default;
},{}],"dz42":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "path", {
  enumerable: true,
  get: function () {
    return _path.default;
  }
});

var _path = _interopRequireDefault(require("./path"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
},{"./path":"E5FC"}],"ootM":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _array = require("./array");

var _constant = _interopRequireDefault(require("./constant"));

var _math = require("./math");

var _d3Path = require("d3-path");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function defaultSource(d) {
  return d.source;
}

function defaultTarget(d) {
  return d.target;
}

function defaultRadius(d) {
  return d.radius;
}

function defaultStartAngle(d) {
  return d.startAngle;
}

function defaultEndAngle(d) {
  return d.endAngle;
}

function _default() {
  var source = defaultSource,
      target = defaultTarget,
      radius = defaultRadius,
      startAngle = defaultStartAngle,
      endAngle = defaultEndAngle,
      context = null;

  function ribbon() {
    var buffer,
        argv = _array.slice.call(arguments),
        s = source.apply(this, argv),
        t = target.apply(this, argv),
        sr = +radius.apply(this, (argv[0] = s, argv)),
        sa0 = startAngle.apply(this, argv) - _math.halfPi,
        sa1 = endAngle.apply(this, argv) - _math.halfPi,
        sx0 = sr * (0, _math.cos)(sa0),
        sy0 = sr * (0, _math.sin)(sa0),
        tr = +radius.apply(this, (argv[0] = t, argv)),
        ta0 = startAngle.apply(this, argv) - _math.halfPi,
        ta1 = endAngle.apply(this, argv) - _math.halfPi;

    if (!context) context = buffer = (0, _d3Path.path)();
    context.moveTo(sx0, sy0);
    context.arc(0, 0, sr, sa0, sa1);

    if (sa0 !== ta0 || sa1 !== ta1) {
      // TODO sr !== tr?
      context.quadraticCurveTo(0, 0, tr * (0, _math.cos)(ta0), tr * (0, _math.sin)(ta0));
      context.arc(0, 0, tr, ta0, ta1);
    }

    context.quadraticCurveTo(0, 0, sx0, sy0);
    context.closePath();
    if (buffer) return context = null, buffer + "" || null;
  }

  ribbon.radius = function (_) {
    return arguments.length ? (radius = typeof _ === "function" ? _ : (0, _constant.default)(+_), ribbon) : radius;
  };

  ribbon.startAngle = function (_) {
    return arguments.length ? (startAngle = typeof _ === "function" ? _ : (0, _constant.default)(+_), ribbon) : startAngle;
  };

  ribbon.endAngle = function (_) {
    return arguments.length ? (endAngle = typeof _ === "function" ? _ : (0, _constant.default)(+_), ribbon) : endAngle;
  };

  ribbon.source = function (_) {
    return arguments.length ? (source = _, ribbon) : source;
  };

  ribbon.target = function (_) {
    return arguments.length ? (target = _, ribbon) : target;
  };

  ribbon.context = function (_) {
    return arguments.length ? (context = _ == null ? null : _, ribbon) : context;
  };

  return ribbon;
}
},{"./array":"rv5q","./constant":"5O/Y","./math":"z+rd","d3-path":"dz42"}],"cf1+":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "chord", {
  enumerable: true,
  get: function () {
    return _chord.default;
  }
});
Object.defineProperty(exports, "ribbon", {
  enumerable: true,
  get: function () {
    return _ribbon.default;
  }
});

var _chord = _interopRequireDefault(require("./chord"));

var _ribbon = _interopRequireDefault(require("./ribbon"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
},{"./chord":"YLYV","./ribbon":"ootM"}],"wD+C":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.prefix = void 0;
var prefix = "$";
exports.prefix = prefix;

function Map() {}

Map.prototype = map.prototype = {
  constructor: Map,
  has: function (key) {
    return prefix + key in this;
  },
  get: function (key) {
    return this[prefix + key];
  },
  set: function (key, value) {
    this[prefix + key] = value;
    return this;
  },
  remove: function (key) {
    var property = prefix + key;
    return property in this && delete this[property];
  },
  clear: function () {
    for (var property in this) if (property[0] === prefix) delete this[property];
  },
  keys: function () {
    var keys = [];

    for (var property in this) if (property[0] === prefix) keys.push(property.slice(1));

    return keys;
  },
  values: function () {
    var values = [];

    for (var property in this) if (property[0] === prefix) values.push(this[property]);

    return values;
  },
  entries: function () {
    var entries = [];

    for (var property in this) if (property[0] === prefix) entries.push({
      key: property.slice(1),
      value: this[property]
    });

    return entries;
  },
  size: function () {
    var size = 0;

    for (var property in this) if (property[0] === prefix) ++size;

    return size;
  },
  empty: function () {
    for (var property in this) if (property[0] === prefix) return false;

    return true;
  },
  each: function (f) {
    for (var property in this) if (property[0] === prefix) f(this[property], property.slice(1), this);
  }
};

function map(object, f) {
  var map = new Map(); // Copy constructor.

  if (object instanceof Map) object.each(function (value, key) {
    map.set(key, value);
  }); // Index array by numeric index or specified key function.
  else if (Array.isArray(object)) {
      var i = -1,
          n = object.length,
          o;
      if (f == null) while (++i < n) map.set(i, object[i]);else while (++i < n) map.set(f(o = object[i], i, object), o);
    } // Convert object to map.
    else if (object) for (var key in object) map.set(key, object[key]);
  return map;
}

var _default = map;
exports.default = _default;
},{}],"6TaN":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _map = _interopRequireDefault(require("./map"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default() {
  var keys = [],
      sortKeys = [],
      sortValues,
      rollup,
      nest;

  function apply(array, depth, createResult, setResult) {
    if (depth >= keys.length) {
      if (sortValues != null) array.sort(sortValues);
      return rollup != null ? rollup(array) : array;
    }

    var i = -1,
        n = array.length,
        key = keys[depth++],
        keyValue,
        value,
        valuesByKey = (0, _map.default)(),
        values,
        result = createResult();

    while (++i < n) {
      if (values = valuesByKey.get(keyValue = key(value = array[i]) + "")) {
        values.push(value);
      } else {
        valuesByKey.set(keyValue, [value]);
      }
    }

    valuesByKey.each(function (values, key) {
      setResult(result, key, apply(values, depth, createResult, setResult));
    });
    return result;
  }

  function entries(map, depth) {
    if (++depth > keys.length) return map;
    var array,
        sortKey = sortKeys[depth - 1];
    if (rollup != null && depth >= keys.length) array = map.entries();else array = [], map.each(function (v, k) {
      array.push({
        key: k,
        values: entries(v, depth)
      });
    });
    return sortKey != null ? array.sort(function (a, b) {
      return sortKey(a.key, b.key);
    }) : array;
  }

  return nest = {
    object: function (array) {
      return apply(array, 0, createObject, setObject);
    },
    map: function (array) {
      return apply(array, 0, createMap, setMap);
    },
    entries: function (array) {
      return entries(apply(array, 0, createMap, setMap), 0);
    },
    key: function (d) {
      keys.push(d);
      return nest;
    },
    sortKeys: function (order) {
      sortKeys[keys.length - 1] = order;
      return nest;
    },
    sortValues: function (order) {
      sortValues = order;
      return nest;
    },
    rollup: function (f) {
      rollup = f;
      return nest;
    }
  };
}

function createObject() {
  return {};
}

function setObject(object, key, value) {
  object[key] = value;
}

function createMap() {
  return (0, _map.default)();
}

function setMap(map, key, value) {
  map.set(key, value);
}
},{"./map":"wD+C"}],"/fgw":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _map = _interopRequireWildcard(require("./map"));

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function Set() {}

var proto = _map.default.prototype;
Set.prototype = set.prototype = {
  constructor: Set,
  has: proto.has,
  add: function (value) {
    value += "";
    this[_map.prefix + value] = value;
    return this;
  },
  remove: proto.remove,
  clear: proto.clear,
  values: proto.keys,
  size: proto.size,
  empty: proto.empty,
  each: proto.each
};

function set(object, f) {
  var set = new Set(); // Copy constructor.

  if (object instanceof Set) object.each(function (value) {
    set.add(value);
  }); // Otherwise, assume it’s an array.
  else if (object) {
      var i = -1,
          n = object.length;
      if (f == null) while (++i < n) set.add(object[i]);else while (++i < n) set.add(f(object[i], i, object));
    }
  return set;
}

var _default = set;
exports.default = _default;
},{"./map":"wD+C"}],"S/tS":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(map) {
  var keys = [];

  for (var key in map) keys.push(key);

  return keys;
}
},{}],"wANB":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(map) {
  var values = [];

  for (var key in map) values.push(map[key]);

  return values;
}
},{}],"u9ZW":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(map) {
  var entries = [];

  for (var key in map) entries.push({
    key: key,
    value: map[key]
  });

  return entries;
}
},{}],"qqV1":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "nest", {
  enumerable: true,
  get: function () {
    return _nest.default;
  }
});
Object.defineProperty(exports, "set", {
  enumerable: true,
  get: function () {
    return _set.default;
  }
});
Object.defineProperty(exports, "map", {
  enumerable: true,
  get: function () {
    return _map.default;
  }
});
Object.defineProperty(exports, "keys", {
  enumerable: true,
  get: function () {
    return _keys.default;
  }
});
Object.defineProperty(exports, "values", {
  enumerable: true,
  get: function () {
    return _values.default;
  }
});
Object.defineProperty(exports, "entries", {
  enumerable: true,
  get: function () {
    return _entries.default;
  }
});

var _nest = _interopRequireDefault(require("./nest"));

var _set = _interopRequireDefault(require("./set"));

var _map = _interopRequireDefault(require("./map"));

var _keys = _interopRequireDefault(require("./keys"));

var _values = _interopRequireDefault(require("./values"));

var _entries = _interopRequireDefault(require("./entries"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
},{"./nest":"6TaN","./set":"/fgw","./map":"wD+C","./keys":"S/tS","./values":"wANB","./entries":"u9ZW"}],"+IBm":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.slice = void 0;
var array = Array.prototype;
var slice = array.slice;
exports.slice = slice;
},{}],"8ldh":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(a, b) {
  return a - b;
}
},{}],"hcn/":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(ring) {
  var i = 0,
      n = ring.length,
      area = ring[n - 1][1] * ring[0][0] - ring[n - 1][0] * ring[0][1];

  while (++i < n) area += ring[i - 1][1] * ring[i][0] - ring[i - 1][0] * ring[i][1];

  return area;
}
},{}],"GiY2":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(ring, hole) {
  var i = -1,
      n = hole.length,
      c;

  while (++i < n) if (c = ringContains(ring, hole[i])) return c;

  return 0;
}

function ringContains(ring, point) {
  var x = point[0],
      y = point[1],
      contains = -1;

  for (var i = 0, n = ring.length, j = n - 1; i < n; j = i++) {
    var pi = ring[i],
        xi = pi[0],
        yi = pi[1],
        pj = ring[j],
        xj = pj[0],
        yj = pj[1];
    if (segmentContains(pi, pj, point)) return 0;
    if (yi > y !== yj > y && x < (xj - xi) * (y - yi) / (yj - yi) + xi) contains = -contains;
  }

  return contains;
}

function segmentContains(a, b, c) {
  var i;
  return collinear(a, b, c) && within(a[i = +(a[0] === b[0])], c[i], b[i]);
}

function collinear(a, b, c) {
  return (b[0] - a[0]) * (c[1] - a[1]) === (c[0] - a[0]) * (b[1] - a[1]);
}

function within(p, q, r) {
  return p <= q && q <= r || r <= q && q <= p;
}
},{}],"BhKh":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default() {}
},{}],"oKpg":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _d3Array = require("d3-array");

var _array = require("./array");

var _ascending = _interopRequireDefault(require("./ascending"));

var _area = _interopRequireDefault(require("./area"));

var _constant = _interopRequireDefault(require("./constant"));

var _contains = _interopRequireDefault(require("./contains"));

var _noop = _interopRequireDefault(require("./noop"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var cases = [[], [[[1.0, 1.5], [0.5, 1.0]]], [[[1.5, 1.0], [1.0, 1.5]]], [[[1.5, 1.0], [0.5, 1.0]]], [[[1.0, 0.5], [1.5, 1.0]]], [[[1.0, 1.5], [0.5, 1.0]], [[1.0, 0.5], [1.5, 1.0]]], [[[1.0, 0.5], [1.0, 1.5]]], [[[1.0, 0.5], [0.5, 1.0]]], [[[0.5, 1.0], [1.0, 0.5]]], [[[1.0, 1.5], [1.0, 0.5]]], [[[0.5, 1.0], [1.0, 0.5]], [[1.5, 1.0], [1.0, 1.5]]], [[[1.5, 1.0], [1.0, 0.5]]], [[[0.5, 1.0], [1.5, 1.0]]], [[[1.0, 1.5], [1.5, 1.0]]], [[[0.5, 1.0], [1.0, 1.5]]], []];

function _default() {
  var dx = 1,
      dy = 1,
      threshold = _d3Array.thresholdSturges,
      smooth = smoothLinear;

  function contours(values) {
    var tz = threshold(values); // Convert number of thresholds into uniform thresholds.

    if (!Array.isArray(tz)) {
      var domain = (0, _d3Array.extent)(values),
          start = domain[0],
          stop = domain[1];
      tz = (0, _d3Array.tickStep)(start, stop, tz);
      tz = (0, _d3Array.range)(Math.floor(start / tz) * tz, Math.floor(stop / tz) * tz, tz);
    } else {
      tz = tz.slice().sort(_ascending.default);
    }

    return tz.map(function (value) {
      return contour(values, value);
    });
  } // Accumulate, smooth contour rings, assign holes to exterior rings.
  // Based on https://github.com/mbostock/shapefile/blob/v0.6.2/shp/polygon.js


  function contour(values, value) {
    var polygons = [],
        holes = [];
    isorings(values, value, function (ring) {
      smooth(ring, values, value);
      if ((0, _area.default)(ring) > 0) polygons.push([ring]);else holes.push(ring);
    });
    holes.forEach(function (hole) {
      for (var i = 0, n = polygons.length, polygon; i < n; ++i) {
        if ((0, _contains.default)((polygon = polygons[i])[0], hole) !== -1) {
          polygon.push(hole);
          return;
        }
      }
    });
    return {
      type: "MultiPolygon",
      value: value,
      coordinates: polygons
    };
  } // Marching squares with isolines stitched into rings.
  // Based on https://github.com/topojson/topojson-client/blob/v3.0.0/src/stitch.js


  function isorings(values, value, callback) {
    var fragmentByStart = new Array(),
        fragmentByEnd = new Array(),
        x,
        y,
        t0,
        t1,
        t2,
        t3; // Special case for the first row (y = -1, t2 = t3 = 0).

    x = y = -1;
    t1 = values[0] >= value;
    cases[t1 << 1].forEach(stitch);

    while (++x < dx - 1) {
      t0 = t1, t1 = values[x + 1] >= value;
      cases[t0 | t1 << 1].forEach(stitch);
    }

    cases[t1 << 0].forEach(stitch); // General case for the intermediate rows.

    while (++y < dy - 1) {
      x = -1;
      t1 = values[y * dx + dx] >= value;
      t2 = values[y * dx] >= value;
      cases[t1 << 1 | t2 << 2].forEach(stitch);

      while (++x < dx - 1) {
        t0 = t1, t1 = values[y * dx + dx + x + 1] >= value;
        t3 = t2, t2 = values[y * dx + x + 1] >= value;
        cases[t0 | t1 << 1 | t2 << 2 | t3 << 3].forEach(stitch);
      }

      cases[t1 | t2 << 3].forEach(stitch);
    } // Special case for the last row (y = dy - 1, t0 = t1 = 0).


    x = -1;
    t2 = values[y * dx] >= value;
    cases[t2 << 2].forEach(stitch);

    while (++x < dx - 1) {
      t3 = t2, t2 = values[y * dx + x + 1] >= value;
      cases[t2 << 2 | t3 << 3].forEach(stitch);
    }

    cases[t2 << 3].forEach(stitch);

    function stitch(line) {
      var start = [line[0][0] + x, line[0][1] + y],
          end = [line[1][0] + x, line[1][1] + y],
          startIndex = index(start),
          endIndex = index(end),
          f,
          g;

      if (f = fragmentByEnd[startIndex]) {
        if (g = fragmentByStart[endIndex]) {
          delete fragmentByEnd[f.end];
          delete fragmentByStart[g.start];

          if (f === g) {
            f.ring.push(end);
            callback(f.ring);
          } else {
            fragmentByStart[f.start] = fragmentByEnd[g.end] = {
              start: f.start,
              end: g.end,
              ring: f.ring.concat(g.ring)
            };
          }
        } else {
          delete fragmentByEnd[f.end];
          f.ring.push(end);
          fragmentByEnd[f.end = endIndex] = f;
        }
      } else if (f = fragmentByStart[endIndex]) {
        if (g = fragmentByEnd[startIndex]) {
          delete fragmentByStart[f.start];
          delete fragmentByEnd[g.end];

          if (f === g) {
            f.ring.push(end);
            callback(f.ring);
          } else {
            fragmentByStart[g.start] = fragmentByEnd[f.end] = {
              start: g.start,
              end: f.end,
              ring: g.ring.concat(f.ring)
            };
          }
        } else {
          delete fragmentByStart[f.start];
          f.ring.unshift(start);
          fragmentByStart[f.start = startIndex] = f;
        }
      } else {
        fragmentByStart[startIndex] = fragmentByEnd[endIndex] = {
          start: startIndex,
          end: endIndex,
          ring: [start, end]
        };
      }
    }
  }

  function index(point) {
    return point[0] * 2 + point[1] * (dx + 1) * 4;
  }

  function smoothLinear(ring, values, value) {
    ring.forEach(function (point) {
      var x = point[0],
          y = point[1],
          xt = x | 0,
          yt = y | 0,
          v0,
          v1 = values[yt * dx + xt];

      if (x > 0 && x < dx && xt === x) {
        v0 = values[yt * dx + xt - 1];
        point[0] = x + (value - v0) / (v1 - v0) - 0.5;
      }

      if (y > 0 && y < dy && yt === y) {
        v0 = values[(yt - 1) * dx + xt];
        point[1] = y + (value - v0) / (v1 - v0) - 0.5;
      }
    });
  }

  contours.contour = contour;

  contours.size = function (_) {
    if (!arguments.length) return [dx, dy];

    var _0 = Math.ceil(_[0]),
        _1 = Math.ceil(_[1]);

    if (!(_0 > 0) || !(_1 > 0)) throw new Error("invalid size");
    return dx = _0, dy = _1, contours;
  };

  contours.thresholds = function (_) {
    return arguments.length ? (threshold = typeof _ === "function" ? _ : Array.isArray(_) ? (0, _constant.default)(_array.slice.call(_)) : (0, _constant.default)(_), contours) : threshold;
  };

  contours.smooth = function (_) {
    return arguments.length ? (smooth = _ ? smoothLinear : _noop.default, contours) : smooth === smoothLinear;
  };

  return contours;
}
},{"d3-array":"cBuZ","./array":"+IBm","./ascending":"8ldh","./area":"hcn/","./constant":"5O/Y","./contains":"GiY2","./noop":"BhKh"}],"yZ0K":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.blurX = blurX;
exports.blurY = blurY;

// TODO Optimize edge cases.
// TODO Optimize index calculation.
// TODO Optimize arguments.
function blurX(source, target, r) {
  var n = source.width,
      m = source.height,
      w = (r << 1) + 1;

  for (var j = 0; j < m; ++j) {
    for (var i = 0, sr = 0; i < n + r; ++i) {
      if (i < n) {
        sr += source.data[i + j * n];
      }

      if (i >= r) {
        if (i >= w) {
          sr -= source.data[i - w + j * n];
        }

        target.data[i - r + j * n] = sr / Math.min(i + 1, n - 1 + w - i, w);
      }
    }
  }
} // TODO Optimize edge cases.
// TODO Optimize index calculation.
// TODO Optimize arguments.


function blurY(source, target, r) {
  var n = source.width,
      m = source.height,
      w = (r << 1) + 1;

  for (var i = 0; i < n; ++i) {
    for (var j = 0, sr = 0; j < m + r; ++j) {
      if (j < m) {
        sr += source.data[i + j * n];
      }

      if (j >= r) {
        if (j >= w) {
          sr -= source.data[i + (j - w) * n];
        }

        target.data[i + (j - r) * n] = sr / Math.min(j + 1, m - 1 + w - j, w);
      }
    }
  }
}
},{}],"9VOW":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _d3Array = require("d3-array");

var _array = require("./array");

var _blur = require("./blur");

var _constant = _interopRequireDefault(require("./constant"));

var _contours = _interopRequireDefault(require("./contours"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function defaultX(d) {
  return d[0];
}

function defaultY(d) {
  return d[1];
}

function defaultWeight() {
  return 1;
}

function _default() {
  var x = defaultX,
      y = defaultY,
      weight = defaultWeight,
      dx = 960,
      dy = 500,
      r = 20,
      // blur radius
  k = 2,
      // log2(grid cell size)
  o = r * 3,
      // grid offset, to pad for blur
  n = dx + o * 2 >> k,
      // grid width
  m = dy + o * 2 >> k,
      // grid height
  threshold = (0, _constant.default)(20);

  function density(data) {
    var values0 = new Float32Array(n * m),
        values1 = new Float32Array(n * m);
    data.forEach(function (d, i, data) {
      var xi = +x(d, i, data) + o >> k,
          yi = +y(d, i, data) + o >> k,
          wi = +weight(d, i, data);

      if (xi >= 0 && xi < n && yi >= 0 && yi < m) {
        values0[xi + yi * n] += wi;
      }
    }); // TODO Optimize.

    (0, _blur.blurX)({
      width: n,
      height: m,
      data: values0
    }, {
      width: n,
      height: m,
      data: values1
    }, r >> k);
    (0, _blur.blurY)({
      width: n,
      height: m,
      data: values1
    }, {
      width: n,
      height: m,
      data: values0
    }, r >> k);
    (0, _blur.blurX)({
      width: n,
      height: m,
      data: values0
    }, {
      width: n,
      height: m,
      data: values1
    }, r >> k);
    (0, _blur.blurY)({
      width: n,
      height: m,
      data: values1
    }, {
      width: n,
      height: m,
      data: values0
    }, r >> k);
    (0, _blur.blurX)({
      width: n,
      height: m,
      data: values0
    }, {
      width: n,
      height: m,
      data: values1
    }, r >> k);
    (0, _blur.blurY)({
      width: n,
      height: m,
      data: values1
    }, {
      width: n,
      height: m,
      data: values0
    }, r >> k);
    var tz = threshold(values0); // Convert number of thresholds into uniform thresholds.

    if (!Array.isArray(tz)) {
      var stop = (0, _d3Array.max)(values0);
      tz = (0, _d3Array.tickStep)(0, stop, tz);
      tz = (0, _d3Array.range)(0, Math.floor(stop / tz) * tz, tz);
      tz.shift();
    }

    return (0, _contours.default)().thresholds(tz).size([n, m])(values0).map(transform);
  }

  function transform(geometry) {
    geometry.value *= Math.pow(2, -2 * k); // Density in points per square pixel.

    geometry.coordinates.forEach(transformPolygon);
    return geometry;
  }

  function transformPolygon(coordinates) {
    coordinates.forEach(transformRing);
  }

  function transformRing(coordinates) {
    coordinates.forEach(transformPoint);
  } // TODO Optimize.


  function transformPoint(coordinates) {
    coordinates[0] = coordinates[0] * Math.pow(2, k) - o;
    coordinates[1] = coordinates[1] * Math.pow(2, k) - o;
  }

  function resize() {
    o = r * 3;
    n = dx + o * 2 >> k;
    m = dy + o * 2 >> k;
    return density;
  }

  density.x = function (_) {
    return arguments.length ? (x = typeof _ === "function" ? _ : (0, _constant.default)(+_), density) : x;
  };

  density.y = function (_) {
    return arguments.length ? (y = typeof _ === "function" ? _ : (0, _constant.default)(+_), density) : y;
  };

  density.weight = function (_) {
    return arguments.length ? (weight = typeof _ === "function" ? _ : (0, _constant.default)(+_), density) : weight;
  };

  density.size = function (_) {
    if (!arguments.length) return [dx, dy];

    var _0 = Math.ceil(_[0]),
        _1 = Math.ceil(_[1]);

    if (!(_0 >= 0) && !(_0 >= 0)) throw new Error("invalid size");
    return dx = _0, dy = _1, resize();
  };

  density.cellSize = function (_) {
    if (!arguments.length) return 1 << k;
    if (!((_ = +_) >= 1)) throw new Error("invalid cell size");
    return k = Math.floor(Math.log(_) / Math.LN2), resize();
  };

  density.thresholds = function (_) {
    return arguments.length ? (threshold = typeof _ === "function" ? _ : Array.isArray(_) ? (0, _constant.default)(_array.slice.call(_)) : (0, _constant.default)(_), density) : threshold;
  };

  density.bandwidth = function (_) {
    if (!arguments.length) return Math.sqrt(r * (r + 1));
    if (!((_ = +_) >= 0)) throw new Error("invalid bandwidth");
    return r = Math.round((Math.sqrt(4 * _ * _ + 1) - 1) / 2), resize();
  };

  return density;
}
},{"d3-array":"cBuZ","./array":"+IBm","./blur":"yZ0K","./constant":"5O/Y","./contours":"oKpg"}],"cfrl":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "contours", {
  enumerable: true,
  get: function () {
    return _contours.default;
  }
});
Object.defineProperty(exports, "contourDensity", {
  enumerable: true,
  get: function () {
    return _density.default;
  }
});

var _contours = _interopRequireDefault(require("./contours"));

var _density = _interopRequireDefault(require("./density"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
},{"./contours":"oKpg","./density":"9VOW"}],"7SC/":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;
var EOL = {},
    EOF = {},
    QUOTE = 34,
    NEWLINE = 10,
    RETURN = 13;

function objectConverter(columns) {
  return new Function("d", "return {" + columns.map(function (name, i) {
    return JSON.stringify(name) + ": d[" + i + "]";
  }).join(",") + "}");
}

function customConverter(columns, f) {
  var object = objectConverter(columns);
  return function (row, i) {
    return f(object(row), i, columns);
  };
} // Compute unique columns in order of discovery.


function inferColumns(rows) {
  var columnSet = Object.create(null),
      columns = [];
  rows.forEach(function (row) {
    for (var column in row) {
      if (!(column in columnSet)) {
        columns.push(columnSet[column] = column);
      }
    }
  });
  return columns;
}

function _default(delimiter) {
  var reFormat = new RegExp("[\"" + delimiter + "\n\r]"),
      DELIMITER = delimiter.charCodeAt(0);

  function parse(text, f) {
    var convert,
        columns,
        rows = parseRows(text, function (row, i) {
      if (convert) return convert(row, i - 1);
      columns = row, convert = f ? customConverter(row, f) : objectConverter(row);
    });
    rows.columns = columns || [];
    return rows;
  }

  function parseRows(text, f) {
    var rows = [],
        // output rows
    N = text.length,
        I = 0,
        // current character index
    n = 0,
        // current line number
    t,
        // current token
    eof = N <= 0,
        // current token followed by EOF?
    eol = false; // current token followed by EOL?
    // Strip the trailing newline.

    if (text.charCodeAt(N - 1) === NEWLINE) --N;
    if (text.charCodeAt(N - 1) === RETURN) --N;

    function token() {
      if (eof) return EOF;
      if (eol) return eol = false, EOL; // Unescape quotes.

      var i,
          j = I,
          c;

      if (text.charCodeAt(j) === QUOTE) {
        while (I++ < N && text.charCodeAt(I) !== QUOTE || text.charCodeAt(++I) === QUOTE);

        if ((i = I) >= N) eof = true;else if ((c = text.charCodeAt(I++)) === NEWLINE) eol = true;else if (c === RETURN) {
          eol = true;
          if (text.charCodeAt(I) === NEWLINE) ++I;
        }
        return text.slice(j + 1, i - 1).replace(/""/g, "\"");
      } // Find next delimiter or newline.


      while (I < N) {
        if ((c = text.charCodeAt(i = I++)) === NEWLINE) eol = true;else if (c === RETURN) {
          eol = true;
          if (text.charCodeAt(I) === NEWLINE) ++I;
        } else if (c !== DELIMITER) continue;
        return text.slice(j, i);
      } // Return last token before EOF.


      return eof = true, text.slice(j, N);
    }

    while ((t = token()) !== EOF) {
      var row = [];

      while (t !== EOL && t !== EOF) row.push(t), t = token();

      if (f && (row = f(row, n++)) == null) continue;
      rows.push(row);
    }

    return rows;
  }

  function format(rows, columns) {
    if (columns == null) columns = inferColumns(rows);
    return [columns.map(formatValue).join(delimiter)].concat(rows.map(function (row) {
      return columns.map(function (column) {
        return formatValue(row[column]);
      }).join(delimiter);
    })).join("\n");
  }

  function formatRows(rows) {
    return rows.map(formatRow).join("\n");
  }

  function formatRow(row) {
    return row.map(formatValue).join(delimiter);
  }

  function formatValue(text) {
    return text == null ? "" : reFormat.test(text += "") ? "\"" + text.replace(/"/g, "\"\"") + "\"" : text;
  }

  return {
    parse: parse,
    parseRows: parseRows,
    format: format,
    formatRows: formatRows
  };
}
},{}],"mU2J":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.csvFormatRows = exports.csvFormat = exports.csvParseRows = exports.csvParse = void 0;

var _dsv = _interopRequireDefault(require("./dsv"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var csv = (0, _dsv.default)(",");
var csvParse = csv.parse;
exports.csvParse = csvParse;
var csvParseRows = csv.parseRows;
exports.csvParseRows = csvParseRows;
var csvFormat = csv.format;
exports.csvFormat = csvFormat;
var csvFormatRows = csv.formatRows;
exports.csvFormatRows = csvFormatRows;
},{"./dsv":"7SC/"}],"zpVZ":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.tsvFormatRows = exports.tsvFormat = exports.tsvParseRows = exports.tsvParse = void 0;

var _dsv = _interopRequireDefault(require("./dsv"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var tsv = (0, _dsv.default)("\t");
var tsvParse = tsv.parse;
exports.tsvParse = tsvParse;
var tsvParseRows = tsv.parseRows;
exports.tsvParseRows = tsvParseRows;
var tsvFormat = tsv.format;
exports.tsvFormat = tsvFormat;
var tsvFormatRows = tsv.formatRows;
exports.tsvFormatRows = tsvFormatRows;
},{"./dsv":"7SC/"}],"mQVF":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "dsvFormat", {
  enumerable: true,
  get: function () {
    return _dsv.default;
  }
});
Object.defineProperty(exports, "csvParse", {
  enumerable: true,
  get: function () {
    return _csv.csvParse;
  }
});
Object.defineProperty(exports, "csvParseRows", {
  enumerable: true,
  get: function () {
    return _csv.csvParseRows;
  }
});
Object.defineProperty(exports, "csvFormat", {
  enumerable: true,
  get: function () {
    return _csv.csvFormat;
  }
});
Object.defineProperty(exports, "csvFormatRows", {
  enumerable: true,
  get: function () {
    return _csv.csvFormatRows;
  }
});
Object.defineProperty(exports, "tsvParse", {
  enumerable: true,
  get: function () {
    return _tsv.tsvParse;
  }
});
Object.defineProperty(exports, "tsvParseRows", {
  enumerable: true,
  get: function () {
    return _tsv.tsvParseRows;
  }
});
Object.defineProperty(exports, "tsvFormat", {
  enumerable: true,
  get: function () {
    return _tsv.tsvFormat;
  }
});
Object.defineProperty(exports, "tsvFormatRows", {
  enumerable: true,
  get: function () {
    return _tsv.tsvFormatRows;
  }
});

var _dsv = _interopRequireDefault(require("./dsv"));

var _csv = require("./csv");

var _tsv = require("./tsv");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
},{"./dsv":"7SC/","./csv":"mU2J","./tsv":"zpVZ"}],"NEvU":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function responseBlob(response) {
  if (!response.ok) throw new Error(response.status + " " + response.statusText);
  return response.blob();
}

function _default(input, init) {
  return fetch(input, init).then(responseBlob);
}
},{}],"W4GS":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function responseArrayBuffer(response) {
  if (!response.ok) throw new Error(response.status + " " + response.statusText);
  return response.arrayBuffer();
}

function _default(input, init) {
  return fetch(input, init).then(responseArrayBuffer);
}
},{}],"/QFe":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function responseText(response) {
  if (!response.ok) throw new Error(response.status + " " + response.statusText);
  return response.text();
}

function _default(input, init) {
  return fetch(input, init).then(responseText);
}
},{}],"fvyQ":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = dsv;
exports.tsv = exports.csv = void 0;

var _d3Dsv = require("d3-dsv");

var _text = _interopRequireDefault(require("./text"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function dsvParse(parse) {
  return function (input, init, row) {
    if (arguments.length === 2 && typeof init === "function") row = init, init = undefined;
    return (0, _text.default)(input, init).then(function (response) {
      return parse(response, row);
    });
  };
}

function dsv(delimiter, input, init, row) {
  if (arguments.length === 3 && typeof init === "function") row = init, init = undefined;
  var format = (0, _d3Dsv.dsvFormat)(delimiter);
  return (0, _text.default)(input, init).then(function (response) {
    return format.parse(response, row);
  });
}

var csv = dsvParse(_d3Dsv.csvParse);
exports.csv = csv;
var tsv = dsvParse(_d3Dsv.tsvParse);
exports.tsv = tsv;
},{"d3-dsv":"mQVF","./text":"/QFe"}],"oqjg":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(input, init) {
  return new Promise(function (resolve, reject) {
    var image = new Image();

    for (var key in init) image[key] = init[key];

    image.onerror = reject;

    image.onload = function () {
      resolve(image);
    };

    image.src = input;
  });
}
},{}],"Lvc+":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function responseJson(response) {
  if (!response.ok) throw new Error(response.status + " " + response.statusText);
  return response.json();
}

function _default(input, init) {
  return fetch(input, init).then(responseJson);
}
},{}],"FRc5":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.svg = exports.html = exports.default = void 0;

var _text = _interopRequireDefault(require("./text"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function parser(type) {
  return function (input, init) {
    return (0, _text.default)(input, init).then(function (text) {
      return new DOMParser().parseFromString(text, type);
    });
  };
}

var _default = parser("application/xml");

exports.default = _default;
var html = parser("text/html");
exports.html = html;
var svg = parser("image/svg+xml");
exports.svg = svg;
},{"./text":"/QFe"}],"hNko":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "blob", {
  enumerable: true,
  get: function () {
    return _blob.default;
  }
});
Object.defineProperty(exports, "buffer", {
  enumerable: true,
  get: function () {
    return _buffer.default;
  }
});
Object.defineProperty(exports, "dsv", {
  enumerable: true,
  get: function () {
    return _dsv.default;
  }
});
Object.defineProperty(exports, "csv", {
  enumerable: true,
  get: function () {
    return _dsv.csv;
  }
});
Object.defineProperty(exports, "tsv", {
  enumerable: true,
  get: function () {
    return _dsv.tsv;
  }
});
Object.defineProperty(exports, "image", {
  enumerable: true,
  get: function () {
    return _image.default;
  }
});
Object.defineProperty(exports, "json", {
  enumerable: true,
  get: function () {
    return _json.default;
  }
});
Object.defineProperty(exports, "text", {
  enumerable: true,
  get: function () {
    return _text.default;
  }
});
Object.defineProperty(exports, "xml", {
  enumerable: true,
  get: function () {
    return _xml.default;
  }
});
Object.defineProperty(exports, "html", {
  enumerable: true,
  get: function () {
    return _xml.html;
  }
});
Object.defineProperty(exports, "svg", {
  enumerable: true,
  get: function () {
    return _xml.svg;
  }
});

var _blob = _interopRequireDefault(require("./blob"));

var _buffer = _interopRequireDefault(require("./buffer"));

var _dsv = _interopRequireWildcard(require("./dsv"));

var _image = _interopRequireDefault(require("./image"));

var _json = _interopRequireDefault(require("./json"));

var _text = _interopRequireDefault(require("./text"));

var _xml = _interopRequireWildcard(require("./xml"));

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
},{"./blob":"NEvU","./buffer":"W4GS","./dsv":"fvyQ","./image":"oqjg","./json":"Lvc+","./text":"/QFe","./xml":"FRc5"}],"y+F4":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(x, y) {
  var nodes;
  if (x == null) x = 0;
  if (y == null) y = 0;

  function force() {
    var i,
        n = nodes.length,
        node,
        sx = 0,
        sy = 0;

    for (i = 0; i < n; ++i) {
      node = nodes[i], sx += node.x, sy += node.y;
    }

    for (sx = sx / n - x, sy = sy / n - y, i = 0; i < n; ++i) {
      node = nodes[i], node.x -= sx, node.y -= sy;
    }
  }

  force.initialize = function (_) {
    nodes = _;
  };

  force.x = function (_) {
    return arguments.length ? (x = +_, force) : x;
  };

  force.y = function (_) {
    return arguments.length ? (y = +_, force) : y;
  };

  return force;
}
},{}],"jmDl":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default() {
  return (Math.random() - 0.5) * 1e-6;
}
},{}],"c4hk":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;
exports.addAll = addAll;

function _default(d) {
  var x = +this._x.call(null, d),
      y = +this._y.call(null, d);
  return add(this.cover(x, y), x, y, d);
}

function add(tree, x, y, d) {
  if (isNaN(x) || isNaN(y)) return tree; // ignore invalid points

  var parent,
      node = tree._root,
      leaf = {
    data: d
  },
      x0 = tree._x0,
      y0 = tree._y0,
      x1 = tree._x1,
      y1 = tree._y1,
      xm,
      ym,
      xp,
      yp,
      right,
      bottom,
      i,
      j; // If the tree is empty, initialize the root as a leaf.

  if (!node) return tree._root = leaf, tree; // Find the existing leaf for the new point, or add it.

  while (node.length) {
    if (right = x >= (xm = (x0 + x1) / 2)) x0 = xm;else x1 = xm;
    if (bottom = y >= (ym = (y0 + y1) / 2)) y0 = ym;else y1 = ym;
    if (parent = node, !(node = node[i = bottom << 1 | right])) return parent[i] = leaf, tree;
  } // Is the new point is exactly coincident with the existing point?


  xp = +tree._x.call(null, node.data);
  yp = +tree._y.call(null, node.data);
  if (x === xp && y === yp) return leaf.next = node, parent ? parent[i] = leaf : tree._root = leaf, tree; // Otherwise, split the leaf node until the old and new point are separated.

  do {
    parent = parent ? parent[i] = new Array(4) : tree._root = new Array(4);
    if (right = x >= (xm = (x0 + x1) / 2)) x0 = xm;else x1 = xm;
    if (bottom = y >= (ym = (y0 + y1) / 2)) y0 = ym;else y1 = ym;
  } while ((i = bottom << 1 | right) === (j = (yp >= ym) << 1 | xp >= xm));

  return parent[j] = node, parent[i] = leaf, tree;
}

function addAll(data) {
  var d,
      i,
      n = data.length,
      x,
      y,
      xz = new Array(n),
      yz = new Array(n),
      x0 = Infinity,
      y0 = Infinity,
      x1 = -Infinity,
      y1 = -Infinity; // Compute the points and their extent.

  for (i = 0; i < n; ++i) {
    if (isNaN(x = +this._x.call(null, d = data[i])) || isNaN(y = +this._y.call(null, d))) continue;
    xz[i] = x;
    yz[i] = y;
    if (x < x0) x0 = x;
    if (x > x1) x1 = x;
    if (y < y0) y0 = y;
    if (y > y1) y1 = y;
  } // If there were no (valid) points, inherit the existing extent.


  if (x1 < x0) x0 = this._x0, x1 = this._x1;
  if (y1 < y0) y0 = this._y0, y1 = this._y1; // Expand the tree to cover the new points.

  this.cover(x0, y0).cover(x1, y1); // Add the new points.

  for (i = 0; i < n; ++i) {
    add(this, xz[i], yz[i], data[i]);
  }

  return this;
}
},{}],"DeJI":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(x, y) {
  if (isNaN(x = +x) || isNaN(y = +y)) return this; // ignore invalid points

  var x0 = this._x0,
      y0 = this._y0,
      x1 = this._x1,
      y1 = this._y1; // If the quadtree has no extent, initialize them.
  // Integer extent are necessary so that if we later double the extent,
  // the existing quadrant boundaries don’t change due to floating point error!

  if (isNaN(x0)) {
    x1 = (x0 = Math.floor(x)) + 1;
    y1 = (y0 = Math.floor(y)) + 1;
  } // Otherwise, double repeatedly to cover.
  else if (x0 > x || x > x1 || y0 > y || y > y1) {
      var z = x1 - x0,
          node = this._root,
          parent,
          i;

      switch (i = (y < (y0 + y1) / 2) << 1 | x < (x0 + x1) / 2) {
        case 0:
          {
            do parent = new Array(4), parent[i] = node, node = parent; while ((z *= 2, x1 = x0 + z, y1 = y0 + z, x > x1 || y > y1));

            break;
          }

        case 1:
          {
            do parent = new Array(4), parent[i] = node, node = parent; while ((z *= 2, x0 = x1 - z, y1 = y0 + z, x0 > x || y > y1));

            break;
          }

        case 2:
          {
            do parent = new Array(4), parent[i] = node, node = parent; while ((z *= 2, x1 = x0 + z, y0 = y1 - z, x > x1 || y0 > y));

            break;
          }

        case 3:
          {
            do parent = new Array(4), parent[i] = node, node = parent; while ((z *= 2, x0 = x1 - z, y0 = y1 - z, x0 > x || y0 > y));

            break;
          }
      }

      if (this._root && this._root.length) this._root = node;
    } // If the quadtree covers the point already, just return.
    else return this;

  this._x0 = x0;
  this._y0 = y0;
  this._x1 = x1;
  this._y1 = y1;
  return this;
}
},{}],"7HTB":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default() {
  var data = [];
  this.visit(function (node) {
    if (!node.length) do data.push(node.data); while (node = node.next);
  });
  return data;
}
},{}],"JRL4":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(_) {
  return arguments.length ? this.cover(+_[0][0], +_[0][1]).cover(+_[1][0], +_[1][1]) : isNaN(this._x0) ? undefined : [[this._x0, this._y0], [this._x1, this._y1]];
}
},{}],"BPLw":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(node, x0, y0, x1, y1) {
  this.node = node;
  this.x0 = x0;
  this.y0 = y0;
  this.x1 = x1;
  this.y1 = y1;
}
},{}],"2t1g":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _quad = _interopRequireDefault(require("./quad"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(x, y, radius) {
  var data,
      x0 = this._x0,
      y0 = this._y0,
      x1,
      y1,
      x2,
      y2,
      x3 = this._x1,
      y3 = this._y1,
      quads = [],
      node = this._root,
      q,
      i;
  if (node) quads.push(new _quad.default(node, x0, y0, x3, y3));
  if (radius == null) radius = Infinity;else {
    x0 = x - radius, y0 = y - radius;
    x3 = x + radius, y3 = y + radius;
    radius *= radius;
  }

  while (q = quads.pop()) {
    // Stop searching if this quadrant can’t contain a closer node.
    if (!(node = q.node) || (x1 = q.x0) > x3 || (y1 = q.y0) > y3 || (x2 = q.x1) < x0 || (y2 = q.y1) < y0) continue; // Bisect the current quadrant.

    if (node.length) {
      var xm = (x1 + x2) / 2,
          ym = (y1 + y2) / 2;
      quads.push(new _quad.default(node[3], xm, ym, x2, y2), new _quad.default(node[2], x1, ym, xm, y2), new _quad.default(node[1], xm, y1, x2, ym), new _quad.default(node[0], x1, y1, xm, ym)); // Visit the closest quadrant first.

      if (i = (y >= ym) << 1 | x >= xm) {
        q = quads[quads.length - 1];
        quads[quads.length - 1] = quads[quads.length - 1 - i];
        quads[quads.length - 1 - i] = q;
      }
    } // Visit this point. (Visiting coincident points isn’t necessary!)
    else {
        var dx = x - +this._x.call(null, node.data),
            dy = y - +this._y.call(null, node.data),
            d2 = dx * dx + dy * dy;

        if (d2 < radius) {
          var d = Math.sqrt(radius = d2);
          x0 = x - d, y0 = y - d;
          x3 = x + d, y3 = y + d;
          data = node.data;
        }
      }
  }

  return data;
}
},{"./quad":"BPLw"}],"3wnj":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;
exports.removeAll = removeAll;

function _default(d) {
  if (isNaN(x = +this._x.call(null, d)) || isNaN(y = +this._y.call(null, d))) return this; // ignore invalid points

  var parent,
      node = this._root,
      retainer,
      previous,
      next,
      x0 = this._x0,
      y0 = this._y0,
      x1 = this._x1,
      y1 = this._y1,
      x,
      y,
      xm,
      ym,
      right,
      bottom,
      i,
      j; // If the tree is empty, initialize the root as a leaf.

  if (!node) return this; // Find the leaf node for the point.
  // While descending, also retain the deepest parent with a non-removed sibling.

  if (node.length) while (true) {
    if (right = x >= (xm = (x0 + x1) / 2)) x0 = xm;else x1 = xm;
    if (bottom = y >= (ym = (y0 + y1) / 2)) y0 = ym;else y1 = ym;
    if (!(parent = node, node = node[i = bottom << 1 | right])) return this;
    if (!node.length) break;
    if (parent[i + 1 & 3] || parent[i + 2 & 3] || parent[i + 3 & 3]) retainer = parent, j = i;
  } // Find the point to remove.

  while (node.data !== d) if (!(previous = node, node = node.next)) return this;

  if (next = node.next) delete node.next; // If there are multiple coincident points, remove just the point.

  if (previous) return next ? previous.next = next : delete previous.next, this; // If this is the root point, remove it.

  if (!parent) return this._root = next, this; // Remove this leaf.

  next ? parent[i] = next : delete parent[i]; // If the parent now contains exactly one leaf, collapse superfluous parents.

  if ((node = parent[0] || parent[1] || parent[2] || parent[3]) && node === (parent[3] || parent[2] || parent[1] || parent[0]) && !node.length) {
    if (retainer) retainer[j] = node;else this._root = node;
  }

  return this;
}

function removeAll(data) {
  for (var i = 0, n = data.length; i < n; ++i) this.remove(data[i]);

  return this;
}
},{}],"aU2q":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default() {
  return this._root;
}
},{}],"PC8q":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default() {
  var size = 0;
  this.visit(function (node) {
    if (!node.length) do ++size; while (node = node.next);
  });
  return size;
}
},{}],"MOvE":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _quad = _interopRequireDefault(require("./quad"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(callback) {
  var quads = [],
      q,
      node = this._root,
      child,
      x0,
      y0,
      x1,
      y1;
  if (node) quads.push(new _quad.default(node, this._x0, this._y0, this._x1, this._y1));

  while (q = quads.pop()) {
    if (!callback(node = q.node, x0 = q.x0, y0 = q.y0, x1 = q.x1, y1 = q.y1) && node.length) {
      var xm = (x0 + x1) / 2,
          ym = (y0 + y1) / 2;
      if (child = node[3]) quads.push(new _quad.default(child, xm, ym, x1, y1));
      if (child = node[2]) quads.push(new _quad.default(child, x0, ym, xm, y1));
      if (child = node[1]) quads.push(new _quad.default(child, xm, y0, x1, ym));
      if (child = node[0]) quads.push(new _quad.default(child, x0, y0, xm, ym));
    }
  }

  return this;
}
},{"./quad":"BPLw"}],"6Edv":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _quad = _interopRequireDefault(require("./quad"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(callback) {
  var quads = [],
      next = [],
      q;
  if (this._root) quads.push(new _quad.default(this._root, this._x0, this._y0, this._x1, this._y1));

  while (q = quads.pop()) {
    var node = q.node;

    if (node.length) {
      var child,
          x0 = q.x0,
          y0 = q.y0,
          x1 = q.x1,
          y1 = q.y1,
          xm = (x0 + x1) / 2,
          ym = (y0 + y1) / 2;
      if (child = node[0]) quads.push(new _quad.default(child, x0, y0, xm, ym));
      if (child = node[1]) quads.push(new _quad.default(child, xm, y0, x1, ym));
      if (child = node[2]) quads.push(new _quad.default(child, x0, ym, xm, y1));
      if (child = node[3]) quads.push(new _quad.default(child, xm, ym, x1, y1));
    }

    next.push(q);
  }

  while (q = next.pop()) {
    callback(q.node, q.x0, q.y0, q.x1, q.y1);
  }

  return this;
}
},{"./quad":"BPLw"}],"2+yq":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.defaultX = defaultX;
exports.default = _default;

function defaultX(d) {
  return d[0];
}

function _default(_) {
  return arguments.length ? (this._x = _, this) : this._x;
}
},{}],"FeNP":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.defaultY = defaultY;
exports.default = _default;

function defaultY(d) {
  return d[1];
}

function _default(_) {
  return arguments.length ? (this._y = _, this) : this._y;
}
},{}],"HCic":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = quadtree;

var _add = _interopRequireWildcard(require("./add"));

var _cover = _interopRequireDefault(require("./cover"));

var _data = _interopRequireDefault(require("./data"));

var _extent = _interopRequireDefault(require("./extent"));

var _find = _interopRequireDefault(require("./find"));

var _remove = _interopRequireWildcard(require("./remove"));

var _root = _interopRequireDefault(require("./root"));

var _size = _interopRequireDefault(require("./size"));

var _visit = _interopRequireDefault(require("./visit"));

var _visitAfter = _interopRequireDefault(require("./visitAfter"));

var _x = _interopRequireWildcard(require("./x"));

var _y = _interopRequireWildcard(require("./y"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function quadtree(nodes, x, y) {
  var tree = new Quadtree(x == null ? _x.defaultX : x, y == null ? _y.defaultY : y, NaN, NaN, NaN, NaN);
  return nodes == null ? tree : tree.addAll(nodes);
}

function Quadtree(x, y, x0, y0, x1, y1) {
  this._x = x;
  this._y = y;
  this._x0 = x0;
  this._y0 = y0;
  this._x1 = x1;
  this._y1 = y1;
  this._root = undefined;
}

function leaf_copy(leaf) {
  var copy = {
    data: leaf.data
  },
      next = copy;

  while (leaf = leaf.next) next = next.next = {
    data: leaf.data
  };

  return copy;
}

var treeProto = quadtree.prototype = Quadtree.prototype;

treeProto.copy = function () {
  var copy = new Quadtree(this._x, this._y, this._x0, this._y0, this._x1, this._y1),
      node = this._root,
      nodes,
      child;
  if (!node) return copy;
  if (!node.length) return copy._root = leaf_copy(node), copy;
  nodes = [{
    source: node,
    target: copy._root = new Array(4)
  }];

  while (node = nodes.pop()) {
    for (var i = 0; i < 4; ++i) {
      if (child = node.source[i]) {
        if (child.length) nodes.push({
          source: child,
          target: node.target[i] = new Array(4)
        });else node.target[i] = leaf_copy(child);
      }
    }
  }

  return copy;
};

treeProto.add = _add.default;
treeProto.addAll = _add.addAll;
treeProto.cover = _cover.default;
treeProto.data = _data.default;
treeProto.extent = _extent.default;
treeProto.find = _find.default;
treeProto.remove = _remove.default;
treeProto.removeAll = _remove.removeAll;
treeProto.root = _root.default;
treeProto.size = _size.default;
treeProto.visit = _visit.default;
treeProto.visitAfter = _visitAfter.default;
treeProto.x = _x.default;
treeProto.y = _y.default;
},{"./add":"c4hk","./cover":"DeJI","./data":"7HTB","./extent":"JRL4","./find":"2t1g","./remove":"3wnj","./root":"aU2q","./size":"PC8q","./visit":"MOvE","./visitAfter":"6Edv","./x":"2+yq","./y":"FeNP"}],"oxc3":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "quadtree", {
  enumerable: true,
  get: function () {
    return _quadtree.default;
  }
});

var _quadtree = _interopRequireDefault(require("./quadtree"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
},{"./quadtree":"HCic"}],"ZCSV":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _constant = _interopRequireDefault(require("./constant"));

var _jiggle = _interopRequireDefault(require("./jiggle"));

var _d3Quadtree = require("d3-quadtree");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function x(d) {
  return d.x + d.vx;
}

function y(d) {
  return d.y + d.vy;
}

function _default(radius) {
  var nodes,
      radii,
      strength = 1,
      iterations = 1;
  if (typeof radius !== "function") radius = (0, _constant.default)(radius == null ? 1 : +radius);

  function force() {
    var i,
        n = nodes.length,
        tree,
        node,
        xi,
        yi,
        ri,
        ri2;

    for (var k = 0; k < iterations; ++k) {
      tree = (0, _d3Quadtree.quadtree)(nodes, x, y).visitAfter(prepare);

      for (i = 0; i < n; ++i) {
        node = nodes[i];
        ri = radii[node.index], ri2 = ri * ri;
        xi = node.x + node.vx;
        yi = node.y + node.vy;
        tree.visit(apply);
      }
    }

    function apply(quad, x0, y0, x1, y1) {
      var data = quad.data,
          rj = quad.r,
          r = ri + rj;

      if (data) {
        if (data.index > node.index) {
          var x = xi - data.x - data.vx,
              y = yi - data.y - data.vy,
              l = x * x + y * y;

          if (l < r * r) {
            if (x === 0) x = (0, _jiggle.default)(), l += x * x;
            if (y === 0) y = (0, _jiggle.default)(), l += y * y;
            l = (r - (l = Math.sqrt(l))) / l * strength;
            node.vx += (x *= l) * (r = (rj *= rj) / (ri2 + rj));
            node.vy += (y *= l) * r;
            data.vx -= x * (r = 1 - r);
            data.vy -= y * r;
          }
        }

        return;
      }

      return x0 > xi + r || x1 < xi - r || y0 > yi + r || y1 < yi - r;
    }
  }

  function prepare(quad) {
    if (quad.data) return quad.r = radii[quad.data.index];

    for (var i = quad.r = 0; i < 4; ++i) {
      if (quad[i] && quad[i].r > quad.r) {
        quad.r = quad[i].r;
      }
    }
  }

  function initialize() {
    if (!nodes) return;
    var i,
        n = nodes.length,
        node;
    radii = new Array(n);

    for (i = 0; i < n; ++i) node = nodes[i], radii[node.index] = +radius(node, i, nodes);
  }

  force.initialize = function (_) {
    nodes = _;
    initialize();
  };

  force.iterations = function (_) {
    return arguments.length ? (iterations = +_, force) : iterations;
  };

  force.strength = function (_) {
    return arguments.length ? (strength = +_, force) : strength;
  };

  force.radius = function (_) {
    return arguments.length ? (radius = typeof _ === "function" ? _ : (0, _constant.default)(+_), initialize(), force) : radius;
  };

  return force;
}
},{"./constant":"5O/Y","./jiggle":"jmDl","d3-quadtree":"oxc3"}],"M788":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _constant = _interopRequireDefault(require("./constant"));

var _jiggle = _interopRequireDefault(require("./jiggle"));

var _d3Collection = require("d3-collection");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function index(d) {
  return d.index;
}

function find(nodeById, nodeId) {
  var node = nodeById.get(nodeId);
  if (!node) throw new Error("missing: " + nodeId);
  return node;
}

function _default(links) {
  var id = index,
      strength = defaultStrength,
      strengths,
      distance = (0, _constant.default)(30),
      distances,
      nodes,
      count,
      bias,
      iterations = 1;
  if (links == null) links = [];

  function defaultStrength(link) {
    return 1 / Math.min(count[link.source.index], count[link.target.index]);
  }

  function force(alpha) {
    for (var k = 0, n = links.length; k < iterations; ++k) {
      for (var i = 0, link, source, target, x, y, l, b; i < n; ++i) {
        link = links[i], source = link.source, target = link.target;
        x = target.x + target.vx - source.x - source.vx || (0, _jiggle.default)();
        y = target.y + target.vy - source.y - source.vy || (0, _jiggle.default)();
        l = Math.sqrt(x * x + y * y);
        l = (l - distances[i]) / l * alpha * strengths[i];
        x *= l, y *= l;
        target.vx -= x * (b = bias[i]);
        target.vy -= y * b;
        source.vx += x * (b = 1 - b);
        source.vy += y * b;
      }
    }
  }

  function initialize() {
    if (!nodes) return;
    var i,
        n = nodes.length,
        m = links.length,
        nodeById = (0, _d3Collection.map)(nodes, id),
        link;

    for (i = 0, count = new Array(n); i < m; ++i) {
      link = links[i], link.index = i;
      if (typeof link.source !== "object") link.source = find(nodeById, link.source);
      if (typeof link.target !== "object") link.target = find(nodeById, link.target);
      count[link.source.index] = (count[link.source.index] || 0) + 1;
      count[link.target.index] = (count[link.target.index] || 0) + 1;
    }

    for (i = 0, bias = new Array(m); i < m; ++i) {
      link = links[i], bias[i] = count[link.source.index] / (count[link.source.index] + count[link.target.index]);
    }

    strengths = new Array(m), initializeStrength();
    distances = new Array(m), initializeDistance();
  }

  function initializeStrength() {
    if (!nodes) return;

    for (var i = 0, n = links.length; i < n; ++i) {
      strengths[i] = +strength(links[i], i, links);
    }
  }

  function initializeDistance() {
    if (!nodes) return;

    for (var i = 0, n = links.length; i < n; ++i) {
      distances[i] = +distance(links[i], i, links);
    }
  }

  force.initialize = function (_) {
    nodes = _;
    initialize();
  };

  force.links = function (_) {
    return arguments.length ? (links = _, initialize(), force) : links;
  };

  force.id = function (_) {
    return arguments.length ? (id = _, force) : id;
  };

  force.iterations = function (_) {
    return arguments.length ? (iterations = +_, force) : iterations;
  };

  force.strength = function (_) {
    return arguments.length ? (strength = typeof _ === "function" ? _ : (0, _constant.default)(+_), initializeStrength(), force) : strength;
  };

  force.distance = function (_) {
    return arguments.length ? (distance = typeof _ === "function" ? _ : (0, _constant.default)(+_), initializeDistance(), force) : distance;
  };

  return force;
}
},{"./constant":"5O/Y","./jiggle":"jmDl","d3-collection":"qqV1"}],"lwF8":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.x = x;
exports.y = y;
exports.default = _default;

var _d3Dispatch = require("d3-dispatch");

var _d3Collection = require("d3-collection");

var _d3Timer = require("d3-timer");

function x(d) {
  return d.x;
}

function y(d) {
  return d.y;
}

var initialRadius = 10,
    initialAngle = Math.PI * (3 - Math.sqrt(5));

function _default(nodes) {
  var simulation,
      alpha = 1,
      alphaMin = 0.001,
      alphaDecay = 1 - Math.pow(alphaMin, 1 / 300),
      alphaTarget = 0,
      velocityDecay = 0.6,
      forces = (0, _d3Collection.map)(),
      stepper = (0, _d3Timer.timer)(step),
      event = (0, _d3Dispatch.dispatch)("tick", "end");
  if (nodes == null) nodes = [];

  function step() {
    tick();
    event.call("tick", simulation);

    if (alpha < alphaMin) {
      stepper.stop();
      event.call("end", simulation);
    }
  }

  function tick() {
    var i,
        n = nodes.length,
        node;
    alpha += (alphaTarget - alpha) * alphaDecay;
    forces.each(function (force) {
      force(alpha);
    });

    for (i = 0; i < n; ++i) {
      node = nodes[i];
      if (node.fx == null) node.x += node.vx *= velocityDecay;else node.x = node.fx, node.vx = 0;
      if (node.fy == null) node.y += node.vy *= velocityDecay;else node.y = node.fy, node.vy = 0;
    }
  }

  function initializeNodes() {
    for (var i = 0, n = nodes.length, node; i < n; ++i) {
      node = nodes[i], node.index = i;

      if (isNaN(node.x) || isNaN(node.y)) {
        var radius = initialRadius * Math.sqrt(i),
            angle = i * initialAngle;
        node.x = radius * Math.cos(angle);
        node.y = radius * Math.sin(angle);
      }

      if (isNaN(node.vx) || isNaN(node.vy)) {
        node.vx = node.vy = 0;
      }
    }
  }

  function initializeForce(force) {
    if (force.initialize) force.initialize(nodes);
    return force;
  }

  initializeNodes();
  return simulation = {
    tick: tick,
    restart: function () {
      return stepper.restart(step), simulation;
    },
    stop: function () {
      return stepper.stop(), simulation;
    },
    nodes: function (_) {
      return arguments.length ? (nodes = _, initializeNodes(), forces.each(initializeForce), simulation) : nodes;
    },
    alpha: function (_) {
      return arguments.length ? (alpha = +_, simulation) : alpha;
    },
    alphaMin: function (_) {
      return arguments.length ? (alphaMin = +_, simulation) : alphaMin;
    },
    alphaDecay: function (_) {
      return arguments.length ? (alphaDecay = +_, simulation) : +alphaDecay;
    },
    alphaTarget: function (_) {
      return arguments.length ? (alphaTarget = +_, simulation) : alphaTarget;
    },
    velocityDecay: function (_) {
      return arguments.length ? (velocityDecay = 1 - _, simulation) : 1 - velocityDecay;
    },
    force: function (name, _) {
      return arguments.length > 1 ? (_ == null ? forces.remove(name) : forces.set(name, initializeForce(_)), simulation) : forces.get(name);
    },
    find: function (x, y, radius) {
      var i = 0,
          n = nodes.length,
          dx,
          dy,
          d2,
          node,
          closest;
      if (radius == null) radius = Infinity;else radius *= radius;

      for (i = 0; i < n; ++i) {
        node = nodes[i];
        dx = x - node.x;
        dy = y - node.y;
        d2 = dx * dx + dy * dy;
        if (d2 < radius) closest = node, radius = d2;
      }

      return closest;
    },
    on: function (name, _) {
      return arguments.length > 1 ? (event.on(name, _), simulation) : event.on(name);
    }
  };
}
},{"d3-dispatch":"UU/c","d3-collection":"qqV1","d3-timer":"CBES"}],"cead":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _constant = _interopRequireDefault(require("./constant"));

var _jiggle = _interopRequireDefault(require("./jiggle"));

var _d3Quadtree = require("d3-quadtree");

var _simulation = require("./simulation");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default() {
  var nodes,
      node,
      alpha,
      strength = (0, _constant.default)(-30),
      strengths,
      distanceMin2 = 1,
      distanceMax2 = Infinity,
      theta2 = 0.81;

  function force(_) {
    var i,
        n = nodes.length,
        tree = (0, _d3Quadtree.quadtree)(nodes, _simulation.x, _simulation.y).visitAfter(accumulate);

    for (alpha = _, i = 0; i < n; ++i) node = nodes[i], tree.visit(apply);
  }

  function initialize() {
    if (!nodes) return;
    var i,
        n = nodes.length,
        node;
    strengths = new Array(n);

    for (i = 0; i < n; ++i) node = nodes[i], strengths[node.index] = +strength(node, i, nodes);
  }

  function accumulate(quad) {
    var strength = 0,
        q,
        c,
        weight = 0,
        x,
        y,
        i; // For internal nodes, accumulate forces from child quadrants.

    if (quad.length) {
      for (x = y = i = 0; i < 4; ++i) {
        if ((q = quad[i]) && (c = Math.abs(q.value))) {
          strength += q.value, weight += c, x += c * q.x, y += c * q.y;
        }
      }

      quad.x = x / weight;
      quad.y = y / weight;
    } // For leaf nodes, accumulate forces from coincident quadrants.
    else {
        q = quad;
        q.x = q.data.x;
        q.y = q.data.y;

        do strength += strengths[q.data.index]; while (q = q.next);
      }

    quad.value = strength;
  }

  function apply(quad, x1, _, x2) {
    if (!quad.value) return true;
    var x = quad.x - node.x,
        y = quad.y - node.y,
        w = x2 - x1,
        l = x * x + y * y; // Apply the Barnes-Hut approximation if possible.
    // Limit forces for very close nodes; randomize direction if coincident.

    if (w * w / theta2 < l) {
      if (l < distanceMax2) {
        if (x === 0) x = (0, _jiggle.default)(), l += x * x;
        if (y === 0) y = (0, _jiggle.default)(), l += y * y;
        if (l < distanceMin2) l = Math.sqrt(distanceMin2 * l);
        node.vx += x * quad.value * alpha / l;
        node.vy += y * quad.value * alpha / l;
      }

      return true;
    } // Otherwise, process points directly.
    else if (quad.length || l >= distanceMax2) return; // Limit forces for very close nodes; randomize direction if coincident.


    if (quad.data !== node || quad.next) {
      if (x === 0) x = (0, _jiggle.default)(), l += x * x;
      if (y === 0) y = (0, _jiggle.default)(), l += y * y;
      if (l < distanceMin2) l = Math.sqrt(distanceMin2 * l);
    }

    do if (quad.data !== node) {
      w = strengths[quad.data.index] * alpha / l;
      node.vx += x * w;
      node.vy += y * w;
    } while (quad = quad.next);
  }

  force.initialize = function (_) {
    nodes = _;
    initialize();
  };

  force.strength = function (_) {
    return arguments.length ? (strength = typeof _ === "function" ? _ : (0, _constant.default)(+_), initialize(), force) : strength;
  };

  force.distanceMin = function (_) {
    return arguments.length ? (distanceMin2 = _ * _, force) : Math.sqrt(distanceMin2);
  };

  force.distanceMax = function (_) {
    return arguments.length ? (distanceMax2 = _ * _, force) : Math.sqrt(distanceMax2);
  };

  force.theta = function (_) {
    return arguments.length ? (theta2 = _ * _, force) : Math.sqrt(theta2);
  };

  return force;
}
},{"./constant":"5O/Y","./jiggle":"jmDl","d3-quadtree":"oxc3","./simulation":"lwF8"}],"qX1S":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _constant = _interopRequireDefault(require("./constant"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(radius, x, y) {
  var nodes,
      strength = (0, _constant.default)(0.1),
      strengths,
      radiuses;
  if (typeof radius !== "function") radius = (0, _constant.default)(+radius);
  if (x == null) x = 0;
  if (y == null) y = 0;

  function force(alpha) {
    for (var i = 0, n = nodes.length; i < n; ++i) {
      var node = nodes[i],
          dx = node.x - x || 1e-6,
          dy = node.y - y || 1e-6,
          r = Math.sqrt(dx * dx + dy * dy),
          k = (radiuses[i] - r) * strengths[i] * alpha / r;
      node.vx += dx * k;
      node.vy += dy * k;
    }
  }

  function initialize() {
    if (!nodes) return;
    var i,
        n = nodes.length;
    strengths = new Array(n);
    radiuses = new Array(n);

    for (i = 0; i < n; ++i) {
      radiuses[i] = +radius(nodes[i], i, nodes);
      strengths[i] = isNaN(radiuses[i]) ? 0 : +strength(nodes[i], i, nodes);
    }
  }

  force.initialize = function (_) {
    nodes = _, initialize();
  };

  force.strength = function (_) {
    return arguments.length ? (strength = typeof _ === "function" ? _ : (0, _constant.default)(+_), initialize(), force) : strength;
  };

  force.radius = function (_) {
    return arguments.length ? (radius = typeof _ === "function" ? _ : (0, _constant.default)(+_), initialize(), force) : radius;
  };

  force.x = function (_) {
    return arguments.length ? (x = +_, force) : x;
  };

  force.y = function (_) {
    return arguments.length ? (y = +_, force) : y;
  };

  return force;
}
},{"./constant":"5O/Y"}],"AO2h":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _constant = _interopRequireDefault(require("./constant"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(x) {
  var strength = (0, _constant.default)(0.1),
      nodes,
      strengths,
      xz;
  if (typeof x !== "function") x = (0, _constant.default)(x == null ? 0 : +x);

  function force(alpha) {
    for (var i = 0, n = nodes.length, node; i < n; ++i) {
      node = nodes[i], node.vx += (xz[i] - node.x) * strengths[i] * alpha;
    }
  }

  function initialize() {
    if (!nodes) return;
    var i,
        n = nodes.length;
    strengths = new Array(n);
    xz = new Array(n);

    for (i = 0; i < n; ++i) {
      strengths[i] = isNaN(xz[i] = +x(nodes[i], i, nodes)) ? 0 : +strength(nodes[i], i, nodes);
    }
  }

  force.initialize = function (_) {
    nodes = _;
    initialize();
  };

  force.strength = function (_) {
    return arguments.length ? (strength = typeof _ === "function" ? _ : (0, _constant.default)(+_), initialize(), force) : strength;
  };

  force.x = function (_) {
    return arguments.length ? (x = typeof _ === "function" ? _ : (0, _constant.default)(+_), initialize(), force) : x;
  };

  return force;
}
},{"./constant":"5O/Y"}],"9SU+":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _constant = _interopRequireDefault(require("./constant"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(y) {
  var strength = (0, _constant.default)(0.1),
      nodes,
      strengths,
      yz;
  if (typeof y !== "function") y = (0, _constant.default)(y == null ? 0 : +y);

  function force(alpha) {
    for (var i = 0, n = nodes.length, node; i < n; ++i) {
      node = nodes[i], node.vy += (yz[i] - node.y) * strengths[i] * alpha;
    }
  }

  function initialize() {
    if (!nodes) return;
    var i,
        n = nodes.length;
    strengths = new Array(n);
    yz = new Array(n);

    for (i = 0; i < n; ++i) {
      strengths[i] = isNaN(yz[i] = +y(nodes[i], i, nodes)) ? 0 : +strength(nodes[i], i, nodes);
    }
  }

  force.initialize = function (_) {
    nodes = _;
    initialize();
  };

  force.strength = function (_) {
    return arguments.length ? (strength = typeof _ === "function" ? _ : (0, _constant.default)(+_), initialize(), force) : strength;
  };

  force.y = function (_) {
    return arguments.length ? (y = typeof _ === "function" ? _ : (0, _constant.default)(+_), initialize(), force) : y;
  };

  return force;
}
},{"./constant":"5O/Y"}],"YpA1":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "forceCenter", {
  enumerable: true,
  get: function () {
    return _center.default;
  }
});
Object.defineProperty(exports, "forceCollide", {
  enumerable: true,
  get: function () {
    return _collide.default;
  }
});
Object.defineProperty(exports, "forceLink", {
  enumerable: true,
  get: function () {
    return _link.default;
  }
});
Object.defineProperty(exports, "forceManyBody", {
  enumerable: true,
  get: function () {
    return _manyBody.default;
  }
});
Object.defineProperty(exports, "forceRadial", {
  enumerable: true,
  get: function () {
    return _radial.default;
  }
});
Object.defineProperty(exports, "forceSimulation", {
  enumerable: true,
  get: function () {
    return _simulation.default;
  }
});
Object.defineProperty(exports, "forceX", {
  enumerable: true,
  get: function () {
    return _x.default;
  }
});
Object.defineProperty(exports, "forceY", {
  enumerable: true,
  get: function () {
    return _y.default;
  }
});

var _center = _interopRequireDefault(require("./center"));

var _collide = _interopRequireDefault(require("./collide"));

var _link = _interopRequireDefault(require("./link"));

var _manyBody = _interopRequireDefault(require("./manyBody"));

var _radial = _interopRequireDefault(require("./radial"));

var _simulation = _interopRequireDefault(require("./simulation"));

var _x = _interopRequireDefault(require("./x"));

var _y = _interopRequireDefault(require("./y"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
},{"./center":"y+F4","./collide":"ZCSV","./link":"M788","./manyBody":"cead","./radial":"qX1S","./simulation":"lwF8","./x":"AO2h","./y":"9SU+"}],"c+Jh":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

// Computes the decimal coefficient and exponent of the specified number x with
// significant digits p, where x is positive and p is in [1, 21] or undefined.
// For example, formatDecimal(1.23) returns ["123", 0].
function _default(x, p) {
  if ((i = (x = p ? x.toExponential(p - 1) : x.toExponential()).indexOf("e")) < 0) return null; // NaN, ±Infinity

  var i,
      coefficient = x.slice(0, i); // The string returned by toExponential either has the form \d\.\d+e[-+]\d+
  // (e.g., 1.2e+3) or the form \de[-+]\d+ (e.g., 1e+3).

  return [coefficient.length > 1 ? coefficient[0] + coefficient.slice(2) : coefficient, +x.slice(i + 1)];
}
},{}],"m3FQ":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _formatDecimal = _interopRequireDefault(require("./formatDecimal"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(x) {
  return x = (0, _formatDecimal.default)(Math.abs(x)), x ? x[1] : NaN;
}
},{"./formatDecimal":"c+Jh"}],"e1cc":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(grouping, thousands) {
  return function (value, width) {
    var i = value.length,
        t = [],
        j = 0,
        g = grouping[0],
        length = 0;

    while (i > 0 && g > 0) {
      if (length + g + 1 > width) g = Math.max(1, width - length);
      t.push(value.substring(i -= g, i + g));
      if ((length += g + 1) > width) break;
      g = grouping[j = (j + 1) % grouping.length];
    }

    return t.reverse().join(thousands);
  };
}
},{}],"Wswx":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(numerals) {
  return function (value) {
    return value.replace(/[0-9]/g, function (i) {
      return numerals[+i];
    });
  };
}
},{}],"gePe":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = formatSpecifier;
// [[fill]align][sign][symbol][0][width][,][.precision][~][type]
var re = /^(?:(.)?([<>=^]))?([+\-( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?(~)?([a-z%])?$/i;

function formatSpecifier(specifier) {
  return new FormatSpecifier(specifier);
}

formatSpecifier.prototype = FormatSpecifier.prototype; // instanceof

function FormatSpecifier(specifier) {
  if (!(match = re.exec(specifier))) throw new Error("invalid format: " + specifier);
  var match;
  this.fill = match[1] || " ";
  this.align = match[2] || ">";
  this.sign = match[3] || "-";
  this.symbol = match[4] || "";
  this.zero = !!match[5];
  this.width = match[6] && +match[6];
  this.comma = !!match[7];
  this.precision = match[8] && +match[8].slice(1);
  this.trim = !!match[9];
  this.type = match[10] || "";
}

FormatSpecifier.prototype.toString = function () {
  return this.fill + this.align + this.sign + this.symbol + (this.zero ? "0" : "") + (this.width == null ? "" : Math.max(1, this.width | 0)) + (this.comma ? "," : "") + (this.precision == null ? "" : "." + Math.max(0, this.precision | 0)) + (this.trim ? "~" : "") + this.type;
};
},{}],"dWsa":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

// Trims insignificant zeros, e.g., replaces 1.2000k with 1.2k.
function _default(s) {
  out: for (var n = s.length, i = 1, i0 = -1, i1; i < n; ++i) {
    switch (s[i]) {
      case ".":
        i0 = i1 = i;
        break;

      case "0":
        if (i0 === 0) i0 = i;
        i1 = i;
        break;

      default:
        if (i0 > 0) {
          if (!+s[i]) break out;
          i0 = 0;
        }

        break;
    }
  }

  return i0 > 0 ? s.slice(0, i0) + s.slice(i1 + 1) : s;
}
},{}],"KTGF":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;
exports.prefixExponent = void 0;

var _formatDecimal = _interopRequireDefault(require("./formatDecimal"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var prefixExponent;
exports.prefixExponent = prefixExponent;

function _default(x, p) {
  var d = (0, _formatDecimal.default)(x, p);
  if (!d) return x + "";
  var coefficient = d[0],
      exponent = d[1],
      i = exponent - (exports.prefixExponent = prefixExponent = Math.max(-8, Math.min(8, Math.floor(exponent / 3))) * 3) + 1,
      n = coefficient.length;
  return i === n ? coefficient : i > n ? coefficient + new Array(i - n + 1).join("0") : i > 0 ? coefficient.slice(0, i) + "." + coefficient.slice(i) : "0." + new Array(1 - i).join("0") + (0, _formatDecimal.default)(x, Math.max(0, p + i - 1))[0]; // less than 1y!
}
},{"./formatDecimal":"c+Jh"}],"e8g/":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _formatDecimal = _interopRequireDefault(require("./formatDecimal"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(x, p) {
  var d = (0, _formatDecimal.default)(x, p);
  if (!d) return x + "";
  var coefficient = d[0],
      exponent = d[1];
  return exponent < 0 ? "0." + new Array(-exponent).join("0") + coefficient : coefficient.length > exponent + 1 ? coefficient.slice(0, exponent + 1) + "." + coefficient.slice(exponent + 1) : coefficient + new Array(exponent - coefficient.length + 2).join("0");
}
},{"./formatDecimal":"c+Jh"}],"uFUO":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _formatPrefixAuto = _interopRequireDefault(require("./formatPrefixAuto"));

var _formatRounded = _interopRequireDefault(require("./formatRounded"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _default = {
  "%": function (x, p) {
    return (x * 100).toFixed(p);
  },
  "b": function (x) {
    return Math.round(x).toString(2);
  },
  "c": function (x) {
    return x + "";
  },
  "d": function (x) {
    return Math.round(x).toString(10);
  },
  "e": function (x, p) {
    return x.toExponential(p);
  },
  "f": function (x, p) {
    return x.toFixed(p);
  },
  "g": function (x, p) {
    return x.toPrecision(p);
  },
  "o": function (x) {
    return Math.round(x).toString(8);
  },
  "p": function (x, p) {
    return (0, _formatRounded.default)(x * 100, p);
  },
  "r": _formatRounded.default,
  "s": _formatPrefixAuto.default,
  "X": function (x) {
    return Math.round(x).toString(16).toUpperCase();
  },
  "x": function (x) {
    return Math.round(x).toString(16);
  }
};
exports.default = _default;
},{"./formatPrefixAuto":"KTGF","./formatRounded":"e8g/"}],"QWQX":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _exponent = _interopRequireDefault(require("./exponent"));

var _formatGroup = _interopRequireDefault(require("./formatGroup"));

var _formatNumerals = _interopRequireDefault(require("./formatNumerals"));

var _formatSpecifier = _interopRequireDefault(require("./formatSpecifier"));

var _formatTrim = _interopRequireDefault(require("./formatTrim"));

var _formatTypes = _interopRequireDefault(require("./formatTypes"));

var _formatPrefixAuto = require("./formatPrefixAuto");

var _identity = _interopRequireDefault(require("./identity"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var prefixes = ["y", "z", "a", "f", "p", "n", "µ", "m", "", "k", "M", "G", "T", "P", "E", "Z", "Y"];

function _default(locale) {
  var group = locale.grouping && locale.thousands ? (0, _formatGroup.default)(locale.grouping, locale.thousands) : _identity.default,
      currency = locale.currency,
      decimal = locale.decimal,
      numerals = locale.numerals ? (0, _formatNumerals.default)(locale.numerals) : _identity.default,
      percent = locale.percent || "%";

  function newFormat(specifier) {
    specifier = (0, _formatSpecifier.default)(specifier);
    var fill = specifier.fill,
        align = specifier.align,
        sign = specifier.sign,
        symbol = specifier.symbol,
        zero = specifier.zero,
        width = specifier.width,
        comma = specifier.comma,
        precision = specifier.precision,
        trim = specifier.trim,
        type = specifier.type; // The "n" type is an alias for ",g".

    if (type === "n") comma = true, type = "g"; // The "" type, and any invalid type, is an alias for ".12~g".
    else if (!_formatTypes.default[type]) precision == null && (precision = 12), trim = true, type = "g"; // If zero fill is specified, padding goes after sign and before digits.

    if (zero || fill === "0" && align === "=") zero = true, fill = "0", align = "="; // Compute the prefix and suffix.
    // For SI-prefix, the suffix is lazily computed.

    var prefix = symbol === "$" ? currency[0] : symbol === "#" && /[boxX]/.test(type) ? "0" + type.toLowerCase() : "",
        suffix = symbol === "$" ? currency[1] : /[%p]/.test(type) ? percent : ""; // What format function should we use?
    // Is this an integer type?
    // Can this type generate exponential notation?

    var formatType = _formatTypes.default[type],
        maybeSuffix = /[defgprs%]/.test(type); // Set the default precision if not specified,
    // or clamp the specified precision to the supported range.
    // For significant precision, it must be in [1, 21].
    // For fixed precision, it must be in [0, 20].

    precision = precision == null ? 6 : /[gprs]/.test(type) ? Math.max(1, Math.min(21, precision)) : Math.max(0, Math.min(20, precision));

    function format(value) {
      var valuePrefix = prefix,
          valueSuffix = suffix,
          i,
          n,
          c;

      if (type === "c") {
        valueSuffix = formatType(value) + valueSuffix;
        value = "";
      } else {
        value = +value; // Perform the initial formatting.

        var valueNegative = value < 0;
        value = formatType(Math.abs(value), precision); // Trim insignificant zeros.

        if (trim) value = (0, _formatTrim.default)(value); // If a negative value rounds to zero during formatting, treat as positive.

        if (valueNegative && +value === 0) valueNegative = false; // Compute the prefix and suffix.

        valuePrefix = (valueNegative ? sign === "(" ? sign : "-" : sign === "-" || sign === "(" ? "" : sign) + valuePrefix;
        valueSuffix = (type === "s" ? prefixes[8 + _formatPrefixAuto.prefixExponent / 3] : "") + valueSuffix + (valueNegative && sign === "(" ? ")" : ""); // Break the formatted value into the integer “value” part that can be
        // grouped, and fractional or exponential “suffix” part that is not.

        if (maybeSuffix) {
          i = -1, n = value.length;

          while (++i < n) {
            if (c = value.charCodeAt(i), 48 > c || c > 57) {
              valueSuffix = (c === 46 ? decimal + value.slice(i + 1) : value.slice(i)) + valueSuffix;
              value = value.slice(0, i);
              break;
            }
          }
        }
      } // If the fill character is not "0", grouping is applied before padding.


      if (comma && !zero) value = group(value, Infinity); // Compute the padding.

      var length = valuePrefix.length + value.length + valueSuffix.length,
          padding = length < width ? new Array(width - length + 1).join(fill) : ""; // If the fill character is "0", grouping is applied after padding.

      if (comma && zero) value = group(padding + value, padding.length ? width - valueSuffix.length : Infinity), padding = ""; // Reconstruct the final output based on the desired alignment.

      switch (align) {
        case "<":
          value = valuePrefix + value + valueSuffix + padding;
          break;

        case "=":
          value = valuePrefix + padding + value + valueSuffix;
          break;

        case "^":
          value = padding.slice(0, length = padding.length >> 1) + valuePrefix + value + valueSuffix + padding.slice(length);
          break;

        default:
          value = padding + valuePrefix + value + valueSuffix;
          break;
      }

      return numerals(value);
    }

    format.toString = function () {
      return specifier + "";
    };

    return format;
  }

  function formatPrefix(specifier, value) {
    var f = newFormat((specifier = (0, _formatSpecifier.default)(specifier), specifier.type = "f", specifier)),
        e = Math.max(-8, Math.min(8, Math.floor((0, _exponent.default)(value) / 3))) * 3,
        k = Math.pow(10, -e),
        prefix = prefixes[8 + e / 3];
    return function (value) {
      return f(k * value) + prefix;
    };
  }

  return {
    format: newFormat,
    formatPrefix: formatPrefix
  };
}
},{"./exponent":"m3FQ","./formatGroup":"e1cc","./formatNumerals":"Wswx","./formatSpecifier":"gePe","./formatTrim":"dWsa","./formatTypes":"uFUO","./formatPrefixAuto":"KTGF","./identity":"nPOL"}],"y/m0":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = defaultLocale;
exports.formatPrefix = exports.format = void 0;

var _locale = _interopRequireDefault(require("./locale"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var locale;
var format;
exports.format = format;
var formatPrefix;
exports.formatPrefix = formatPrefix;
defaultLocale({
  decimal: ".",
  thousands: ",",
  grouping: [3],
  currency: ["$", ""]
});

function defaultLocale(definition) {
  locale = (0, _locale.default)(definition);
  exports.format = format = locale.format;
  exports.formatPrefix = formatPrefix = locale.formatPrefix;
  return locale;
}
},{"./locale":"QWQX"}],"QL8u":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _exponent = _interopRequireDefault(require("./exponent"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(step) {
  return Math.max(0, -(0, _exponent.default)(Math.abs(step)));
}
},{"./exponent":"m3FQ"}],"DzQJ":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _exponent = _interopRequireDefault(require("./exponent"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(step, value) {
  return Math.max(0, Math.max(-8, Math.min(8, Math.floor((0, _exponent.default)(value) / 3))) * 3 - (0, _exponent.default)(Math.abs(step)));
}
},{"./exponent":"m3FQ"}],"4afb":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _exponent = _interopRequireDefault(require("./exponent"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(step, max) {
  step = Math.abs(step), max = Math.abs(max) - step;
  return Math.max(0, (0, _exponent.default)(max) - (0, _exponent.default)(step)) + 1;
}
},{"./exponent":"m3FQ"}],"4gWe":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "formatDefaultLocale", {
  enumerable: true,
  get: function () {
    return _defaultLocale.default;
  }
});
Object.defineProperty(exports, "format", {
  enumerable: true,
  get: function () {
    return _defaultLocale.format;
  }
});
Object.defineProperty(exports, "formatPrefix", {
  enumerable: true,
  get: function () {
    return _defaultLocale.formatPrefix;
  }
});
Object.defineProperty(exports, "formatLocale", {
  enumerable: true,
  get: function () {
    return _locale.default;
  }
});
Object.defineProperty(exports, "formatSpecifier", {
  enumerable: true,
  get: function () {
    return _formatSpecifier.default;
  }
});
Object.defineProperty(exports, "precisionFixed", {
  enumerable: true,
  get: function () {
    return _precisionFixed.default;
  }
});
Object.defineProperty(exports, "precisionPrefix", {
  enumerable: true,
  get: function () {
    return _precisionPrefix.default;
  }
});
Object.defineProperty(exports, "precisionRound", {
  enumerable: true,
  get: function () {
    return _precisionRound.default;
  }
});

var _defaultLocale = _interopRequireWildcard(require("./defaultLocale"));

var _locale = _interopRequireDefault(require("./locale"));

var _formatSpecifier = _interopRequireDefault(require("./formatSpecifier"));

var _precisionFixed = _interopRequireDefault(require("./precisionFixed"));

var _precisionPrefix = _interopRequireDefault(require("./precisionPrefix"));

var _precisionRound = _interopRequireDefault(require("./precisionRound"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }
},{"./defaultLocale":"y/m0","./locale":"QWQX","./formatSpecifier":"gePe","./precisionFixed":"QL8u","./precisionPrefix":"DzQJ","./precisionRound":"4afb"}],"GlqK":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

// Adds floating point numbers with twice the normal precision.
// Reference: J. R. Shewchuk, Adaptive Precision Floating-Point Arithmetic and
// Fast Robust Geometric Predicates, Discrete & Computational Geometry 18(3)
// 305–363 (1997).
// Code adapted from GeographicLib by Charles F. F. Karney,
// http://geographiclib.sourceforge.net/
function _default() {
  return new Adder();
}

function Adder() {
  this.reset();
}

Adder.prototype = {
  constructor: Adder,
  reset: function () {
    this.s = // rounded value
    this.t = 0; // exact error
  },
  add: function (y) {
    add(temp, y, this.t);
    add(this, temp.s, this.s);
    if (this.s) this.t += temp.t;else this.s = temp.t;
  },
  valueOf: function () {
    return this.s;
  }
};
var temp = new Adder();

function add(adder, a, b) {
  var x = adder.s = a + b,
      bv = x - a,
      av = x - bv;
  adder.t = a - av + (b - bv);
}
},{}],"sEgP":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.acos = acos;
exports.asin = asin;
exports.haversin = haversin;
exports.tan = exports.sqrt = exports.sign = exports.sin = exports.pow = exports.log = exports.floor = exports.exp = exports.ceil = exports.cos = exports.atan2 = exports.atan = exports.abs = exports.radians = exports.degrees = exports.tau = exports.quarterPi = exports.halfPi = exports.pi = exports.epsilon2 = exports.epsilon = void 0;
var epsilon = 1e-6;
exports.epsilon = epsilon;
var epsilon2 = 1e-12;
exports.epsilon2 = epsilon2;
var pi = Math.PI;
exports.pi = pi;
var halfPi = pi / 2;
exports.halfPi = halfPi;
var quarterPi = pi / 4;
exports.quarterPi = quarterPi;
var tau = pi * 2;
exports.tau = tau;
var degrees = 180 / pi;
exports.degrees = degrees;
var radians = pi / 180;
exports.radians = radians;
var abs = Math.abs;
exports.abs = abs;
var atan = Math.atan;
exports.atan = atan;
var atan2 = Math.atan2;
exports.atan2 = atan2;
var cos = Math.cos;
exports.cos = cos;
var ceil = Math.ceil;
exports.ceil = ceil;
var exp = Math.exp;
exports.exp = exp;
var floor = Math.floor;
exports.floor = floor;
var log = Math.log;
exports.log = log;
var pow = Math.pow;
exports.pow = pow;
var sin = Math.sin;
exports.sin = sin;

var sign = Math.sign || function (x) {
  return x > 0 ? 1 : x < 0 ? -1 : 0;
};

exports.sign = sign;
var sqrt = Math.sqrt;
exports.sqrt = sqrt;
var tan = Math.tan;
exports.tan = tan;

function acos(x) {
  return x > 1 ? 0 : x < -1 ? pi : Math.acos(x);
}

function asin(x) {
  return x > 1 ? halfPi : x < -1 ? -halfPi : Math.asin(x);
}

function haversin(x) {
  return (x = sin(x / 2)) * x;
}
},{}],"UPwg":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = noop;

function noop() {}
},{}],"XBFK":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function streamGeometry(geometry, stream) {
  if (geometry && streamGeometryType.hasOwnProperty(geometry.type)) {
    streamGeometryType[geometry.type](geometry, stream);
  }
}

var streamObjectType = {
  Feature: function (object, stream) {
    streamGeometry(object.geometry, stream);
  },
  FeatureCollection: function (object, stream) {
    var features = object.features,
        i = -1,
        n = features.length;

    while (++i < n) streamGeometry(features[i].geometry, stream);
  }
};
var streamGeometryType = {
  Sphere: function (object, stream) {
    stream.sphere();
  },
  Point: function (object, stream) {
    object = object.coordinates;
    stream.point(object[0], object[1], object[2]);
  },
  MultiPoint: function (object, stream) {
    var coordinates = object.coordinates,
        i = -1,
        n = coordinates.length;

    while (++i < n) object = coordinates[i], stream.point(object[0], object[1], object[2]);
  },
  LineString: function (object, stream) {
    streamLine(object.coordinates, stream, 0);
  },
  MultiLineString: function (object, stream) {
    var coordinates = object.coordinates,
        i = -1,
        n = coordinates.length;

    while (++i < n) streamLine(coordinates[i], stream, 0);
  },
  Polygon: function (object, stream) {
    streamPolygon(object.coordinates, stream);
  },
  MultiPolygon: function (object, stream) {
    var coordinates = object.coordinates,
        i = -1,
        n = coordinates.length;

    while (++i < n) streamPolygon(coordinates[i], stream);
  },
  GeometryCollection: function (object, stream) {
    var geometries = object.geometries,
        i = -1,
        n = geometries.length;

    while (++i < n) streamGeometry(geometries[i], stream);
  }
};

function streamLine(coordinates, stream, closed) {
  var i = -1,
      n = coordinates.length - closed,
      coordinate;
  stream.lineStart();

  while (++i < n) coordinate = coordinates[i], stream.point(coordinate[0], coordinate[1], coordinate[2]);

  stream.lineEnd();
}

function streamPolygon(coordinates, stream) {
  var i = -1,
      n = coordinates.length;
  stream.polygonStart();

  while (++i < n) streamLine(coordinates[i], stream, 1);

  stream.polygonEnd();
}

function _default(object, stream) {
  if (object && streamObjectType.hasOwnProperty(object.type)) {
    streamObjectType[object.type](object, stream);
  } else {
    streamGeometry(object, stream);
  }
}
},{}],"dpXv":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;
exports.areaStream = exports.areaRingSum = void 0;

var _adder = _interopRequireDefault(require("./adder"));

var _math = require("./math");

var _noop = _interopRequireDefault(require("./noop"));

var _stream = _interopRequireDefault(require("./stream"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var areaRingSum = (0, _adder.default)();
exports.areaRingSum = areaRingSum;
var areaSum = (0, _adder.default)(),
    lambda00,
    phi00,
    lambda0,
    cosPhi0,
    sinPhi0;
var areaStream = {
  point: _noop.default,
  lineStart: _noop.default,
  lineEnd: _noop.default,
  polygonStart: function () {
    areaRingSum.reset();
    areaStream.lineStart = areaRingStart;
    areaStream.lineEnd = areaRingEnd;
  },
  polygonEnd: function () {
    var areaRing = +areaRingSum;
    areaSum.add(areaRing < 0 ? _math.tau + areaRing : areaRing);
    this.lineStart = this.lineEnd = this.point = _noop.default;
  },
  sphere: function () {
    areaSum.add(_math.tau);
  }
};
exports.areaStream = areaStream;

function areaRingStart() {
  areaStream.point = areaPointFirst;
}

function areaRingEnd() {
  areaPoint(lambda00, phi00);
}

function areaPointFirst(lambda, phi) {
  areaStream.point = areaPoint;
  lambda00 = lambda, phi00 = phi;
  lambda *= _math.radians, phi *= _math.radians;
  lambda0 = lambda, cosPhi0 = (0, _math.cos)(phi = phi / 2 + _math.quarterPi), sinPhi0 = (0, _math.sin)(phi);
}

function areaPoint(lambda, phi) {
  lambda *= _math.radians, phi *= _math.radians;
  phi = phi / 2 + _math.quarterPi; // half the angular distance from south pole
  // Spherical excess E for a spherical triangle with vertices: south pole,
  // previous point, current point.  Uses a formula derived from Cagnoli’s
  // theorem.  See Todhunter, Spherical Trig. (1871), Sec. 103, Eq. (2).

  var dLambda = lambda - lambda0,
      sdLambda = dLambda >= 0 ? 1 : -1,
      adLambda = sdLambda * dLambda,
      cosPhi = (0, _math.cos)(phi),
      sinPhi = (0, _math.sin)(phi),
      k = sinPhi0 * sinPhi,
      u = cosPhi0 * cosPhi + k * (0, _math.cos)(adLambda),
      v = k * sdLambda * (0, _math.sin)(adLambda);
  areaRingSum.add((0, _math.atan2)(v, u)); // Advance the previous points.

  lambda0 = lambda, cosPhi0 = cosPhi, sinPhi0 = sinPhi;
}

function _default(object) {
  areaSum.reset();
  (0, _stream.default)(object, areaStream);
  return areaSum * 2;
}
},{"./adder":"GlqK","./math":"sEgP","./noop":"UPwg","./stream":"XBFK"}],"+rFM":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.spherical = spherical;
exports.cartesian = cartesian;
exports.cartesianDot = cartesianDot;
exports.cartesianCross = cartesianCross;
exports.cartesianAddInPlace = cartesianAddInPlace;
exports.cartesianScale = cartesianScale;
exports.cartesianNormalizeInPlace = cartesianNormalizeInPlace;

var _math = require("./math");

function spherical(cartesian) {
  return [(0, _math.atan2)(cartesian[1], cartesian[0]), (0, _math.asin)(cartesian[2])];
}

function cartesian(spherical) {
  var lambda = spherical[0],
      phi = spherical[1],
      cosPhi = (0, _math.cos)(phi);
  return [cosPhi * (0, _math.cos)(lambda), cosPhi * (0, _math.sin)(lambda), (0, _math.sin)(phi)];
}

function cartesianDot(a, b) {
  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
}

function cartesianCross(a, b) {
  return [a[1] * b[2] - a[2] * b[1], a[2] * b[0] - a[0] * b[2], a[0] * b[1] - a[1] * b[0]];
} // TODO return a


function cartesianAddInPlace(a, b) {
  a[0] += b[0], a[1] += b[1], a[2] += b[2];
}

function cartesianScale(vector, k) {
  return [vector[0] * k, vector[1] * k, vector[2] * k];
} // TODO return d


function cartesianNormalizeInPlace(d) {
  var l = (0, _math.sqrt)(d[0] * d[0] + d[1] * d[1] + d[2] * d[2]);
  d[0] /= l, d[1] /= l, d[2] /= l;
}
},{"./math":"sEgP"}],"4wXR":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _adder = _interopRequireDefault(require("./adder"));

var _area = require("./area");

var _cartesian = require("./cartesian");

var _math = require("./math");

var _stream = _interopRequireDefault(require("./stream"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var lambda0,
    phi0,
    lambda1,
    phi1,
    // bounds
lambda2,
    // previous lambda-coordinate
lambda00,
    phi00,
    // first point
p0,
    // previous 3D point
deltaSum = (0, _adder.default)(),
    ranges,
    range;
var boundsStream = {
  point: boundsPoint,
  lineStart: boundsLineStart,
  lineEnd: boundsLineEnd,
  polygonStart: function () {
    boundsStream.point = boundsRingPoint;
    boundsStream.lineStart = boundsRingStart;
    boundsStream.lineEnd = boundsRingEnd;
    deltaSum.reset();

    _area.areaStream.polygonStart();
  },
  polygonEnd: function () {
    _area.areaStream.polygonEnd();

    boundsStream.point = boundsPoint;
    boundsStream.lineStart = boundsLineStart;
    boundsStream.lineEnd = boundsLineEnd;
    if (_area.areaRingSum < 0) lambda0 = -(lambda1 = 180), phi0 = -(phi1 = 90);else if (deltaSum > _math.epsilon) phi1 = 90;else if (deltaSum < -_math.epsilon) phi0 = -90;
    range[0] = lambda0, range[1] = lambda1;
  }
};

function boundsPoint(lambda, phi) {
  ranges.push(range = [lambda0 = lambda, lambda1 = lambda]);
  if (phi < phi0) phi0 = phi;
  if (phi > phi1) phi1 = phi;
}

function linePoint(lambda, phi) {
  var p = (0, _cartesian.cartesian)([lambda * _math.radians, phi * _math.radians]);

  if (p0) {
    var normal = (0, _cartesian.cartesianCross)(p0, p),
        equatorial = [normal[1], -normal[0], 0],
        inflection = (0, _cartesian.cartesianCross)(equatorial, normal);
    (0, _cartesian.cartesianNormalizeInPlace)(inflection);
    inflection = (0, _cartesian.spherical)(inflection);
    var delta = lambda - lambda2,
        sign = delta > 0 ? 1 : -1,
        lambdai = inflection[0] * _math.degrees * sign,
        phii,
        antimeridian = (0, _math.abs)(delta) > 180;

    if (antimeridian ^ (sign * lambda2 < lambdai && lambdai < sign * lambda)) {
      phii = inflection[1] * _math.degrees;
      if (phii > phi1) phi1 = phii;
    } else if (lambdai = (lambdai + 360) % 360 - 180, antimeridian ^ (sign * lambda2 < lambdai && lambdai < sign * lambda)) {
      phii = -inflection[1] * _math.degrees;
      if (phii < phi0) phi0 = phii;
    } else {
      if (phi < phi0) phi0 = phi;
      if (phi > phi1) phi1 = phi;
    }

    if (antimeridian) {
      if (lambda < lambda2) {
        if (angle(lambda0, lambda) > angle(lambda0, lambda1)) lambda1 = lambda;
      } else {
        if (angle(lambda, lambda1) > angle(lambda0, lambda1)) lambda0 = lambda;
      }
    } else {
      if (lambda1 >= lambda0) {
        if (lambda < lambda0) lambda0 = lambda;
        if (lambda > lambda1) lambda1 = lambda;
      } else {
        if (lambda > lambda2) {
          if (angle(lambda0, lambda) > angle(lambda0, lambda1)) lambda1 = lambda;
        } else {
          if (angle(lambda, lambda1) > angle(lambda0, lambda1)) lambda0 = lambda;
        }
      }
    }
  } else {
    ranges.push(range = [lambda0 = lambda, lambda1 = lambda]);
  }

  if (phi < phi0) phi0 = phi;
  if (phi > phi1) phi1 = phi;
  p0 = p, lambda2 = lambda;
}

function boundsLineStart() {
  boundsStream.point = linePoint;
}

function boundsLineEnd() {
  range[0] = lambda0, range[1] = lambda1;
  boundsStream.point = boundsPoint;
  p0 = null;
}

function boundsRingPoint(lambda, phi) {
  if (p0) {
    var delta = lambda - lambda2;
    deltaSum.add((0, _math.abs)(delta) > 180 ? delta + (delta > 0 ? 360 : -360) : delta);
  } else {
    lambda00 = lambda, phi00 = phi;
  }

  _area.areaStream.point(lambda, phi);

  linePoint(lambda, phi);
}

function boundsRingStart() {
  _area.areaStream.lineStart();
}

function boundsRingEnd() {
  boundsRingPoint(lambda00, phi00);

  _area.areaStream.lineEnd();

  if ((0, _math.abs)(deltaSum) > _math.epsilon) lambda0 = -(lambda1 = 180);
  range[0] = lambda0, range[1] = lambda1;
  p0 = null;
} // Finds the left-right distance between two longitudes.
// This is almost the same as (lambda1 - lambda0 + 360°) % 360°, except that we want
// the distance between ±180° to be 360°.


function angle(lambda0, lambda1) {
  return (lambda1 -= lambda0) < 0 ? lambda1 + 360 : lambda1;
}

function rangeCompare(a, b) {
  return a[0] - b[0];
}

function rangeContains(range, x) {
  return range[0] <= range[1] ? range[0] <= x && x <= range[1] : x < range[0] || range[1] < x;
}

function _default(feature) {
  var i, n, a, b, merged, deltaMax, delta;
  phi1 = lambda1 = -(lambda0 = phi0 = Infinity);
  ranges = [];
  (0, _stream.default)(feature, boundsStream); // First, sort ranges by their minimum longitudes.

  if (n = ranges.length) {
    ranges.sort(rangeCompare); // Then, merge any ranges that overlap.

    for (i = 1, a = ranges[0], merged = [a]; i < n; ++i) {
      b = ranges[i];

      if (rangeContains(a, b[0]) || rangeContains(a, b[1])) {
        if (angle(a[0], b[1]) > angle(a[0], a[1])) a[1] = b[1];
        if (angle(b[0], a[1]) > angle(a[0], a[1])) a[0] = b[0];
      } else {
        merged.push(a = b);
      }
    } // Finally, find the largest gap between the merged ranges.
    // The final bounding box will be the inverse of this gap.


    for (deltaMax = -Infinity, n = merged.length - 1, i = 0, a = merged[n]; i <= n; a = b, ++i) {
      b = merged[i];
      if ((delta = angle(a[1], b[0])) > deltaMax) deltaMax = delta, lambda0 = b[0], lambda1 = a[1];
    }
  }

  ranges = range = null;
  return lambda0 === Infinity || phi0 === Infinity ? [[NaN, NaN], [NaN, NaN]] : [[lambda0, phi0], [lambda1, phi1]];
}
},{"./adder":"GlqK","./area":"dpXv","./cartesian":"+rFM","./math":"sEgP","./stream":"XBFK"}],"pQGp":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _math = require("./math");

var _noop = _interopRequireDefault(require("./noop"));

var _stream = _interopRequireDefault(require("./stream"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var W0, W1, X0, Y0, Z0, X1, Y1, Z1, X2, Y2, Z2, lambda00, phi00, // first point
x0, y0, z0; // previous point

var centroidStream = {
  sphere: _noop.default,
  point: centroidPoint,
  lineStart: centroidLineStart,
  lineEnd: centroidLineEnd,
  polygonStart: function () {
    centroidStream.lineStart = centroidRingStart;
    centroidStream.lineEnd = centroidRingEnd;
  },
  polygonEnd: function () {
    centroidStream.lineStart = centroidLineStart;
    centroidStream.lineEnd = centroidLineEnd;
  }
}; // Arithmetic mean of Cartesian vectors.

function centroidPoint(lambda, phi) {
  lambda *= _math.radians, phi *= _math.radians;
  var cosPhi = (0, _math.cos)(phi);
  centroidPointCartesian(cosPhi * (0, _math.cos)(lambda), cosPhi * (0, _math.sin)(lambda), (0, _math.sin)(phi));
}

function centroidPointCartesian(x, y, z) {
  ++W0;
  X0 += (x - X0) / W0;
  Y0 += (y - Y0) / W0;
  Z0 += (z - Z0) / W0;
}

function centroidLineStart() {
  centroidStream.point = centroidLinePointFirst;
}

function centroidLinePointFirst(lambda, phi) {
  lambda *= _math.radians, phi *= _math.radians;
  var cosPhi = (0, _math.cos)(phi);
  x0 = cosPhi * (0, _math.cos)(lambda);
  y0 = cosPhi * (0, _math.sin)(lambda);
  z0 = (0, _math.sin)(phi);
  centroidStream.point = centroidLinePoint;
  centroidPointCartesian(x0, y0, z0);
}

function centroidLinePoint(lambda, phi) {
  lambda *= _math.radians, phi *= _math.radians;
  var cosPhi = (0, _math.cos)(phi),
      x = cosPhi * (0, _math.cos)(lambda),
      y = cosPhi * (0, _math.sin)(lambda),
      z = (0, _math.sin)(phi),
      w = (0, _math.atan2)((0, _math.sqrt)((w = y0 * z - z0 * y) * w + (w = z0 * x - x0 * z) * w + (w = x0 * y - y0 * x) * w), x0 * x + y0 * y + z0 * z);
  W1 += w;
  X1 += w * (x0 + (x0 = x));
  Y1 += w * (y0 + (y0 = y));
  Z1 += w * (z0 + (z0 = z));
  centroidPointCartesian(x0, y0, z0);
}

function centroidLineEnd() {
  centroidStream.point = centroidPoint;
} // See J. E. Brock, The Inertia Tensor for a Spherical Triangle,
// J. Applied Mechanics 42, 239 (1975).


function centroidRingStart() {
  centroidStream.point = centroidRingPointFirst;
}

function centroidRingEnd() {
  centroidRingPoint(lambda00, phi00);
  centroidStream.point = centroidPoint;
}

function centroidRingPointFirst(lambda, phi) {
  lambda00 = lambda, phi00 = phi;
  lambda *= _math.radians, phi *= _math.radians;
  centroidStream.point = centroidRingPoint;
  var cosPhi = (0, _math.cos)(phi);
  x0 = cosPhi * (0, _math.cos)(lambda);
  y0 = cosPhi * (0, _math.sin)(lambda);
  z0 = (0, _math.sin)(phi);
  centroidPointCartesian(x0, y0, z0);
}

function centroidRingPoint(lambda, phi) {
  lambda *= _math.radians, phi *= _math.radians;
  var cosPhi = (0, _math.cos)(phi),
      x = cosPhi * (0, _math.cos)(lambda),
      y = cosPhi * (0, _math.sin)(lambda),
      z = (0, _math.sin)(phi),
      cx = y0 * z - z0 * y,
      cy = z0 * x - x0 * z,
      cz = x0 * y - y0 * x,
      m = (0, _math.sqrt)(cx * cx + cy * cy + cz * cz),
      w = (0, _math.asin)(m),
      // line weight = angle
  v = m && -w / m; // area weight multiplier

  X2 += v * cx;
  Y2 += v * cy;
  Z2 += v * cz;
  W1 += w;
  X1 += w * (x0 + (x0 = x));
  Y1 += w * (y0 + (y0 = y));
  Z1 += w * (z0 + (z0 = z));
  centroidPointCartesian(x0, y0, z0);
}

function _default(object) {
  W0 = W1 = X0 = Y0 = Z0 = X1 = Y1 = Z1 = X2 = Y2 = Z2 = 0;
  (0, _stream.default)(object, centroidStream);
  var x = X2,
      y = Y2,
      z = Z2,
      m = x * x + y * y + z * z; // If the area-weighted ccentroid is undefined, fall back to length-weighted ccentroid.

  if (m < _math.epsilon2) {
    x = X1, y = Y1, z = Z1; // If the feature has zero length, fall back to arithmetic mean of point vectors.

    if (W1 < _math.epsilon) x = X0, y = Y0, z = Z0;
    m = x * x + y * y + z * z; // If the feature still has an undefined ccentroid, then return.

    if (m < _math.epsilon2) return [NaN, NaN];
  }

  return [(0, _math.atan2)(y, x) * _math.degrees, (0, _math.asin)(z / (0, _math.sqrt)(m)) * _math.degrees];
}
},{"./math":"sEgP","./noop":"UPwg","./stream":"XBFK"}],"hCea":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(a, b) {
  function compose(x, y) {
    return x = a(x, y), b(x[0], x[1]);
  }

  if (a.invert && b.invert) compose.invert = function (x, y) {
    return x = b.invert(x, y), x && a.invert(x[0], x[1]);
  };
  return compose;
}
},{}],"KwdP":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.rotateRadians = rotateRadians;
exports.default = _default;

var _compose = _interopRequireDefault(require("./compose"));

var _math = require("./math");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function rotationIdentity(lambda, phi) {
  return [lambda > _math.pi ? lambda - _math.tau : lambda < -_math.pi ? lambda + _math.tau : lambda, phi];
}

rotationIdentity.invert = rotationIdentity;

function rotateRadians(deltaLambda, deltaPhi, deltaGamma) {
  return (deltaLambda %= _math.tau) ? deltaPhi || deltaGamma ? (0, _compose.default)(rotationLambda(deltaLambda), rotationPhiGamma(deltaPhi, deltaGamma)) : rotationLambda(deltaLambda) : deltaPhi || deltaGamma ? rotationPhiGamma(deltaPhi, deltaGamma) : rotationIdentity;
}

function forwardRotationLambda(deltaLambda) {
  return function (lambda, phi) {
    return lambda += deltaLambda, [lambda > _math.pi ? lambda - _math.tau : lambda < -_math.pi ? lambda + _math.tau : lambda, phi];
  };
}

function rotationLambda(deltaLambda) {
  var rotation = forwardRotationLambda(deltaLambda);
  rotation.invert = forwardRotationLambda(-deltaLambda);
  return rotation;
}

function rotationPhiGamma(deltaPhi, deltaGamma) {
  var cosDeltaPhi = (0, _math.cos)(deltaPhi),
      sinDeltaPhi = (0, _math.sin)(deltaPhi),
      cosDeltaGamma = (0, _math.cos)(deltaGamma),
      sinDeltaGamma = (0, _math.sin)(deltaGamma);

  function rotation(lambda, phi) {
    var cosPhi = (0, _math.cos)(phi),
        x = (0, _math.cos)(lambda) * cosPhi,
        y = (0, _math.sin)(lambda) * cosPhi,
        z = (0, _math.sin)(phi),
        k = z * cosDeltaPhi + x * sinDeltaPhi;
    return [(0, _math.atan2)(y * cosDeltaGamma - k * sinDeltaGamma, x * cosDeltaPhi - z * sinDeltaPhi), (0, _math.asin)(k * cosDeltaGamma + y * sinDeltaGamma)];
  }

  rotation.invert = function (lambda, phi) {
    var cosPhi = (0, _math.cos)(phi),
        x = (0, _math.cos)(lambda) * cosPhi,
        y = (0, _math.sin)(lambda) * cosPhi,
        z = (0, _math.sin)(phi),
        k = z * cosDeltaGamma - y * sinDeltaGamma;
    return [(0, _math.atan2)(y * cosDeltaGamma + z * sinDeltaGamma, x * cosDeltaPhi + k * sinDeltaPhi), (0, _math.asin)(k * cosDeltaPhi - x * sinDeltaPhi)];
  };

  return rotation;
}

function _default(rotate) {
  rotate = rotateRadians(rotate[0] * _math.radians, rotate[1] * _math.radians, rotate.length > 2 ? rotate[2] * _math.radians : 0);

  function forward(coordinates) {
    coordinates = rotate(coordinates[0] * _math.radians, coordinates[1] * _math.radians);
    return coordinates[0] *= _math.degrees, coordinates[1] *= _math.degrees, coordinates;
  }

  forward.invert = function (coordinates) {
    coordinates = rotate.invert(coordinates[0] * _math.radians, coordinates[1] * _math.radians);
    return coordinates[0] *= _math.degrees, coordinates[1] *= _math.degrees, coordinates;
  };

  return forward;
}
},{"./compose":"hCea","./math":"sEgP"}],"dbGM":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.circleStream = circleStream;
exports.default = _default;

var _cartesian = require("./cartesian");

var _constant = _interopRequireDefault(require("./constant"));

var _math = require("./math");

var _rotation = require("./rotation");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Generates a circle centered at [0°, 0°], with a given radius and precision.
function circleStream(stream, radius, delta, direction, t0, t1) {
  if (!delta) return;
  var cosRadius = (0, _math.cos)(radius),
      sinRadius = (0, _math.sin)(radius),
      step = direction * delta;

  if (t0 == null) {
    t0 = radius + direction * _math.tau;
    t1 = radius - step / 2;
  } else {
    t0 = circleRadius(cosRadius, t0);
    t1 = circleRadius(cosRadius, t1);
    if (direction > 0 ? t0 < t1 : t0 > t1) t0 += direction * _math.tau;
  }

  for (var point, t = t0; direction > 0 ? t > t1 : t < t1; t -= step) {
    point = (0, _cartesian.spherical)([cosRadius, -sinRadius * (0, _math.cos)(t), -sinRadius * (0, _math.sin)(t)]);
    stream.point(point[0], point[1]);
  }
} // Returns the signed angle of a cartesian point relative to [cosRadius, 0, 0].


function circleRadius(cosRadius, point) {
  point = (0, _cartesian.cartesian)(point), point[0] -= cosRadius;
  (0, _cartesian.cartesianNormalizeInPlace)(point);
  var radius = (0, _math.acos)(-point[1]);
  return ((-point[2] < 0 ? -radius : radius) + _math.tau - _math.epsilon) % _math.tau;
}

function _default() {
  var center = (0, _constant.default)([0, 0]),
      radius = (0, _constant.default)(90),
      precision = (0, _constant.default)(6),
      ring,
      rotate,
      stream = {
    point: point
  };

  function point(x, y) {
    ring.push(x = rotate(x, y));
    x[0] *= _math.degrees, x[1] *= _math.degrees;
  }

  function circle() {
    var c = center.apply(this, arguments),
        r = radius.apply(this, arguments) * _math.radians,
        p = precision.apply(this, arguments) * _math.radians;

    ring = [];
    rotate = (0, _rotation.rotateRadians)(-c[0] * _math.radians, -c[1] * _math.radians, 0).invert;
    circleStream(stream, r, p, 1);
    c = {
      type: "Polygon",
      coordinates: [ring]
    };
    ring = rotate = null;
    return c;
  }

  circle.center = function (_) {
    return arguments.length ? (center = typeof _ === "function" ? _ : (0, _constant.default)([+_[0], +_[1]]), circle) : center;
  };

  circle.radius = function (_) {
    return arguments.length ? (radius = typeof _ === "function" ? _ : (0, _constant.default)(+_), circle) : radius;
  };

  circle.precision = function (_) {
    return arguments.length ? (precision = typeof _ === "function" ? _ : (0, _constant.default)(+_), circle) : precision;
  };

  return circle;
}
},{"./cartesian":"+rFM","./constant":"5O/Y","./math":"sEgP","./rotation":"KwdP"}],"VrlK":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _noop = _interopRequireDefault(require("../noop"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default() {
  var lines = [],
      line;
  return {
    point: function (x, y) {
      line.push([x, y]);
    },
    lineStart: function () {
      lines.push(line = []);
    },
    lineEnd: _noop.default,
    rejoin: function () {
      if (lines.length > 1) lines.push(lines.pop().concat(lines.shift()));
    },
    result: function () {
      var result = lines;
      lines = [];
      line = null;
      return result;
    }
  };
}
},{"../noop":"UPwg"}],"j4Ms":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _math = require("./math");

function _default(a, b) {
  return (0, _math.abs)(a[0] - b[0]) < _math.epsilon && (0, _math.abs)(a[1] - b[1]) < _math.epsilon;
}
},{"./math":"sEgP"}],"03nq":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _pointEqual = _interopRequireDefault(require("../pointEqual"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function Intersection(point, points, other, entry) {
  this.x = point;
  this.z = points;
  this.o = other; // another intersection

  this.e = entry; // is an entry?

  this.v = false; // visited

  this.n = this.p = null; // next & previous
} // A generalized polygon clipping algorithm: given a polygon that has been cut
// into its visible line segments, and rejoins the segments by interpolating
// along the clip edge.


function _default(segments, compareIntersection, startInside, interpolate, stream) {
  var subject = [],
      clip = [],
      i,
      n;
  segments.forEach(function (segment) {
    if ((n = segment.length - 1) <= 0) return;
    var n,
        p0 = segment[0],
        p1 = segment[n],
        x; // If the first and last points of a segment are coincident, then treat as a
    // closed ring. TODO if all rings are closed, then the winding order of the
    // exterior ring should be checked.

    if ((0, _pointEqual.default)(p0, p1)) {
      stream.lineStart();

      for (i = 0; i < n; ++i) stream.point((p0 = segment[i])[0], p0[1]);

      stream.lineEnd();
      return;
    }

    subject.push(x = new Intersection(p0, segment, null, true));
    clip.push(x.o = new Intersection(p0, null, x, false));
    subject.push(x = new Intersection(p1, segment, null, false));
    clip.push(x.o = new Intersection(p1, null, x, true));
  });
  if (!subject.length) return;
  clip.sort(compareIntersection);
  link(subject);
  link(clip);

  for (i = 0, n = clip.length; i < n; ++i) {
    clip[i].e = startInside = !startInside;
  }

  var start = subject[0],
      points,
      point;

  while (1) {
    // Find first unvisited intersection.
    var current = start,
        isSubject = true;

    while (current.v) if ((current = current.n) === start) return;

    points = current.z;
    stream.lineStart();

    do {
      current.v = current.o.v = true;

      if (current.e) {
        if (isSubject) {
          for (i = 0, n = points.length; i < n; ++i) stream.point((point = points[i])[0], point[1]);
        } else {
          interpolate(current.x, current.n.x, 1, stream);
        }

        current = current.n;
      } else {
        if (isSubject) {
          points = current.p.z;

          for (i = points.length - 1; i >= 0; --i) stream.point((point = points[i])[0], point[1]);
        } else {
          interpolate(current.x, current.p.x, -1, stream);
        }

        current = current.p;
      }

      current = current.o;
      points = current.z;
      isSubject = !isSubject;
    } while (!current.v);

    stream.lineEnd();
  }
}

function link(array) {
  if (!(n = array.length)) return;
  var n,
      i = 0,
      a = array[0],
      b;

  while (++i < n) {
    a.n = b = array[i];
    b.p = a;
    a = b;
  }

  a.n = b = array[0];
  b.p = a;
}
},{"../pointEqual":"j4Ms"}],"Cmis":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _adder = _interopRequireDefault(require("./adder"));

var _cartesian = require("./cartesian");

var _math = require("./math");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var sum = (0, _adder.default)();

function _default(polygon, point) {
  var lambda = point[0],
      phi = point[1],
      sinPhi = (0, _math.sin)(phi),
      normal = [(0, _math.sin)(lambda), -(0, _math.cos)(lambda), 0],
      angle = 0,
      winding = 0;
  sum.reset();
  if (sinPhi === 1) phi = _math.halfPi + _math.epsilon;else if (sinPhi === -1) phi = -_math.halfPi - _math.epsilon;

  for (var i = 0, n = polygon.length; i < n; ++i) {
    if (!(m = (ring = polygon[i]).length)) continue;
    var ring,
        m,
        point0 = ring[m - 1],
        lambda0 = point0[0],
        phi0 = point0[1] / 2 + _math.quarterPi,
        sinPhi0 = (0, _math.sin)(phi0),
        cosPhi0 = (0, _math.cos)(phi0);

    for (var j = 0; j < m; ++j, lambda0 = lambda1, sinPhi0 = sinPhi1, cosPhi0 = cosPhi1, point0 = point1) {
      var point1 = ring[j],
          lambda1 = point1[0],
          phi1 = point1[1] / 2 + _math.quarterPi,
          sinPhi1 = (0, _math.sin)(phi1),
          cosPhi1 = (0, _math.cos)(phi1),
          delta = lambda1 - lambda0,
          sign = delta >= 0 ? 1 : -1,
          absDelta = sign * delta,
          antimeridian = absDelta > _math.pi,
          k = sinPhi0 * sinPhi1;
      sum.add((0, _math.atan2)(k * sign * (0, _math.sin)(absDelta), cosPhi0 * cosPhi1 + k * (0, _math.cos)(absDelta)));
      angle += antimeridian ? delta + sign * _math.tau : delta; // Are the longitudes either side of the point’s meridian (lambda),
      // and are the latitudes smaller than the parallel (phi)?

      if (antimeridian ^ lambda0 >= lambda ^ lambda1 >= lambda) {
        var arc = (0, _cartesian.cartesianCross)((0, _cartesian.cartesian)(point0), (0, _cartesian.cartesian)(point1));
        (0, _cartesian.cartesianNormalizeInPlace)(arc);
        var intersection = (0, _cartesian.cartesianCross)(normal, arc);
        (0, _cartesian.cartesianNormalizeInPlace)(intersection);
        var phiArc = (antimeridian ^ delta >= 0 ? -1 : 1) * (0, _math.asin)(intersection[2]);

        if (phi > phiArc || phi === phiArc && (arc[0] || arc[1])) {
          winding += antimeridian ^ delta >= 0 ? 1 : -1;
        }
      }
    }
  } // First, determine whether the South pole is inside or outside:
  //
  // It is inside if:
  // * the polygon winds around it in a clockwise direction.
  // * the polygon does not (cumulatively) wind around it, but has a negative
  //   (counter-clockwise) area.
  //
  // Second, count the (signed) number of times a segment crosses a lambda
  // from the point to the South pole.  If it is zero, then the point is the
  // same side as the South pole.


  return (angle < -_math.epsilon || angle < _math.epsilon && sum < -_math.epsilon) ^ winding & 1;
}
},{"./adder":"GlqK","./cartesian":"+rFM","./math":"sEgP"}],"bbiM":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _buffer = _interopRequireDefault(require("./buffer"));

var _rejoin = _interopRequireDefault(require("./rejoin"));

var _math = require("../math");

var _polygonContains = _interopRequireDefault(require("../polygonContains"));

var _d3Array = require("d3-array");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(pointVisible, clipLine, interpolate, start) {
  return function (sink) {
    var line = clipLine(sink),
        ringBuffer = (0, _buffer.default)(),
        ringSink = clipLine(ringBuffer),
        polygonStarted = false,
        polygon,
        segments,
        ring;
    var clip = {
      point: point,
      lineStart: lineStart,
      lineEnd: lineEnd,
      polygonStart: function () {
        clip.point = pointRing;
        clip.lineStart = ringStart;
        clip.lineEnd = ringEnd;
        segments = [];
        polygon = [];
      },
      polygonEnd: function () {
        clip.point = point;
        clip.lineStart = lineStart;
        clip.lineEnd = lineEnd;
        segments = (0, _d3Array.merge)(segments);
        var startInside = (0, _polygonContains.default)(polygon, start);

        if (segments.length) {
          if (!polygonStarted) sink.polygonStart(), polygonStarted = true;
          (0, _rejoin.default)(segments, compareIntersection, startInside, interpolate, sink);
        } else if (startInside) {
          if (!polygonStarted) sink.polygonStart(), polygonStarted = true;
          sink.lineStart();
          interpolate(null, null, 1, sink);
          sink.lineEnd();
        }

        if (polygonStarted) sink.polygonEnd(), polygonStarted = false;
        segments = polygon = null;
      },
      sphere: function () {
        sink.polygonStart();
        sink.lineStart();
        interpolate(null, null, 1, sink);
        sink.lineEnd();
        sink.polygonEnd();
      }
    };

    function point(lambda, phi) {
      if (pointVisible(lambda, phi)) sink.point(lambda, phi);
    }

    function pointLine(lambda, phi) {
      line.point(lambda, phi);
    }

    function lineStart() {
      clip.point = pointLine;
      line.lineStart();
    }

    function lineEnd() {
      clip.point = point;
      line.lineEnd();
    }

    function pointRing(lambda, phi) {
      ring.push([lambda, phi]);
      ringSink.point(lambda, phi);
    }

    function ringStart() {
      ringSink.lineStart();
      ring = [];
    }

    function ringEnd() {
      pointRing(ring[0][0], ring[0][1]);
      ringSink.lineEnd();
      var clean = ringSink.clean(),
          ringSegments = ringBuffer.result(),
          i,
          n = ringSegments.length,
          m,
          segment,
          point;
      ring.pop();
      polygon.push(ring);
      ring = null;
      if (!n) return; // No intersections.

      if (clean & 1) {
        segment = ringSegments[0];

        if ((m = segment.length - 1) > 0) {
          if (!polygonStarted) sink.polygonStart(), polygonStarted = true;
          sink.lineStart();

          for (i = 0; i < m; ++i) sink.point((point = segment[i])[0], point[1]);

          sink.lineEnd();
        }

        return;
      } // Rejoin connected segments.
      // TODO reuse ringBuffer.rejoin()?


      if (n > 1 && clean & 2) ringSegments.push(ringSegments.pop().concat(ringSegments.shift()));
      segments.push(ringSegments.filter(validSegment));
    }

    return clip;
  };
}

function validSegment(segment) {
  return segment.length > 1;
} // Intersections are sorted along the clip edge. For both antimeridian cutting
// and circle clipping, the same comparison is used.


function compareIntersection(a, b) {
  return ((a = a.x)[0] < 0 ? a[1] - _math.halfPi - _math.epsilon : _math.halfPi - a[1]) - ((b = b.x)[0] < 0 ? b[1] - _math.halfPi - _math.epsilon : _math.halfPi - b[1]);
}
},{"./buffer":"VrlK","./rejoin":"03nq","../math":"sEgP","../polygonContains":"Cmis","d3-array":"cBuZ"}],"CWnN":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _index = _interopRequireDefault(require("./index"));

var _math = require("../math");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _default = (0, _index.default)(function () {
  return true;
}, clipAntimeridianLine, clipAntimeridianInterpolate, [-_math.pi, -_math.halfPi]); // Takes a line and cuts into visible segments. Return values: 0 - there were
// intersections or the line was empty; 1 - no intersections; 2 - there were
// intersections, and the first and last segments should be rejoined.


exports.default = _default;

function clipAntimeridianLine(stream) {
  var lambda0 = NaN,
      phi0 = NaN,
      sign0 = NaN,
      clean; // no intersections

  return {
    lineStart: function () {
      stream.lineStart();
      clean = 1;
    },
    point: function (lambda1, phi1) {
      var sign1 = lambda1 > 0 ? _math.pi : -_math.pi,
          delta = (0, _math.abs)(lambda1 - lambda0);

      if ((0, _math.abs)(delta - _math.pi) < _math.epsilon) {
        // line crosses a pole
        stream.point(lambda0, phi0 = (phi0 + phi1) / 2 > 0 ? _math.halfPi : -_math.halfPi);
        stream.point(sign0, phi0);
        stream.lineEnd();
        stream.lineStart();
        stream.point(sign1, phi0);
        stream.point(lambda1, phi0);
        clean = 0;
      } else if (sign0 !== sign1 && delta >= _math.pi) {
        // line crosses antimeridian
        if ((0, _math.abs)(lambda0 - sign0) < _math.epsilon) lambda0 -= sign0 * _math.epsilon; // handle degeneracies

        if ((0, _math.abs)(lambda1 - sign1) < _math.epsilon) lambda1 -= sign1 * _math.epsilon;
        phi0 = clipAntimeridianIntersect(lambda0, phi0, lambda1, phi1);
        stream.point(sign0, phi0);
        stream.lineEnd();
        stream.lineStart();
        stream.point(sign1, phi0);
        clean = 0;
      }

      stream.point(lambda0 = lambda1, phi0 = phi1);
      sign0 = sign1;
    },
    lineEnd: function () {
      stream.lineEnd();
      lambda0 = phi0 = NaN;
    },
    clean: function () {
      return 2 - clean; // if intersections, rejoin first and last segments
    }
  };
}

function clipAntimeridianIntersect(lambda0, phi0, lambda1, phi1) {
  var cosPhi0,
      cosPhi1,
      sinLambda0Lambda1 = (0, _math.sin)(lambda0 - lambda1);
  return (0, _math.abs)(sinLambda0Lambda1) > _math.epsilon ? (0, _math.atan)(((0, _math.sin)(phi0) * (cosPhi1 = (0, _math.cos)(phi1)) * (0, _math.sin)(lambda1) - (0, _math.sin)(phi1) * (cosPhi0 = (0, _math.cos)(phi0)) * (0, _math.sin)(lambda0)) / (cosPhi0 * cosPhi1 * sinLambda0Lambda1)) : (phi0 + phi1) / 2;
}

function clipAntimeridianInterpolate(from, to, direction, stream) {
  var phi;

  if (from == null) {
    phi = direction * _math.halfPi;
    stream.point(-_math.pi, phi);
    stream.point(0, phi);
    stream.point(_math.pi, phi);
    stream.point(_math.pi, 0);
    stream.point(_math.pi, -phi);
    stream.point(0, -phi);
    stream.point(-_math.pi, -phi);
    stream.point(-_math.pi, 0);
    stream.point(-_math.pi, phi);
  } else if ((0, _math.abs)(from[0] - to[0]) > _math.epsilon) {
    var lambda = from[0] < to[0] ? _math.pi : -_math.pi;
    phi = direction * lambda / 2;
    stream.point(-lambda, phi);
    stream.point(0, phi);
    stream.point(lambda, phi);
  } else {
    stream.point(to[0], to[1]);
  }
}
},{"./index":"bbiM","../math":"sEgP"}],"1uul":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _cartesian = require("../cartesian");

var _circle = require("../circle");

var _math = require("../math");

var _pointEqual = _interopRequireDefault(require("../pointEqual"));

var _index = _interopRequireDefault(require("./index"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(radius) {
  var cr = (0, _math.cos)(radius),
      delta = 6 * _math.radians,
      smallRadius = cr > 0,
      notHemisphere = (0, _math.abs)(cr) > _math.epsilon; // TODO optimise for this common case


  function interpolate(from, to, direction, stream) {
    (0, _circle.circleStream)(stream, radius, delta, direction, from, to);
  }

  function visible(lambda, phi) {
    return (0, _math.cos)(lambda) * (0, _math.cos)(phi) > cr;
  } // Takes a line and cuts into visible segments. Return values used for polygon
  // clipping: 0 - there were intersections or the line was empty; 1 - no
  // intersections 2 - there were intersections, and the first and last segments
  // should be rejoined.


  function clipLine(stream) {
    var point0, // previous point
    c0, // code for previous point
    v0, // visibility of previous point
    v00, // visibility of first point
    clean; // no intersections

    return {
      lineStart: function () {
        v00 = v0 = false;
        clean = 1;
      },
      point: function (lambda, phi) {
        var point1 = [lambda, phi],
            point2,
            v = visible(lambda, phi),
            c = smallRadius ? v ? 0 : code(lambda, phi) : v ? code(lambda + (lambda < 0 ? _math.pi : -_math.pi), phi) : 0;
        if (!point0 && (v00 = v0 = v)) stream.lineStart(); // Handle degeneracies.
        // TODO ignore if not clipping polygons.

        if (v !== v0) {
          point2 = intersect(point0, point1);

          if (!point2 || (0, _pointEqual.default)(point0, point2) || (0, _pointEqual.default)(point1, point2)) {
            point1[0] += _math.epsilon;
            point1[1] += _math.epsilon;
            v = visible(point1[0], point1[1]);
          }
        }

        if (v !== v0) {
          clean = 0;

          if (v) {
            // outside going in
            stream.lineStart();
            point2 = intersect(point1, point0);
            stream.point(point2[0], point2[1]);
          } else {
            // inside going out
            point2 = intersect(point0, point1);
            stream.point(point2[0], point2[1]);
            stream.lineEnd();
          }

          point0 = point2;
        } else if (notHemisphere && point0 && smallRadius ^ v) {
          var t; // If the codes for two points are different, or are both zero,
          // and there this segment intersects with the small circle.

          if (!(c & c0) && (t = intersect(point1, point0, true))) {
            clean = 0;

            if (smallRadius) {
              stream.lineStart();
              stream.point(t[0][0], t[0][1]);
              stream.point(t[1][0], t[1][1]);
              stream.lineEnd();
            } else {
              stream.point(t[1][0], t[1][1]);
              stream.lineEnd();
              stream.lineStart();
              stream.point(t[0][0], t[0][1]);
            }
          }
        }

        if (v && (!point0 || !(0, _pointEqual.default)(point0, point1))) {
          stream.point(point1[0], point1[1]);
        }

        point0 = point1, v0 = v, c0 = c;
      },
      lineEnd: function () {
        if (v0) stream.lineEnd();
        point0 = null;
      },
      // Rejoin first and last segments if there were intersections and the first
      // and last points were visible.
      clean: function () {
        return clean | (v00 && v0) << 1;
      }
    };
  } // Intersects the great circle between a and b with the clip circle.


  function intersect(a, b, two) {
    var pa = (0, _cartesian.cartesian)(a),
        pb = (0, _cartesian.cartesian)(b); // We have two planes, n1.p = d1 and n2.p = d2.
    // Find intersection line p(t) = c1 n1 + c2 n2 + t (n1 ⨯ n2).

    var n1 = [1, 0, 0],
        // normal
    n2 = (0, _cartesian.cartesianCross)(pa, pb),
        n2n2 = (0, _cartesian.cartesianDot)(n2, n2),
        n1n2 = n2[0],
        // cartesianDot(n1, n2),
    determinant = n2n2 - n1n2 * n1n2; // Two polar points.

    if (!determinant) return !two && a;
    var c1 = cr * n2n2 / determinant,
        c2 = -cr * n1n2 / determinant,
        n1xn2 = (0, _cartesian.cartesianCross)(n1, n2),
        A = (0, _cartesian.cartesianScale)(n1, c1),
        B = (0, _cartesian.cartesianScale)(n2, c2);
    (0, _cartesian.cartesianAddInPlace)(A, B); // Solve |p(t)|^2 = 1.

    var u = n1xn2,
        w = (0, _cartesian.cartesianDot)(A, u),
        uu = (0, _cartesian.cartesianDot)(u, u),
        t2 = w * w - uu * ((0, _cartesian.cartesianDot)(A, A) - 1);
    if (t2 < 0) return;
    var t = (0, _math.sqrt)(t2),
        q = (0, _cartesian.cartesianScale)(u, (-w - t) / uu);
    (0, _cartesian.cartesianAddInPlace)(q, A);
    q = (0, _cartesian.spherical)(q);
    if (!two) return q; // Two intersection points.

    var lambda0 = a[0],
        lambda1 = b[0],
        phi0 = a[1],
        phi1 = b[1],
        z;
    if (lambda1 < lambda0) z = lambda0, lambda0 = lambda1, lambda1 = z;

    var delta = lambda1 - lambda0,
        polar = (0, _math.abs)(delta - _math.pi) < _math.epsilon,
        meridian = polar || delta < _math.epsilon;

    if (!polar && phi1 < phi0) z = phi0, phi0 = phi1, phi1 = z; // Check that the first point is between a and b.

    if (meridian ? polar ? phi0 + phi1 > 0 ^ q[1] < ((0, _math.abs)(q[0] - lambda0) < _math.epsilon ? phi0 : phi1) : phi0 <= q[1] && q[1] <= phi1 : delta > _math.pi ^ (lambda0 <= q[0] && q[0] <= lambda1)) {
      var q1 = (0, _cartesian.cartesianScale)(u, (-w + t) / uu);
      (0, _cartesian.cartesianAddInPlace)(q1, A);
      return [q, (0, _cartesian.spherical)(q1)];
    }
  } // Generates a 4-bit vector representing the location of a point relative to
  // the small circle's bounding box.


  function code(lambda, phi) {
    var r = smallRadius ? radius : _math.pi - radius,
        code = 0;
    if (lambda < -r) code |= 1; // left
    else if (lambda > r) code |= 2; // right

    if (phi < -r) code |= 4; // below
    else if (phi > r) code |= 8; // above

    return code;
  }

  return (0, _index.default)(visible, clipLine, interpolate, smallRadius ? [0, -radius] : [-_math.pi, radius - _math.pi]);
}
},{"../cartesian":"+rFM","../circle":"dbGM","../math":"sEgP","../pointEqual":"j4Ms","./index":"bbiM"}],"RhqQ":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(a, b, x0, y0, x1, y1) {
  var ax = a[0],
      ay = a[1],
      bx = b[0],
      by = b[1],
      t0 = 0,
      t1 = 1,
      dx = bx - ax,
      dy = by - ay,
      r;
  r = x0 - ax;
  if (!dx && r > 0) return;
  r /= dx;

  if (dx < 0) {
    if (r < t0) return;
    if (r < t1) t1 = r;
  } else if (dx > 0) {
    if (r > t1) return;
    if (r > t0) t0 = r;
  }

  r = x1 - ax;
  if (!dx && r < 0) return;
  r /= dx;

  if (dx < 0) {
    if (r > t1) return;
    if (r > t0) t0 = r;
  } else if (dx > 0) {
    if (r < t0) return;
    if (r < t1) t1 = r;
  }

  r = y0 - ay;
  if (!dy && r > 0) return;
  r /= dy;

  if (dy < 0) {
    if (r < t0) return;
    if (r < t1) t1 = r;
  } else if (dy > 0) {
    if (r > t1) return;
    if (r > t0) t0 = r;
  }

  r = y1 - ay;
  if (!dy && r < 0) return;
  r /= dy;

  if (dy < 0) {
    if (r > t1) return;
    if (r > t0) t0 = r;
  } else if (dy > 0) {
    if (r < t0) return;
    if (r < t1) t1 = r;
  }

  if (t0 > 0) a[0] = ax + t0 * dx, a[1] = ay + t0 * dy;
  if (t1 < 1) b[0] = ax + t1 * dx, b[1] = ay + t1 * dy;
  return true;
}
},{}],"E6SH":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = clipRectangle;

var _math = require("../math");

var _buffer = _interopRequireDefault(require("./buffer"));

var _line = _interopRequireDefault(require("./line"));

var _rejoin = _interopRequireDefault(require("./rejoin"));

var _d3Array = require("d3-array");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var clipMax = 1e9,
    clipMin = -clipMax; // TODO Use d3-polygon’s polygonContains here for the ring check?
// TODO Eliminate duplicate buffering in clipBuffer and polygon.push?

function clipRectangle(x0, y0, x1, y1) {
  function visible(x, y) {
    return x0 <= x && x <= x1 && y0 <= y && y <= y1;
  }

  function interpolate(from, to, direction, stream) {
    var a = 0,
        a1 = 0;

    if (from == null || (a = corner(from, direction)) !== (a1 = corner(to, direction)) || comparePoint(from, to) < 0 ^ direction > 0) {
      do stream.point(a === 0 || a === 3 ? x0 : x1, a > 1 ? y1 : y0); while ((a = (a + direction + 4) % 4) !== a1);
    } else {
      stream.point(to[0], to[1]);
    }
  }

  function corner(p, direction) {
    return (0, _math.abs)(p[0] - x0) < _math.epsilon ? direction > 0 ? 0 : 3 : (0, _math.abs)(p[0] - x1) < _math.epsilon ? direction > 0 ? 2 : 1 : (0, _math.abs)(p[1] - y0) < _math.epsilon ? direction > 0 ? 1 : 0 : direction > 0 ? 3 : 2; // abs(p[1] - y1) < epsilon
  }

  function compareIntersection(a, b) {
    return comparePoint(a.x, b.x);
  }

  function comparePoint(a, b) {
    var ca = corner(a, 1),
        cb = corner(b, 1);
    return ca !== cb ? ca - cb : ca === 0 ? b[1] - a[1] : ca === 1 ? a[0] - b[0] : ca === 2 ? a[1] - b[1] : b[0] - a[0];
  }

  return function (stream) {
    var activeStream = stream,
        bufferStream = (0, _buffer.default)(),
        segments,
        polygon,
        ring,
        x__,
        y__,
        v__,
        // first point
    x_,
        y_,
        v_,
        // previous point
    first,
        clean;
    var clipStream = {
      point: point,
      lineStart: lineStart,
      lineEnd: lineEnd,
      polygonStart: polygonStart,
      polygonEnd: polygonEnd
    };

    function point(x, y) {
      if (visible(x, y)) activeStream.point(x, y);
    }

    function polygonInside() {
      var winding = 0;

      for (var i = 0, n = polygon.length; i < n; ++i) {
        for (var ring = polygon[i], j = 1, m = ring.length, point = ring[0], a0, a1, b0 = point[0], b1 = point[1]; j < m; ++j) {
          a0 = b0, a1 = b1, point = ring[j], b0 = point[0], b1 = point[1];

          if (a1 <= y1) {
            if (b1 > y1 && (b0 - a0) * (y1 - a1) > (b1 - a1) * (x0 - a0)) ++winding;
          } else {
            if (b1 <= y1 && (b0 - a0) * (y1 - a1) < (b1 - a1) * (x0 - a0)) --winding;
          }
        }
      }

      return winding;
    } // Buffer geometry within a polygon and then clip it en masse.


    function polygonStart() {
      activeStream = bufferStream, segments = [], polygon = [], clean = true;
    }

    function polygonEnd() {
      var startInside = polygonInside(),
          cleanInside = clean && startInside,
          visible = (segments = (0, _d3Array.merge)(segments)).length;

      if (cleanInside || visible) {
        stream.polygonStart();

        if (cleanInside) {
          stream.lineStart();
          interpolate(null, null, 1, stream);
          stream.lineEnd();
        }

        if (visible) {
          (0, _rejoin.default)(segments, compareIntersection, startInside, interpolate, stream);
        }

        stream.polygonEnd();
      }

      activeStream = stream, segments = polygon = ring = null;
    }

    function lineStart() {
      clipStream.point = linePoint;
      if (polygon) polygon.push(ring = []);
      first = true;
      v_ = false;
      x_ = y_ = NaN;
    } // TODO rather than special-case polygons, simply handle them separately.
    // Ideally, coincident intersection points should be jittered to avoid
    // clipping issues.


    function lineEnd() {
      if (segments) {
        linePoint(x__, y__);
        if (v__ && v_) bufferStream.rejoin();
        segments.push(bufferStream.result());
      }

      clipStream.point = point;
      if (v_) activeStream.lineEnd();
    }

    function linePoint(x, y) {
      var v = visible(x, y);
      if (polygon) ring.push([x, y]);

      if (first) {
        x__ = x, y__ = y, v__ = v;
        first = false;

        if (v) {
          activeStream.lineStart();
          activeStream.point(x, y);
        }
      } else {
        if (v && v_) activeStream.point(x, y);else {
          var a = [x_ = Math.max(clipMin, Math.min(clipMax, x_)), y_ = Math.max(clipMin, Math.min(clipMax, y_))],
              b = [x = Math.max(clipMin, Math.min(clipMax, x)), y = Math.max(clipMin, Math.min(clipMax, y))];

          if ((0, _line.default)(a, b, x0, y0, x1, y1)) {
            if (!v_) {
              activeStream.lineStart();
              activeStream.point(a[0], a[1]);
            }

            activeStream.point(b[0], b[1]);
            if (!v) activeStream.lineEnd();
            clean = false;
          } else if (v) {
            activeStream.lineStart();
            activeStream.point(x, y);
            clean = false;
          }
        }
      }

      x_ = x, y_ = y, v_ = v;
    }

    return clipStream;
  };
}
},{"../math":"sEgP","./buffer":"VrlK","./line":"RhqQ","./rejoin":"03nq","d3-array":"cBuZ"}],"Pttt":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _rectangle = _interopRequireDefault(require("./rectangle"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default() {
  var x0 = 0,
      y0 = 0,
      x1 = 960,
      y1 = 500,
      cache,
      cacheStream,
      clip;
  return clip = {
    stream: function (stream) {
      return cache && cacheStream === stream ? cache : cache = (0, _rectangle.default)(x0, y0, x1, y1)(cacheStream = stream);
    },
    extent: function (_) {
      return arguments.length ? (x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1], cache = cacheStream = null, clip) : [[x0, y0], [x1, y1]];
    }
  };
}
},{"./rectangle":"E6SH"}],"rgN/":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _adder = _interopRequireDefault(require("./adder"));

var _math = require("./math");

var _noop = _interopRequireDefault(require("./noop"));

var _stream = _interopRequireDefault(require("./stream"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var lengthSum = (0, _adder.default)(),
    lambda0,
    sinPhi0,
    cosPhi0;
var lengthStream = {
  sphere: _noop.default,
  point: _noop.default,
  lineStart: lengthLineStart,
  lineEnd: _noop.default,
  polygonStart: _noop.default,
  polygonEnd: _noop.default
};

function lengthLineStart() {
  lengthStream.point = lengthPointFirst;
  lengthStream.lineEnd = lengthLineEnd;
}

function lengthLineEnd() {
  lengthStream.point = lengthStream.lineEnd = _noop.default;
}

function lengthPointFirst(lambda, phi) {
  lambda *= _math.radians, phi *= _math.radians;
  lambda0 = lambda, sinPhi0 = (0, _math.sin)(phi), cosPhi0 = (0, _math.cos)(phi);
  lengthStream.point = lengthPoint;
}

function lengthPoint(lambda, phi) {
  lambda *= _math.radians, phi *= _math.radians;
  var sinPhi = (0, _math.sin)(phi),
      cosPhi = (0, _math.cos)(phi),
      delta = (0, _math.abs)(lambda - lambda0),
      cosDelta = (0, _math.cos)(delta),
      sinDelta = (0, _math.sin)(delta),
      x = cosPhi * sinDelta,
      y = cosPhi0 * sinPhi - sinPhi0 * cosPhi * cosDelta,
      z = sinPhi0 * sinPhi + cosPhi0 * cosPhi * cosDelta;
  lengthSum.add((0, _math.atan2)((0, _math.sqrt)(x * x + y * y), z));
  lambda0 = lambda, sinPhi0 = sinPhi, cosPhi0 = cosPhi;
}

function _default(object) {
  lengthSum.reset();
  (0, _stream.default)(object, lengthStream);
  return +lengthSum;
}
},{"./adder":"GlqK","./math":"sEgP","./noop":"UPwg","./stream":"XBFK"}],"IoFW":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _length = _interopRequireDefault(require("./length"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var coordinates = [null, null],
    object = {
  type: "LineString",
  coordinates: coordinates
};

function _default(a, b) {
  coordinates[0] = a;
  coordinates[1] = b;
  return (0, _length.default)(object);
}
},{"./length":"rgN/"}],"bl0/":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _polygonContains = _interopRequireDefault(require("./polygonContains"));

var _distance = _interopRequireDefault(require("./distance"));

var _math = require("./math");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var containsObjectType = {
  Feature: function (object, point) {
    return containsGeometry(object.geometry, point);
  },
  FeatureCollection: function (object, point) {
    var features = object.features,
        i = -1,
        n = features.length;

    while (++i < n) if (containsGeometry(features[i].geometry, point)) return true;

    return false;
  }
};
var containsGeometryType = {
  Sphere: function () {
    return true;
  },
  Point: function (object, point) {
    return containsPoint(object.coordinates, point);
  },
  MultiPoint: function (object, point) {
    var coordinates = object.coordinates,
        i = -1,
        n = coordinates.length;

    while (++i < n) if (containsPoint(coordinates[i], point)) return true;

    return false;
  },
  LineString: function (object, point) {
    return containsLine(object.coordinates, point);
  },
  MultiLineString: function (object, point) {
    var coordinates = object.coordinates,
        i = -1,
        n = coordinates.length;

    while (++i < n) if (containsLine(coordinates[i], point)) return true;

    return false;
  },
  Polygon: function (object, point) {
    return containsPolygon(object.coordinates, point);
  },
  MultiPolygon: function (object, point) {
    var coordinates = object.coordinates,
        i = -1,
        n = coordinates.length;

    while (++i < n) if (containsPolygon(coordinates[i], point)) return true;

    return false;
  },
  GeometryCollection: function (object, point) {
    var geometries = object.geometries,
        i = -1,
        n = geometries.length;

    while (++i < n) if (containsGeometry(geometries[i], point)) return true;

    return false;
  }
};

function containsGeometry(geometry, point) {
  return geometry && containsGeometryType.hasOwnProperty(geometry.type) ? containsGeometryType[geometry.type](geometry, point) : false;
}

function containsPoint(coordinates, point) {
  return (0, _distance.default)(coordinates, point) === 0;
}

function containsLine(coordinates, point) {
  var ab = (0, _distance.default)(coordinates[0], coordinates[1]),
      ao = (0, _distance.default)(coordinates[0], point),
      ob = (0, _distance.default)(point, coordinates[1]);
  return ao + ob <= ab + _math.epsilon;
}

function containsPolygon(coordinates, point) {
  return !!(0, _polygonContains.default)(coordinates.map(ringRadians), pointRadians(point));
}

function ringRadians(ring) {
  return ring = ring.map(pointRadians), ring.pop(), ring;
}

function pointRadians(point) {
  return [point[0] * _math.radians, point[1] * _math.radians];
}

function _default(object, point) {
  return (object && containsObjectType.hasOwnProperty(object.type) ? containsObjectType[object.type] : containsGeometry)(object, point);
}
},{"./polygonContains":"Cmis","./distance":"IoFW","./math":"sEgP"}],"+fWg":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = graticule;
exports.graticule10 = graticule10;

var _d3Array = require("d3-array");

var _math = require("./math");

function graticuleX(y0, y1, dy) {
  var y = (0, _d3Array.range)(y0, y1 - _math.epsilon, dy).concat(y1);
  return function (x) {
    return y.map(function (y) {
      return [x, y];
    });
  };
}

function graticuleY(x0, x1, dx) {
  var x = (0, _d3Array.range)(x0, x1 - _math.epsilon, dx).concat(x1);
  return function (y) {
    return x.map(function (x) {
      return [x, y];
    });
  };
}

function graticule() {
  var x1,
      x0,
      X1,
      X0,
      y1,
      y0,
      Y1,
      Y0,
      dx = 10,
      dy = dx,
      DX = 90,
      DY = 360,
      x,
      y,
      X,
      Y,
      precision = 2.5;

  function graticule() {
    return {
      type: "MultiLineString",
      coordinates: lines()
    };
  }

  function lines() {
    return (0, _d3Array.range)((0, _math.ceil)(X0 / DX) * DX, X1, DX).map(X).concat((0, _d3Array.range)((0, _math.ceil)(Y0 / DY) * DY, Y1, DY).map(Y)).concat((0, _d3Array.range)((0, _math.ceil)(x0 / dx) * dx, x1, dx).filter(function (x) {
      return (0, _math.abs)(x % DX) > _math.epsilon;
    }).map(x)).concat((0, _d3Array.range)((0, _math.ceil)(y0 / dy) * dy, y1, dy).filter(function (y) {
      return (0, _math.abs)(y % DY) > _math.epsilon;
    }).map(y));
  }

  graticule.lines = function () {
    return lines().map(function (coordinates) {
      return {
        type: "LineString",
        coordinates: coordinates
      };
    });
  };

  graticule.outline = function () {
    return {
      type: "Polygon",
      coordinates: [X(X0).concat(Y(Y1).slice(1), X(X1).reverse().slice(1), Y(Y0).reverse().slice(1))]
    };
  };

  graticule.extent = function (_) {
    if (!arguments.length) return graticule.extentMinor();
    return graticule.extentMajor(_).extentMinor(_);
  };

  graticule.extentMajor = function (_) {
    if (!arguments.length) return [[X0, Y0], [X1, Y1]];
    X0 = +_[0][0], X1 = +_[1][0];
    Y0 = +_[0][1], Y1 = +_[1][1];
    if (X0 > X1) _ = X0, X0 = X1, X1 = _;
    if (Y0 > Y1) _ = Y0, Y0 = Y1, Y1 = _;
    return graticule.precision(precision);
  };

  graticule.extentMinor = function (_) {
    if (!arguments.length) return [[x0, y0], [x1, y1]];
    x0 = +_[0][0], x1 = +_[1][0];
    y0 = +_[0][1], y1 = +_[1][1];
    if (x0 > x1) _ = x0, x0 = x1, x1 = _;
    if (y0 > y1) _ = y0, y0 = y1, y1 = _;
    return graticule.precision(precision);
  };

  graticule.step = function (_) {
    if (!arguments.length) return graticule.stepMinor();
    return graticule.stepMajor(_).stepMinor(_);
  };

  graticule.stepMajor = function (_) {
    if (!arguments.length) return [DX, DY];
    DX = +_[0], DY = +_[1];
    return graticule;
  };

  graticule.stepMinor = function (_) {
    if (!arguments.length) return [dx, dy];
    dx = +_[0], dy = +_[1];
    return graticule;
  };

  graticule.precision = function (_) {
    if (!arguments.length) return precision;
    precision = +_;
    x = graticuleX(y0, y1, 90);
    y = graticuleY(x0, x1, precision);
    X = graticuleX(Y0, Y1, 90);
    Y = graticuleY(X0, X1, precision);
    return graticule;
  };

  return graticule.extentMajor([[-180, -90 + _math.epsilon], [180, 90 - _math.epsilon]]).extentMinor([[-180, -80 - _math.epsilon], [180, 80 + _math.epsilon]]);
}

function graticule10() {
  return graticule()();
}
},{"d3-array":"cBuZ","./math":"sEgP"}],"PyvU":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _math = require("./math");

function _default(a, b) {
  var x0 = a[0] * _math.radians,
      y0 = a[1] * _math.radians,
      x1 = b[0] * _math.radians,
      y1 = b[1] * _math.radians,
      cy0 = (0, _math.cos)(y0),
      sy0 = (0, _math.sin)(y0),
      cy1 = (0, _math.cos)(y1),
      sy1 = (0, _math.sin)(y1),
      kx0 = cy0 * (0, _math.cos)(x0),
      ky0 = cy0 * (0, _math.sin)(x0),
      kx1 = cy1 * (0, _math.cos)(x1),
      ky1 = cy1 * (0, _math.sin)(x1),
      d = 2 * (0, _math.asin)((0, _math.sqrt)((0, _math.haversin)(y1 - y0) + cy0 * cy1 * (0, _math.haversin)(x1 - x0))),
      k = (0, _math.sin)(d);
  var interpolate = d ? function (t) {
    var B = (0, _math.sin)(t *= d) / k,
        A = (0, _math.sin)(d - t) / k,
        x = A * kx0 + B * kx1,
        y = A * ky0 + B * ky1,
        z = A * sy0 + B * sy1;
    return [(0, _math.atan2)(y, x) * _math.degrees, (0, _math.atan2)(z, (0, _math.sqrt)(x * x + y * y)) * _math.degrees];
  } : function () {
    return [x0 * _math.degrees, y0 * _math.degrees];
  };
  interpolate.distance = d;
  return interpolate;
}
},{"./math":"sEgP"}],"tBtz":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _adder = _interopRequireDefault(require("../adder"));

var _math = require("../math");

var _noop = _interopRequireDefault(require("../noop"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var areaSum = (0, _adder.default)(),
    areaRingSum = (0, _adder.default)(),
    x00,
    y00,
    x0,
    y0;
var areaStream = {
  point: _noop.default,
  lineStart: _noop.default,
  lineEnd: _noop.default,
  polygonStart: function () {
    areaStream.lineStart = areaRingStart;
    areaStream.lineEnd = areaRingEnd;
  },
  polygonEnd: function () {
    areaStream.lineStart = areaStream.lineEnd = areaStream.point = _noop.default;
    areaSum.add((0, _math.abs)(areaRingSum));
    areaRingSum.reset();
  },
  result: function () {
    var area = areaSum / 2;
    areaSum.reset();
    return area;
  }
};

function areaRingStart() {
  areaStream.point = areaPointFirst;
}

function areaPointFirst(x, y) {
  areaStream.point = areaPoint;
  x00 = x0 = x, y00 = y0 = y;
}

function areaPoint(x, y) {
  areaRingSum.add(y0 * x - x0 * y);
  x0 = x, y0 = y;
}

function areaRingEnd() {
  areaPoint(x00, y00);
}

var _default = areaStream;
exports.default = _default;
},{"../adder":"GlqK","../math":"sEgP","../noop":"UPwg"}],"Mzp9":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _noop = _interopRequireDefault(require("../noop"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var x0 = Infinity,
    y0 = x0,
    x1 = -x0,
    y1 = x1;
var boundsStream = {
  point: boundsPoint,
  lineStart: _noop.default,
  lineEnd: _noop.default,
  polygonStart: _noop.default,
  polygonEnd: _noop.default,
  result: function () {
    var bounds = [[x0, y0], [x1, y1]];
    x1 = y1 = -(y0 = x0 = Infinity);
    return bounds;
  }
};

function boundsPoint(x, y) {
  if (x < x0) x0 = x;
  if (x > x1) x1 = x;
  if (y < y0) y0 = y;
  if (y > y1) y1 = y;
}

var _default = boundsStream;
exports.default = _default;
},{"../noop":"UPwg"}],"HLbf":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _math = require("../math");

// TODO Enforce positive area for exterior, negative area for interior?
var X0 = 0,
    Y0 = 0,
    Z0 = 0,
    X1 = 0,
    Y1 = 0,
    Z1 = 0,
    X2 = 0,
    Y2 = 0,
    Z2 = 0,
    x00,
    y00,
    x0,
    y0;
var centroidStream = {
  point: centroidPoint,
  lineStart: centroidLineStart,
  lineEnd: centroidLineEnd,
  polygonStart: function () {
    centroidStream.lineStart = centroidRingStart;
    centroidStream.lineEnd = centroidRingEnd;
  },
  polygonEnd: function () {
    centroidStream.point = centroidPoint;
    centroidStream.lineStart = centroidLineStart;
    centroidStream.lineEnd = centroidLineEnd;
  },
  result: function () {
    var centroid = Z2 ? [X2 / Z2, Y2 / Z2] : Z1 ? [X1 / Z1, Y1 / Z1] : Z0 ? [X0 / Z0, Y0 / Z0] : [NaN, NaN];
    X0 = Y0 = Z0 = X1 = Y1 = Z1 = X2 = Y2 = Z2 = 0;
    return centroid;
  }
};

function centroidPoint(x, y) {
  X0 += x;
  Y0 += y;
  ++Z0;
}

function centroidLineStart() {
  centroidStream.point = centroidPointFirstLine;
}

function centroidPointFirstLine(x, y) {
  centroidStream.point = centroidPointLine;
  centroidPoint(x0 = x, y0 = y);
}

function centroidPointLine(x, y) {
  var dx = x - x0,
      dy = y - y0,
      z = (0, _math.sqrt)(dx * dx + dy * dy);
  X1 += z * (x0 + x) / 2;
  Y1 += z * (y0 + y) / 2;
  Z1 += z;
  centroidPoint(x0 = x, y0 = y);
}

function centroidLineEnd() {
  centroidStream.point = centroidPoint;
}

function centroidRingStart() {
  centroidStream.point = centroidPointFirstRing;
}

function centroidRingEnd() {
  centroidPointRing(x00, y00);
}

function centroidPointFirstRing(x, y) {
  centroidStream.point = centroidPointRing;
  centroidPoint(x00 = x0 = x, y00 = y0 = y);
}

function centroidPointRing(x, y) {
  var dx = x - x0,
      dy = y - y0,
      z = (0, _math.sqrt)(dx * dx + dy * dy);
  X1 += z * (x0 + x) / 2;
  Y1 += z * (y0 + y) / 2;
  Z1 += z;
  z = y0 * x - x0 * y;
  X2 += z * (x0 + x);
  Y2 += z * (y0 + y);
  Z2 += z * 3;
  centroidPoint(x0 = x, y0 = y);
}

var _default = centroidStream;
exports.default = _default;
},{"../math":"sEgP"}],"ndK6":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = PathContext;

var _math = require("../math");

var _noop = _interopRequireDefault(require("../noop"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function PathContext(context) {
  this._context = context;
}

PathContext.prototype = {
  _radius: 4.5,
  pointRadius: function (_) {
    return this._radius = _, this;
  },
  polygonStart: function () {
    this._line = 0;
  },
  polygonEnd: function () {
    this._line = NaN;
  },
  lineStart: function () {
    this._point = 0;
  },
  lineEnd: function () {
    if (this._line === 0) this._context.closePath();
    this._point = NaN;
  },
  point: function (x, y) {
    switch (this._point) {
      case 0:
        {
          this._context.moveTo(x, y);

          this._point = 1;
          break;
        }

      case 1:
        {
          this._context.lineTo(x, y);

          break;
        }

      default:
        {
          this._context.moveTo(x + this._radius, y);

          this._context.arc(x, y, this._radius, 0, _math.tau);

          break;
        }
    }
  },
  result: _noop.default
};
},{"../math":"sEgP","../noop":"UPwg"}],"CqmG":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _adder = _interopRequireDefault(require("../adder"));

var _math = require("../math");

var _noop = _interopRequireDefault(require("../noop"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var lengthSum = (0, _adder.default)(),
    lengthRing,
    x00,
    y00,
    x0,
    y0;
var lengthStream = {
  point: _noop.default,
  lineStart: function () {
    lengthStream.point = lengthPointFirst;
  },
  lineEnd: function () {
    if (lengthRing) lengthPoint(x00, y00);
    lengthStream.point = _noop.default;
  },
  polygonStart: function () {
    lengthRing = true;
  },
  polygonEnd: function () {
    lengthRing = null;
  },
  result: function () {
    var length = +lengthSum;
    lengthSum.reset();
    return length;
  }
};

function lengthPointFirst(x, y) {
  lengthStream.point = lengthPoint;
  x00 = x0 = x, y00 = y0 = y;
}

function lengthPoint(x, y) {
  x0 -= x, y0 -= y;
  lengthSum.add((0, _math.sqrt)(x0 * x0 + y0 * y0));
  x0 = x, y0 = y;
}

var _default = lengthStream;
exports.default = _default;
},{"../adder":"GlqK","../math":"sEgP","../noop":"UPwg"}],"mB17":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = PathString;

function PathString() {
  this._string = [];
}

PathString.prototype = {
  _radius: 4.5,
  _circle: circle(4.5),
  pointRadius: function (_) {
    if ((_ = +_) !== this._radius) this._radius = _, this._circle = null;
    return this;
  },
  polygonStart: function () {
    this._line = 0;
  },
  polygonEnd: function () {
    this._line = NaN;
  },
  lineStart: function () {
    this._point = 0;
  },
  lineEnd: function () {
    if (this._line === 0) this._string.push("Z");
    this._point = NaN;
  },
  point: function (x, y) {
    switch (this._point) {
      case 0:
        {
          this._string.push("M", x, ",", y);

          this._point = 1;
          break;
        }

      case 1:
        {
          this._string.push("L", x, ",", y);

          break;
        }

      default:
        {
          if (this._circle == null) this._circle = circle(this._radius);

          this._string.push("M", x, ",", y, this._circle);

          break;
        }
    }
  },
  result: function () {
    if (this._string.length) {
      var result = this._string.join("");

      this._string = [];
      return result;
    } else {
      return null;
    }
  }
};

function circle(radius) {
  return "m0," + radius + "a" + radius + "," + radius + " 0 1,1 0," + -2 * radius + "a" + radius + "," + radius + " 0 1,1 0," + 2 * radius + "z";
}
},{}],"01A7":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _identity = _interopRequireDefault(require("../identity"));

var _stream = _interopRequireDefault(require("../stream"));

var _area = _interopRequireDefault(require("./area"));

var _bounds = _interopRequireDefault(require("./bounds"));

var _centroid = _interopRequireDefault(require("./centroid"));

var _context = _interopRequireDefault(require("./context"));

var _measure = _interopRequireDefault(require("./measure"));

var _string = _interopRequireDefault(require("./string"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(projection, context) {
  var pointRadius = 4.5,
      projectionStream,
      contextStream;

  function path(object) {
    if (object) {
      if (typeof pointRadius === "function") contextStream.pointRadius(+pointRadius.apply(this, arguments));
      (0, _stream.default)(object, projectionStream(contextStream));
    }

    return contextStream.result();
  }

  path.area = function (object) {
    (0, _stream.default)(object, projectionStream(_area.default));
    return _area.default.result();
  };

  path.measure = function (object) {
    (0, _stream.default)(object, projectionStream(_measure.default));
    return _measure.default.result();
  };

  path.bounds = function (object) {
    (0, _stream.default)(object, projectionStream(_bounds.default));
    return _bounds.default.result();
  };

  path.centroid = function (object) {
    (0, _stream.default)(object, projectionStream(_centroid.default));
    return _centroid.default.result();
  };

  path.projection = function (_) {
    return arguments.length ? (projectionStream = _ == null ? (projection = null, _identity.default) : (projection = _).stream, path) : projection;
  };

  path.context = function (_) {
    if (!arguments.length) return context;
    contextStream = _ == null ? (context = null, new _string.default()) : new _context.default(context = _);
    if (typeof pointRadius !== "function") contextStream.pointRadius(pointRadius);
    return path;
  };

  path.pointRadius = function (_) {
    if (!arguments.length) return pointRadius;
    pointRadius = typeof _ === "function" ? _ : (contextStream.pointRadius(+_), +_);
    return path;
  };

  return path.projection(projection).context(context);
}
},{"../identity":"nPOL","../stream":"XBFK","./area":"tBtz","./bounds":"Mzp9","./centroid":"HLbf","./context":"ndK6","./measure":"CqmG","./string":"mB17"}],"ubFV":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;
exports.transformer = transformer;

function _default(methods) {
  return {
    stream: transformer(methods)
  };
}

function transformer(methods) {
  return function (stream) {
    var s = new TransformStream();

    for (var key in methods) s[key] = methods[key];

    s.stream = stream;
    return s;
  };
}

function TransformStream() {}

TransformStream.prototype = {
  constructor: TransformStream,
  point: function (x, y) {
    this.stream.point(x, y);
  },
  sphere: function () {
    this.stream.sphere();
  },
  lineStart: function () {
    this.stream.lineStart();
  },
  lineEnd: function () {
    this.stream.lineEnd();
  },
  polygonStart: function () {
    this.stream.polygonStart();
  },
  polygonEnd: function () {
    this.stream.polygonEnd();
  }
};
},{}],"Ty3O":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.fitExtent = fitExtent;
exports.fitSize = fitSize;
exports.fitWidth = fitWidth;
exports.fitHeight = fitHeight;

var _stream = _interopRequireDefault(require("../stream"));

var _bounds = _interopRequireDefault(require("../path/bounds"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function fit(projection, fitBounds, object) {
  var clip = projection.clipExtent && projection.clipExtent();
  projection.scale(150).translate([0, 0]);
  if (clip != null) projection.clipExtent(null);
  (0, _stream.default)(object, projection.stream(_bounds.default));
  fitBounds(_bounds.default.result());
  if (clip != null) projection.clipExtent(clip);
  return projection;
}

function fitExtent(projection, extent, object) {
  return fit(projection, function (b) {
    var w = extent[1][0] - extent[0][0],
        h = extent[1][1] - extent[0][1],
        k = Math.min(w / (b[1][0] - b[0][0]), h / (b[1][1] - b[0][1])),
        x = +extent[0][0] + (w - k * (b[1][0] + b[0][0])) / 2,
        y = +extent[0][1] + (h - k * (b[1][1] + b[0][1])) / 2;
    projection.scale(150 * k).translate([x, y]);
  }, object);
}

function fitSize(projection, size, object) {
  return fitExtent(projection, [[0, 0], size], object);
}

function fitWidth(projection, width, object) {
  return fit(projection, function (b) {
    var w = +width,
        k = w / (b[1][0] - b[0][0]),
        x = (w - k * (b[1][0] + b[0][0])) / 2,
        y = -k * b[0][1];
    projection.scale(150 * k).translate([x, y]);
  }, object);
}

function fitHeight(projection, height, object) {
  return fit(projection, function (b) {
    var h = +height,
        k = h / (b[1][1] - b[0][1]),
        x = -k * b[0][0],
        y = (h - k * (b[1][1] + b[0][1])) / 2;
    projection.scale(150 * k).translate([x, y]);
  }, object);
}
},{"../stream":"XBFK","../path/bounds":"Mzp9"}],"1vIa":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _cartesian = require("../cartesian");

var _math = require("../math");

var _transform = require("../transform");

var maxDepth = 16,
    // maximum depth of subdivision
cosMinDistance = (0, _math.cos)(30 * _math.radians); // cos(minimum angular distance)

function _default(project, delta2) {
  return +delta2 ? resample(project, delta2) : resampleNone(project);
}

function resampleNone(project) {
  return (0, _transform.transformer)({
    point: function (x, y) {
      x = project(x, y);
      this.stream.point(x[0], x[1]);
    }
  });
}

function resample(project, delta2) {
  function resampleLineTo(x0, y0, lambda0, a0, b0, c0, x1, y1, lambda1, a1, b1, c1, depth, stream) {
    var dx = x1 - x0,
        dy = y1 - y0,
        d2 = dx * dx + dy * dy;

    if (d2 > 4 * delta2 && depth--) {
      var a = a0 + a1,
          b = b0 + b1,
          c = c0 + c1,
          m = (0, _math.sqrt)(a * a + b * b + c * c),
          phi2 = (0, _math.asin)(c /= m),
          lambda2 = (0, _math.abs)((0, _math.abs)(c) - 1) < _math.epsilon || (0, _math.abs)(lambda0 - lambda1) < _math.epsilon ? (lambda0 + lambda1) / 2 : (0, _math.atan2)(b, a),
          p = project(lambda2, phi2),
          x2 = p[0],
          y2 = p[1],
          dx2 = x2 - x0,
          dy2 = y2 - y0,
          dz = dy * dx2 - dx * dy2;

      if (dz * dz / d2 > delta2 // perpendicular projected distance
      || (0, _math.abs)((dx * dx2 + dy * dy2) / d2 - 0.5) > 0.3 // midpoint close to an end
      || a0 * a1 + b0 * b1 + c0 * c1 < cosMinDistance) {
        // angular distance
        resampleLineTo(x0, y0, lambda0, a0, b0, c0, x2, y2, lambda2, a /= m, b /= m, c, depth, stream);
        stream.point(x2, y2);
        resampleLineTo(x2, y2, lambda2, a, b, c, x1, y1, lambda1, a1, b1, c1, depth, stream);
      }
    }
  }

  return function (stream) {
    var lambda00, x00, y00, a00, b00, c00, // first point
    lambda0, x0, y0, a0, b0, c0; // previous point

    var resampleStream = {
      point: point,
      lineStart: lineStart,
      lineEnd: lineEnd,
      polygonStart: function () {
        stream.polygonStart();
        resampleStream.lineStart = ringStart;
      },
      polygonEnd: function () {
        stream.polygonEnd();
        resampleStream.lineStart = lineStart;
      }
    };

    function point(x, y) {
      x = project(x, y);
      stream.point(x[0], x[1]);
    }

    function lineStart() {
      x0 = NaN;
      resampleStream.point = linePoint;
      stream.lineStart();
    }

    function linePoint(lambda, phi) {
      var c = (0, _cartesian.cartesian)([lambda, phi]),
          p = project(lambda, phi);
      resampleLineTo(x0, y0, lambda0, a0, b0, c0, x0 = p[0], y0 = p[1], lambda0 = lambda, a0 = c[0], b0 = c[1], c0 = c[2], maxDepth, stream);
      stream.point(x0, y0);
    }

    function lineEnd() {
      resampleStream.point = point;
      stream.lineEnd();
    }

    function ringStart() {
      lineStart();
      resampleStream.point = ringPoint;
      resampleStream.lineEnd = ringEnd;
    }

    function ringPoint(lambda, phi) {
      linePoint(lambda00 = lambda, phi), x00 = x0, y00 = y0, a00 = a0, b00 = b0, c00 = c0;
      resampleStream.point = linePoint;
    }

    function ringEnd() {
      resampleLineTo(x0, y0, lambda0, a0, b0, c0, x00, y00, lambda00, a00, b00, c00, maxDepth, stream);
      resampleStream.lineEnd = lineEnd;
      lineEnd();
    }

    return resampleStream;
  };
}
},{"../cartesian":"+rFM","../math":"sEgP","../transform":"ubFV"}],"t1yD":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = projection;
exports.projectionMutator = projectionMutator;

var _antimeridian = _interopRequireDefault(require("../clip/antimeridian"));

var _circle = _interopRequireDefault(require("../clip/circle"));

var _rectangle = _interopRequireDefault(require("../clip/rectangle"));

var _compose = _interopRequireDefault(require("../compose"));

var _identity = _interopRequireDefault(require("../identity"));

var _math = require("../math");

var _rotation = require("../rotation");

var _transform = require("../transform");

var _fit = require("./fit");

var _resample = _interopRequireDefault(require("./resample"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var transformRadians = (0, _transform.transformer)({
  point: function (x, y) {
    this.stream.point(x * _math.radians, y * _math.radians);
  }
});

function transformRotate(rotate) {
  return (0, _transform.transformer)({
    point: function (x, y) {
      var r = rotate(x, y);
      return this.stream.point(r[0], r[1]);
    }
  });
}

function scaleTranslate(k, dx, dy) {
  function transform(x, y) {
    return [dx + k * x, dy - k * y];
  }

  transform.invert = function (x, y) {
    return [(x - dx) / k, (dy - y) / k];
  };

  return transform;
}

function scaleTranslateRotate(k, dx, dy, alpha) {
  var cosAlpha = (0, _math.cos)(alpha),
      sinAlpha = (0, _math.sin)(alpha),
      a = cosAlpha * k,
      b = sinAlpha * k,
      ai = cosAlpha / k,
      bi = sinAlpha / k,
      ci = (sinAlpha * dy - cosAlpha * dx) / k,
      fi = (sinAlpha * dx + cosAlpha * dy) / k;

  function transform(x, y) {
    return [a * x - b * y + dx, dy - b * x - a * y];
  }

  transform.invert = function (x, y) {
    return [ai * x - bi * y + ci, fi - bi * x - ai * y];
  };

  return transform;
}

function projection(project) {
  return projectionMutator(function () {
    return project;
  })();
}

function projectionMutator(projectAt) {
  var project,
      k = 150,
      // scale
  x = 480,
      y = 250,
      // translate
  lambda = 0,
      phi = 0,
      // center
  deltaLambda = 0,
      deltaPhi = 0,
      deltaGamma = 0,
      rotate,
      // pre-rotate
  alpha = 0,
      // post-rotate
  theta = null,
      preclip = _antimeridian.default,
      // pre-clip angle
  x0 = null,
      y0,
      x1,
      y1,
      postclip = _identity.default,
      // post-clip extent
  delta2 = 0.5,
      // precision
  projectResample,
      projectTransform,
      projectRotateTransform,
      cache,
      cacheStream;

  function projection(point) {
    return projectRotateTransform(point[0] * _math.radians, point[1] * _math.radians);
  }

  function invert(point) {
    point = projectRotateTransform.invert(point[0], point[1]);
    return point && [point[0] * _math.degrees, point[1] * _math.degrees];
  }

  projection.stream = function (stream) {
    return cache && cacheStream === stream ? cache : cache = transformRadians(transformRotate(rotate)(preclip(projectResample(postclip(cacheStream = stream)))));
  };

  projection.preclip = function (_) {
    return arguments.length ? (preclip = _, theta = undefined, reset()) : preclip;
  };

  projection.postclip = function (_) {
    return arguments.length ? (postclip = _, x0 = y0 = x1 = y1 = null, reset()) : postclip;
  };

  projection.clipAngle = function (_) {
    return arguments.length ? (preclip = +_ ? (0, _circle.default)(theta = _ * _math.radians) : (theta = null, _antimeridian.default), reset()) : theta * _math.degrees;
  };

  projection.clipExtent = function (_) {
    return arguments.length ? (postclip = _ == null ? (x0 = y0 = x1 = y1 = null, _identity.default) : (0, _rectangle.default)(x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1]), reset()) : x0 == null ? null : [[x0, y0], [x1, y1]];
  };

  projection.scale = function (_) {
    return arguments.length ? (k = +_, recenter()) : k;
  };

  projection.translate = function (_) {
    return arguments.length ? (x = +_[0], y = +_[1], recenter()) : [x, y];
  };

  projection.center = function (_) {
    return arguments.length ? (lambda = _[0] % 360 * _math.radians, phi = _[1] % 360 * _math.radians, recenter()) : [lambda * _math.degrees, phi * _math.degrees];
  };

  projection.rotate = function (_) {
    return arguments.length ? (deltaLambda = _[0] % 360 * _math.radians, deltaPhi = _[1] % 360 * _math.radians, deltaGamma = _.length > 2 ? _[2] % 360 * _math.radians : 0, recenter()) : [deltaLambda * _math.degrees, deltaPhi * _math.degrees, deltaGamma * _math.degrees];
  };

  projection.angle = function (_) {
    return arguments.length ? (alpha = _ % 360 * _math.radians, recenter()) : alpha * _math.degrees;
  };

  projection.precision = function (_) {
    return arguments.length ? (projectResample = (0, _resample.default)(projectTransform, delta2 = _ * _), reset()) : (0, _math.sqrt)(delta2);
  };

  projection.fitExtent = function (extent, object) {
    return (0, _fit.fitExtent)(projection, extent, object);
  };

  projection.fitSize = function (size, object) {
    return (0, _fit.fitSize)(projection, size, object);
  };

  projection.fitWidth = function (width, object) {
    return (0, _fit.fitWidth)(projection, width, object);
  };

  projection.fitHeight = function (height, object) {
    return (0, _fit.fitHeight)(projection, height, object);
  };

  function recenter() {
    var center = scaleTranslateRotate(k, 0, 0, alpha).apply(null, project(lambda, phi)),
        transform = (alpha ? scaleTranslateRotate : scaleTranslate)(k, x - center[0], y - center[1], alpha);
    rotate = (0, _rotation.rotateRadians)(deltaLambda, deltaPhi, deltaGamma);
    projectTransform = (0, _compose.default)(project, transform);
    projectRotateTransform = (0, _compose.default)(rotate, projectTransform);
    projectResample = (0, _resample.default)(projectTransform, delta2);
    return reset();
  }

  function reset() {
    cache = cacheStream = null;
    return projection;
  }

  return function () {
    project = projectAt.apply(this, arguments);
    projection.invert = project.invert && invert;
    return recenter();
  };
}
},{"../clip/antimeridian":"CWnN","../clip/circle":"1uul","../clip/rectangle":"E6SH","../compose":"hCea","../identity":"nPOL","../math":"sEgP","../rotation":"KwdP","../transform":"ubFV","./fit":"Ty3O","./resample":"1vIa"}],"FzMl":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.conicProjection = conicProjection;

var _math = require("../math");

var _index = require("./index");

function conicProjection(projectAt) {
  var phi0 = 0,
      phi1 = _math.pi / 3,
      m = (0, _index.projectionMutator)(projectAt),
      p = m(phi0, phi1);

  p.parallels = function (_) {
    return arguments.length ? m(phi0 = _[0] * _math.radians, phi1 = _[1] * _math.radians) : [phi0 * _math.degrees, phi1 * _math.degrees];
  };

  return p;
}
},{"../math":"sEgP","./index":"t1yD"}],"5xg5":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.cylindricalEqualAreaRaw = cylindricalEqualAreaRaw;

var _math = require("../math");

function cylindricalEqualAreaRaw(phi0) {
  var cosPhi0 = (0, _math.cos)(phi0);

  function forward(lambda, phi) {
    return [lambda * cosPhi0, (0, _math.sin)(phi) / cosPhi0];
  }

  forward.invert = function (x, y) {
    return [x / cosPhi0, (0, _math.asin)(y * cosPhi0)];
  };

  return forward;
}
},{"../math":"sEgP"}],"uvEu":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.conicEqualAreaRaw = conicEqualAreaRaw;
exports.default = _default;

var _math = require("../math");

var _conic = require("./conic");

var _cylindricalEqualArea = require("./cylindricalEqualArea");

function conicEqualAreaRaw(y0, y1) {
  var sy0 = (0, _math.sin)(y0),
      n = (sy0 + (0, _math.sin)(y1)) / 2; // Are the parallels symmetrical around the Equator?

  if ((0, _math.abs)(n) < _math.epsilon) return (0, _cylindricalEqualArea.cylindricalEqualAreaRaw)(y0);
  var c = 1 + sy0 * (2 * n - sy0),
      r0 = (0, _math.sqrt)(c) / n;

  function project(x, y) {
    var r = (0, _math.sqrt)(c - 2 * n * (0, _math.sin)(y)) / n;
    return [r * (0, _math.sin)(x *= n), r0 - r * (0, _math.cos)(x)];
  }

  project.invert = function (x, y) {
    var r0y = r0 - y;
    return [(0, _math.atan2)(x, (0, _math.abs)(r0y)) / n * (0, _math.sign)(r0y), (0, _math.asin)((c - (x * x + r0y * r0y) * n * n) / (2 * n))];
  };

  return project;
}

function _default() {
  return (0, _conic.conicProjection)(conicEqualAreaRaw).scale(155.424).center([0, 33.6442]);
}
},{"../math":"sEgP","./conic":"FzMl","./cylindricalEqualArea":"5xg5"}],"HUYT":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _conicEqualArea = _interopRequireDefault(require("./conicEqualArea"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default() {
  return (0, _conicEqualArea.default)().parallels([29.5, 45.5]).scale(1070).translate([480, 250]).rotate([96, 0]).center([-0.6, 38.7]);
}
},{"./conicEqualArea":"uvEu"}],"WyCU":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _math = require("../math");

var _albers = _interopRequireDefault(require("./albers"));

var _conicEqualArea = _interopRequireDefault(require("./conicEqualArea"));

var _fit = require("./fit");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// The projections must have mutually exclusive clip regions on the sphere,
// as this will avoid emitting interleaving lines and polygons.
function multiplex(streams) {
  var n = streams.length;
  return {
    point: function (x, y) {
      var i = -1;

      while (++i < n) streams[i].point(x, y);
    },
    sphere: function () {
      var i = -1;

      while (++i < n) streams[i].sphere();
    },
    lineStart: function () {
      var i = -1;

      while (++i < n) streams[i].lineStart();
    },
    lineEnd: function () {
      var i = -1;

      while (++i < n) streams[i].lineEnd();
    },
    polygonStart: function () {
      var i = -1;

      while (++i < n) streams[i].polygonStart();
    },
    polygonEnd: function () {
      var i = -1;

      while (++i < n) streams[i].polygonEnd();
    }
  };
} // A composite projection for the United States, configured by default for
// 960×500. The projection also works quite well at 960×600 if you change the
// scale to 1285 and adjust the translate accordingly. The set of standard
// parallels for each region comes from USGS, which is published here:
// http://egsc.usgs.gov/isb/pubs/MapProjections/projections.html#albers


function _default() {
  var cache,
      cacheStream,
      lower48 = (0, _albers.default)(),
      lower48Point,
      alaska = (0, _conicEqualArea.default)().rotate([154, 0]).center([-2, 58.5]).parallels([55, 65]),
      alaskaPoint,
      // EPSG:3338
  hawaii = (0, _conicEqualArea.default)().rotate([157, 0]).center([-3, 19.9]).parallels([8, 18]),
      hawaiiPoint,
      // ESRI:102007
  point,
      pointStream = {
    point: function (x, y) {
      point = [x, y];
    }
  };

  function albersUsa(coordinates) {
    var x = coordinates[0],
        y = coordinates[1];
    return point = null, (lower48Point.point(x, y), point) || (alaskaPoint.point(x, y), point) || (hawaiiPoint.point(x, y), point);
  }

  albersUsa.invert = function (coordinates) {
    var k = lower48.scale(),
        t = lower48.translate(),
        x = (coordinates[0] - t[0]) / k,
        y = (coordinates[1] - t[1]) / k;
    return (y >= 0.120 && y < 0.234 && x >= -0.425 && x < -0.214 ? alaska : y >= 0.166 && y < 0.234 && x >= -0.214 && x < -0.115 ? hawaii : lower48).invert(coordinates);
  };

  albersUsa.stream = function (stream) {
    return cache && cacheStream === stream ? cache : cache = multiplex([lower48.stream(cacheStream = stream), alaska.stream(stream), hawaii.stream(stream)]);
  };

  albersUsa.precision = function (_) {
    if (!arguments.length) return lower48.precision();
    lower48.precision(_), alaska.precision(_), hawaii.precision(_);
    return reset();
  };

  albersUsa.scale = function (_) {
    if (!arguments.length) return lower48.scale();
    lower48.scale(_), alaska.scale(_ * 0.35), hawaii.scale(_);
    return albersUsa.translate(lower48.translate());
  };

  albersUsa.translate = function (_) {
    if (!arguments.length) return lower48.translate();
    var k = lower48.scale(),
        x = +_[0],
        y = +_[1];
    lower48Point = lower48.translate(_).clipExtent([[x - 0.455 * k, y - 0.238 * k], [x + 0.455 * k, y + 0.238 * k]]).stream(pointStream);
    alaskaPoint = alaska.translate([x - 0.307 * k, y + 0.201 * k]).clipExtent([[x - 0.425 * k + _math.epsilon, y + 0.120 * k + _math.epsilon], [x - 0.214 * k - _math.epsilon, y + 0.234 * k - _math.epsilon]]).stream(pointStream);
    hawaiiPoint = hawaii.translate([x - 0.205 * k, y + 0.212 * k]).clipExtent([[x - 0.214 * k + _math.epsilon, y + 0.166 * k + _math.epsilon], [x - 0.115 * k - _math.epsilon, y + 0.234 * k - _math.epsilon]]).stream(pointStream);
    return reset();
  };

  albersUsa.fitExtent = function (extent, object) {
    return (0, _fit.fitExtent)(albersUsa, extent, object);
  };

  albersUsa.fitSize = function (size, object) {
    return (0, _fit.fitSize)(albersUsa, size, object);
  };

  albersUsa.fitWidth = function (width, object) {
    return (0, _fit.fitWidth)(albersUsa, width, object);
  };

  albersUsa.fitHeight = function (height, object) {
    return (0, _fit.fitHeight)(albersUsa, height, object);
  };

  function reset() {
    cache = cacheStream = null;
    return albersUsa;
  }

  return albersUsa.scale(1070);
}
},{"../math":"sEgP","./albers":"HUYT","./conicEqualArea":"uvEu","./fit":"Ty3O"}],"/4FJ":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.azimuthalRaw = azimuthalRaw;
exports.azimuthalInvert = azimuthalInvert;

var _math = require("../math");

function azimuthalRaw(scale) {
  return function (x, y) {
    var cx = (0, _math.cos)(x),
        cy = (0, _math.cos)(y),
        k = scale(cx * cy);
    return [k * cy * (0, _math.sin)(x), k * (0, _math.sin)(y)];
  };
}

function azimuthalInvert(angle) {
  return function (x, y) {
    var z = (0, _math.sqrt)(x * x + y * y),
        c = angle(z),
        sc = (0, _math.sin)(c),
        cc = (0, _math.cos)(c);
    return [(0, _math.atan2)(x * sc, z * cc), (0, _math.asin)(z && y * sc / z)];
  };
}
},{"../math":"sEgP"}],"c9jZ":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;
exports.azimuthalEqualAreaRaw = void 0;

var _math = require("../math");

var _azimuthal = require("./azimuthal");

var _index = _interopRequireDefault(require("./index"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var azimuthalEqualAreaRaw = (0, _azimuthal.azimuthalRaw)(function (cxcy) {
  return (0, _math.sqrt)(2 / (1 + cxcy));
});
exports.azimuthalEqualAreaRaw = azimuthalEqualAreaRaw;
azimuthalEqualAreaRaw.invert = (0, _azimuthal.azimuthalInvert)(function (z) {
  return 2 * (0, _math.asin)(z / 2);
});

function _default() {
  return (0, _index.default)(azimuthalEqualAreaRaw).scale(124.75).clipAngle(180 - 1e-3);
}
},{"../math":"sEgP","./azimuthal":"/4FJ","./index":"t1yD"}],"DPfU":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;
exports.azimuthalEquidistantRaw = void 0;

var _math = require("../math");

var _azimuthal = require("./azimuthal");

var _index = _interopRequireDefault(require("./index"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var azimuthalEquidistantRaw = (0, _azimuthal.azimuthalRaw)(function (c) {
  return (c = (0, _math.acos)(c)) && c / (0, _math.sin)(c);
});
exports.azimuthalEquidistantRaw = azimuthalEquidistantRaw;
azimuthalEquidistantRaw.invert = (0, _azimuthal.azimuthalInvert)(function (z) {
  return z;
});

function _default() {
  return (0, _index.default)(azimuthalEquidistantRaw).scale(79.4188).clipAngle(180 - 1e-3);
}
},{"../math":"sEgP","./azimuthal":"/4FJ","./index":"t1yD"}],"Yvwi":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.mercatorRaw = mercatorRaw;
exports.default = _default;
exports.mercatorProjection = mercatorProjection;

var _math = require("../math");

var _rotation = _interopRequireDefault(require("../rotation"));

var _index = _interopRequireDefault(require("./index"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function mercatorRaw(lambda, phi) {
  return [lambda, (0, _math.log)((0, _math.tan)((_math.halfPi + phi) / 2))];
}

mercatorRaw.invert = function (x, y) {
  return [x, 2 * (0, _math.atan)((0, _math.exp)(y)) - _math.halfPi];
};

function _default() {
  return mercatorProjection(mercatorRaw).scale(961 / _math.tau);
}

function mercatorProjection(project) {
  var m = (0, _index.default)(project),
      center = m.center,
      scale = m.scale,
      translate = m.translate,
      clipExtent = m.clipExtent,
      x0 = null,
      y0,
      x1,
      y1; // clip extent

  m.scale = function (_) {
    return arguments.length ? (scale(_), reclip()) : scale();
  };

  m.translate = function (_) {
    return arguments.length ? (translate(_), reclip()) : translate();
  };

  m.center = function (_) {
    return arguments.length ? (center(_), reclip()) : center();
  };

  m.clipExtent = function (_) {
    return arguments.length ? (_ == null ? x0 = y0 = x1 = y1 = null : (x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1]), reclip()) : x0 == null ? null : [[x0, y0], [x1, y1]];
  };

  function reclip() {
    var k = _math.pi * scale(),
        t = m((0, _rotation.default)(m.rotate()).invert([0, 0]));
    return clipExtent(x0 == null ? [[t[0] - k, t[1] - k], [t[0] + k, t[1] + k]] : project === mercatorRaw ? [[Math.max(t[0] - k, x0), y0], [Math.min(t[0] + k, x1), y1]] : [[x0, Math.max(t[1] - k, y0)], [x1, Math.min(t[1] + k, y1)]]);
  }

  return reclip();
}
},{"../math":"sEgP","../rotation":"KwdP","./index":"t1yD"}],"QZ/H":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.conicConformalRaw = conicConformalRaw;
exports.default = _default;

var _math = require("../math");

var _conic = require("./conic");

var _mercator = require("./mercator");

function tany(y) {
  return (0, _math.tan)((_math.halfPi + y) / 2);
}

function conicConformalRaw(y0, y1) {
  var cy0 = (0, _math.cos)(y0),
      n = y0 === y1 ? (0, _math.sin)(y0) : (0, _math.log)(cy0 / (0, _math.cos)(y1)) / (0, _math.log)(tany(y1) / tany(y0)),
      f = cy0 * (0, _math.pow)(tany(y0), n) / n;
  if (!n) return _mercator.mercatorRaw;

  function project(x, y) {
    if (f > 0) {
      if (y < -_math.halfPi + _math.epsilon) y = -_math.halfPi + _math.epsilon;
    } else {
      if (y > _math.halfPi - _math.epsilon) y = _math.halfPi - _math.epsilon;
    }

    var r = f / (0, _math.pow)(tany(y), n);
    return [r * (0, _math.sin)(n * x), f - r * (0, _math.cos)(n * x)];
  }

  project.invert = function (x, y) {
    var fy = f - y,
        r = (0, _math.sign)(n) * (0, _math.sqrt)(x * x + fy * fy);
    return [(0, _math.atan2)(x, (0, _math.abs)(fy)) / n * (0, _math.sign)(fy), 2 * (0, _math.atan)((0, _math.pow)(f / r, 1 / n)) - _math.halfPi];
  };

  return project;
}

function _default() {
  return (0, _conic.conicProjection)(conicConformalRaw).scale(109.5).parallels([30, 30]);
}
},{"../math":"sEgP","./conic":"FzMl","./mercator":"Yvwi"}],"xN4O":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.equirectangularRaw = equirectangularRaw;
exports.default = _default;

var _index = _interopRequireDefault(require("./index"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function equirectangularRaw(lambda, phi) {
  return [lambda, phi];
}

equirectangularRaw.invert = equirectangularRaw;

function _default() {
  return (0, _index.default)(equirectangularRaw).scale(152.63);
}
},{"./index":"t1yD"}],"wKng":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.conicEquidistantRaw = conicEquidistantRaw;
exports.default = _default;

var _math = require("../math");

var _conic = require("./conic");

var _equirectangular = require("./equirectangular");

function conicEquidistantRaw(y0, y1) {
  var cy0 = (0, _math.cos)(y0),
      n = y0 === y1 ? (0, _math.sin)(y0) : (cy0 - (0, _math.cos)(y1)) / (y1 - y0),
      g = cy0 / n + y0;
  if ((0, _math.abs)(n) < _math.epsilon) return _equirectangular.equirectangularRaw;

  function project(x, y) {
    var gy = g - y,
        nx = n * x;
    return [gy * (0, _math.sin)(nx), g - gy * (0, _math.cos)(nx)];
  }

  project.invert = function (x, y) {
    var gy = g - y;
    return [(0, _math.atan2)(x, (0, _math.abs)(gy)) / n * (0, _math.sign)(gy), g - (0, _math.sign)(n) * (0, _math.sqrt)(x * x + gy * gy)];
  };

  return project;
}

function _default() {
  return (0, _conic.conicProjection)(conicEquidistantRaw).scale(131.154).center([0, 13.9389]);
}
},{"../math":"sEgP","./conic":"FzMl","./equirectangular":"xN4O"}],"svXP":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.equalEarthRaw = equalEarthRaw;
exports.default = _default;

var _index = _interopRequireDefault(require("./index.js"));

var _math = require("../math.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var A1 = 1.340264,
    A2 = -0.081106,
    A3 = 0.000893,
    A4 = 0.003796,
    M = (0, _math.sqrt)(3) / 2,
    iterations = 12;

function equalEarthRaw(lambda, phi) {
  var l = (0, _math.asin)(M * (0, _math.sin)(phi)),
      l2 = l * l,
      l6 = l2 * l2 * l2;
  return [lambda * (0, _math.cos)(l) / (M * (A1 + 3 * A2 * l2 + l6 * (7 * A3 + 9 * A4 * l2))), l * (A1 + A2 * l2 + l6 * (A3 + A4 * l2))];
}

equalEarthRaw.invert = function (x, y) {
  var l = y,
      l2 = l * l,
      l6 = l2 * l2 * l2;

  for (var i = 0, delta, fy, fpy; i < iterations; ++i) {
    fy = l * (A1 + A2 * l2 + l6 * (A3 + A4 * l2)) - y;
    fpy = A1 + 3 * A2 * l2 + l6 * (7 * A3 + 9 * A4 * l2);
    l -= delta = fy / fpy, l2 = l * l, l6 = l2 * l2 * l2;
    if ((0, _math.abs)(delta) < _math.epsilon2) break;
  }

  return [M * x * (A1 + 3 * A2 * l2 + l6 * (7 * A3 + 9 * A4 * l2)) / (0, _math.cos)(l), (0, _math.asin)((0, _math.sin)(l) / M)];
};

function _default() {
  return (0, _index.default)(equalEarthRaw).scale(177.158);
}
},{"./index.js":"t1yD","../math.js":"sEgP"}],"bmsS":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.gnomonicRaw = gnomonicRaw;
exports.default = _default;

var _math = require("../math");

var _azimuthal = require("./azimuthal");

var _index = _interopRequireDefault(require("./index"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function gnomonicRaw(x, y) {
  var cy = (0, _math.cos)(y),
      k = (0, _math.cos)(x) * cy;
  return [cy * (0, _math.sin)(x) / k, (0, _math.sin)(y) / k];
}

gnomonicRaw.invert = (0, _azimuthal.azimuthalInvert)(_math.atan);

function _default() {
  return (0, _index.default)(gnomonicRaw).scale(144.049).clipAngle(60);
}
},{"../math":"sEgP","./azimuthal":"/4FJ","./index":"t1yD"}],"LapZ":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _rectangle = _interopRequireDefault(require("../clip/rectangle"));

var _identity = _interopRequireDefault(require("../identity"));

var _transform = require("../transform");

var _fit = require("./fit");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function scaleTranslate(kx, ky, tx, ty) {
  return kx === 1 && ky === 1 && tx === 0 && ty === 0 ? _identity.default : (0, _transform.transformer)({
    point: function (x, y) {
      this.stream.point(x * kx + tx, y * ky + ty);
    }
  });
}

function _default() {
  var k = 1,
      tx = 0,
      ty = 0,
      sx = 1,
      sy = 1,
      transform = _identity.default,
      // scale, translate and reflect
  x0 = null,
      y0,
      x1,
      y1,
      // clip extent
  postclip = _identity.default,
      cache,
      cacheStream,
      projection;

  function reset() {
    cache = cacheStream = null;
    return projection;
  }

  return projection = {
    stream: function (stream) {
      return cache && cacheStream === stream ? cache : cache = transform(postclip(cacheStream = stream));
    },
    postclip: function (_) {
      return arguments.length ? (postclip = _, x0 = y0 = x1 = y1 = null, reset()) : postclip;
    },
    clipExtent: function (_) {
      return arguments.length ? (postclip = _ == null ? (x0 = y0 = x1 = y1 = null, _identity.default) : (0, _rectangle.default)(x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1]), reset()) : x0 == null ? null : [[x0, y0], [x1, y1]];
    },
    scale: function (_) {
      return arguments.length ? (transform = scaleTranslate((k = +_) * sx, k * sy, tx, ty), reset()) : k;
    },
    translate: function (_) {
      return arguments.length ? (transform = scaleTranslate(k * sx, k * sy, tx = +_[0], ty = +_[1]), reset()) : [tx, ty];
    },
    reflectX: function (_) {
      return arguments.length ? (transform = scaleTranslate(k * (sx = _ ? -1 : 1), k * sy, tx, ty), reset()) : sx < 0;
    },
    reflectY: function (_) {
      return arguments.length ? (transform = scaleTranslate(k * sx, k * (sy = _ ? -1 : 1), tx, ty), reset()) : sy < 0;
    },
    fitExtent: function (extent, object) {
      return (0, _fit.fitExtent)(projection, extent, object);
    },
    fitSize: function (size, object) {
      return (0, _fit.fitSize)(projection, size, object);
    },
    fitWidth: function (width, object) {
      return (0, _fit.fitWidth)(projection, width, object);
    },
    fitHeight: function (height, object) {
      return (0, _fit.fitHeight)(projection, height, object);
    }
  };
}
},{"../clip/rectangle":"E6SH","../identity":"nPOL","../transform":"ubFV","./fit":"Ty3O"}],"yWpl":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.naturalEarth1Raw = naturalEarth1Raw;
exports.default = _default;

var _index = _interopRequireDefault(require("./index"));

var _math = require("../math");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function naturalEarth1Raw(lambda, phi) {
  var phi2 = phi * phi,
      phi4 = phi2 * phi2;
  return [lambda * (0.8707 - 0.131979 * phi2 + phi4 * (-0.013791 + phi4 * (0.003971 * phi2 - 0.001529 * phi4))), phi * (1.007226 + phi2 * (0.015085 + phi4 * (-0.044475 + 0.028874 * phi2 - 0.005916 * phi4)))];
}

naturalEarth1Raw.invert = function (x, y) {
  var phi = y,
      i = 25,
      delta;

  do {
    var phi2 = phi * phi,
        phi4 = phi2 * phi2;
    phi -= delta = (phi * (1.007226 + phi2 * (0.015085 + phi4 * (-0.044475 + 0.028874 * phi2 - 0.005916 * phi4))) - y) / (1.007226 + phi2 * (0.015085 * 3 + phi4 * (-0.044475 * 7 + 0.028874 * 9 * phi2 - 0.005916 * 11 * phi4)));
  } while ((0, _math.abs)(delta) > _math.epsilon && --i > 0);

  return [x / (0.8707 + (phi2 = phi * phi) * (-0.131979 + phi2 * (-0.013791 + phi2 * phi2 * phi2 * (0.003971 - 0.001529 * phi2)))), phi];
};

function _default() {
  return (0, _index.default)(naturalEarth1Raw).scale(175.295);
}
},{"./index":"t1yD","../math":"sEgP"}],"H7pW":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.orthographicRaw = orthographicRaw;
exports.default = _default;

var _math = require("../math");

var _azimuthal = require("./azimuthal");

var _index = _interopRequireDefault(require("./index"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function orthographicRaw(x, y) {
  return [(0, _math.cos)(y) * (0, _math.sin)(x), (0, _math.sin)(y)];
}

orthographicRaw.invert = (0, _azimuthal.azimuthalInvert)(_math.asin);

function _default() {
  return (0, _index.default)(orthographicRaw).scale(249.5).clipAngle(90 + _math.epsilon);
}
},{"../math":"sEgP","./azimuthal":"/4FJ","./index":"t1yD"}],"bNxf":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.stereographicRaw = stereographicRaw;
exports.default = _default;

var _math = require("../math");

var _azimuthal = require("./azimuthal");

var _index = _interopRequireDefault(require("./index"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function stereographicRaw(x, y) {
  var cy = (0, _math.cos)(y),
      k = 1 + (0, _math.cos)(x) * cy;
  return [cy * (0, _math.sin)(x) / k, (0, _math.sin)(y) / k];
}

stereographicRaw.invert = (0, _azimuthal.azimuthalInvert)(function (z) {
  return 2 * (0, _math.atan)(z);
});

function _default() {
  return (0, _index.default)(stereographicRaw).scale(250).clipAngle(142);
}
},{"../math":"sEgP","./azimuthal":"/4FJ","./index":"t1yD"}],"BGbj":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.transverseMercatorRaw = transverseMercatorRaw;
exports.default = _default;

var _math = require("../math");

var _mercator = require("./mercator");

function transverseMercatorRaw(lambda, phi) {
  return [(0, _math.log)((0, _math.tan)((_math.halfPi + phi) / 2)), -lambda];
}

transverseMercatorRaw.invert = function (x, y) {
  return [-y, 2 * (0, _math.atan)((0, _math.exp)(x)) - _math.halfPi];
};

function _default() {
  var m = (0, _mercator.mercatorProjection)(transverseMercatorRaw),
      center = m.center,
      rotate = m.rotate;

  m.center = function (_) {
    return arguments.length ? center([-_[1], _[0]]) : (_ = center(), [_[1], -_[0]]);
  };

  m.rotate = function (_) {
    return arguments.length ? rotate([_[0], _[1], _.length > 2 ? _[2] + 90 : 90]) : (_ = rotate(), [_[0], _[1], _[2] - 90]);
  };

  return rotate([0, 0, 90]).scale(159.155);
}
},{"../math":"sEgP","./mercator":"Yvwi"}],"LMxt":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "geoArea", {
  enumerable: true,
  get: function () {
    return _area.default;
  }
});
Object.defineProperty(exports, "geoBounds", {
  enumerable: true,
  get: function () {
    return _bounds.default;
  }
});
Object.defineProperty(exports, "geoCentroid", {
  enumerable: true,
  get: function () {
    return _centroid.default;
  }
});
Object.defineProperty(exports, "geoCircle", {
  enumerable: true,
  get: function () {
    return _circle.default;
  }
});
Object.defineProperty(exports, "geoClipAntimeridian", {
  enumerable: true,
  get: function () {
    return _antimeridian.default;
  }
});
Object.defineProperty(exports, "geoClipCircle", {
  enumerable: true,
  get: function () {
    return _circle2.default;
  }
});
Object.defineProperty(exports, "geoClipExtent", {
  enumerable: true,
  get: function () {
    return _extent.default;
  }
});
Object.defineProperty(exports, "geoClipRectangle", {
  enumerable: true,
  get: function () {
    return _rectangle.default;
  }
});
Object.defineProperty(exports, "geoContains", {
  enumerable: true,
  get: function () {
    return _contains.default;
  }
});
Object.defineProperty(exports, "geoDistance", {
  enumerable: true,
  get: function () {
    return _distance.default;
  }
});
Object.defineProperty(exports, "geoGraticule", {
  enumerable: true,
  get: function () {
    return _graticule.default;
  }
});
Object.defineProperty(exports, "geoGraticule10", {
  enumerable: true,
  get: function () {
    return _graticule.graticule10;
  }
});
Object.defineProperty(exports, "geoInterpolate", {
  enumerable: true,
  get: function () {
    return _interpolate.default;
  }
});
Object.defineProperty(exports, "geoLength", {
  enumerable: true,
  get: function () {
    return _length.default;
  }
});
Object.defineProperty(exports, "geoPath", {
  enumerable: true,
  get: function () {
    return _index.default;
  }
});
Object.defineProperty(exports, "geoAlbers", {
  enumerable: true,
  get: function () {
    return _albers.default;
  }
});
Object.defineProperty(exports, "geoAlbersUsa", {
  enumerable: true,
  get: function () {
    return _albersUsa.default;
  }
});
Object.defineProperty(exports, "geoAzimuthalEqualArea", {
  enumerable: true,
  get: function () {
    return _azimuthalEqualArea.default;
  }
});
Object.defineProperty(exports, "geoAzimuthalEqualAreaRaw", {
  enumerable: true,
  get: function () {
    return _azimuthalEqualArea.azimuthalEqualAreaRaw;
  }
});
Object.defineProperty(exports, "geoAzimuthalEquidistant", {
  enumerable: true,
  get: function () {
    return _azimuthalEquidistant.default;
  }
});
Object.defineProperty(exports, "geoAzimuthalEquidistantRaw", {
  enumerable: true,
  get: function () {
    return _azimuthalEquidistant.azimuthalEquidistantRaw;
  }
});
Object.defineProperty(exports, "geoConicConformal", {
  enumerable: true,
  get: function () {
    return _conicConformal.default;
  }
});
Object.defineProperty(exports, "geoConicConformalRaw", {
  enumerable: true,
  get: function () {
    return _conicConformal.conicConformalRaw;
  }
});
Object.defineProperty(exports, "geoConicEqualArea", {
  enumerable: true,
  get: function () {
    return _conicEqualArea.default;
  }
});
Object.defineProperty(exports, "geoConicEqualAreaRaw", {
  enumerable: true,
  get: function () {
    return _conicEqualArea.conicEqualAreaRaw;
  }
});
Object.defineProperty(exports, "geoConicEquidistant", {
  enumerable: true,
  get: function () {
    return _conicEquidistant.default;
  }
});
Object.defineProperty(exports, "geoConicEquidistantRaw", {
  enumerable: true,
  get: function () {
    return _conicEquidistant.conicEquidistantRaw;
  }
});
Object.defineProperty(exports, "geoEqualEarth", {
  enumerable: true,
  get: function () {
    return _equalEarth.default;
  }
});
Object.defineProperty(exports, "geoEqualEarthRaw", {
  enumerable: true,
  get: function () {
    return _equalEarth.equalEarthRaw;
  }
});
Object.defineProperty(exports, "geoEquirectangular", {
  enumerable: true,
  get: function () {
    return _equirectangular.default;
  }
});
Object.defineProperty(exports, "geoEquirectangularRaw", {
  enumerable: true,
  get: function () {
    return _equirectangular.equirectangularRaw;
  }
});
Object.defineProperty(exports, "geoGnomonic", {
  enumerable: true,
  get: function () {
    return _gnomonic.default;
  }
});
Object.defineProperty(exports, "geoGnomonicRaw", {
  enumerable: true,
  get: function () {
    return _gnomonic.gnomonicRaw;
  }
});
Object.defineProperty(exports, "geoIdentity", {
  enumerable: true,
  get: function () {
    return _identity.default;
  }
});
Object.defineProperty(exports, "geoProjection", {
  enumerable: true,
  get: function () {
    return _index2.default;
  }
});
Object.defineProperty(exports, "geoProjectionMutator", {
  enumerable: true,
  get: function () {
    return _index2.projectionMutator;
  }
});
Object.defineProperty(exports, "geoMercator", {
  enumerable: true,
  get: function () {
    return _mercator.default;
  }
});
Object.defineProperty(exports, "geoMercatorRaw", {
  enumerable: true,
  get: function () {
    return _mercator.mercatorRaw;
  }
});
Object.defineProperty(exports, "geoNaturalEarth1", {
  enumerable: true,
  get: function () {
    return _naturalEarth.default;
  }
});
Object.defineProperty(exports, "geoNaturalEarth1Raw", {
  enumerable: true,
  get: function () {
    return _naturalEarth.naturalEarth1Raw;
  }
});
Object.defineProperty(exports, "geoOrthographic", {
  enumerable: true,
  get: function () {
    return _orthographic.default;
  }
});
Object.defineProperty(exports, "geoOrthographicRaw", {
  enumerable: true,
  get: function () {
    return _orthographic.orthographicRaw;
  }
});
Object.defineProperty(exports, "geoStereographic", {
  enumerable: true,
  get: function () {
    return _stereographic.default;
  }
});
Object.defineProperty(exports, "geoStereographicRaw", {
  enumerable: true,
  get: function () {
    return _stereographic.stereographicRaw;
  }
});
Object.defineProperty(exports, "geoTransverseMercator", {
  enumerable: true,
  get: function () {
    return _transverseMercator.default;
  }
});
Object.defineProperty(exports, "geoTransverseMercatorRaw", {
  enumerable: true,
  get: function () {
    return _transverseMercator.transverseMercatorRaw;
  }
});
Object.defineProperty(exports, "geoRotation", {
  enumerable: true,
  get: function () {
    return _rotation.default;
  }
});
Object.defineProperty(exports, "geoStream", {
  enumerable: true,
  get: function () {
    return _stream.default;
  }
});
Object.defineProperty(exports, "geoTransform", {
  enumerable: true,
  get: function () {
    return _transform.default;
  }
});

var _area = _interopRequireDefault(require("./area"));

var _bounds = _interopRequireDefault(require("./bounds"));

var _centroid = _interopRequireDefault(require("./centroid"));

var _circle = _interopRequireDefault(require("./circle"));

var _antimeridian = _interopRequireDefault(require("./clip/antimeridian"));

var _circle2 = _interopRequireDefault(require("./clip/circle"));

var _extent = _interopRequireDefault(require("./clip/extent"));

var _rectangle = _interopRequireDefault(require("./clip/rectangle"));

var _contains = _interopRequireDefault(require("./contains"));

var _distance = _interopRequireDefault(require("./distance"));

var _graticule = _interopRequireWildcard(require("./graticule"));

var _interpolate = _interopRequireDefault(require("./interpolate"));

var _length = _interopRequireDefault(require("./length"));

var _index = _interopRequireDefault(require("./path/index"));

var _albers = _interopRequireDefault(require("./projection/albers"));

var _albersUsa = _interopRequireDefault(require("./projection/albersUsa"));

var _azimuthalEqualArea = _interopRequireWildcard(require("./projection/azimuthalEqualArea"));

var _azimuthalEquidistant = _interopRequireWildcard(require("./projection/azimuthalEquidistant"));

var _conicConformal = _interopRequireWildcard(require("./projection/conicConformal"));

var _conicEqualArea = _interopRequireWildcard(require("./projection/conicEqualArea"));

var _conicEquidistant = _interopRequireWildcard(require("./projection/conicEquidistant"));

var _equalEarth = _interopRequireWildcard(require("./projection/equalEarth"));

var _equirectangular = _interopRequireWildcard(require("./projection/equirectangular"));

var _gnomonic = _interopRequireWildcard(require("./projection/gnomonic"));

var _identity = _interopRequireDefault(require("./projection/identity"));

var _index2 = _interopRequireWildcard(require("./projection/index"));

var _mercator = _interopRequireWildcard(require("./projection/mercator"));

var _naturalEarth = _interopRequireWildcard(require("./projection/naturalEarth1"));

var _orthographic = _interopRequireWildcard(require("./projection/orthographic"));

var _stereographic = _interopRequireWildcard(require("./projection/stereographic"));

var _transverseMercator = _interopRequireWildcard(require("./projection/transverseMercator"));

var _rotation = _interopRequireDefault(require("./rotation"));

var _stream = _interopRequireDefault(require("./stream"));

var _transform = _interopRequireDefault(require("./transform"));

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
},{"./area":"dpXv","./bounds":"4wXR","./centroid":"pQGp","./circle":"dbGM","./clip/antimeridian":"CWnN","./clip/circle":"1uul","./clip/extent":"Pttt","./clip/rectangle":"E6SH","./contains":"bl0/","./distance":"IoFW","./graticule":"+fWg","./interpolate":"PyvU","./length":"rgN/","./path/index":"01A7","./projection/albers":"HUYT","./projection/albersUsa":"WyCU","./projection/azimuthalEqualArea":"c9jZ","./projection/azimuthalEquidistant":"DPfU","./projection/conicConformal":"QZ/H","./projection/conicEqualArea":"uvEu","./projection/conicEquidistant":"wKng","./projection/equalEarth":"svXP","./projection/equirectangular":"xN4O","./projection/gnomonic":"bmsS","./projection/identity":"LapZ","./projection/index":"t1yD","./projection/mercator":"Yvwi","./projection/naturalEarth1":"yWpl","./projection/orthographic":"H7pW","./projection/stereographic":"bNxf","./projection/transverseMercator":"BGbj","./rotation":"KwdP","./stream":"XBFK","./transform":"ubFV"}],"brcY":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function defaultSeparation(a, b) {
  return a.parent === b.parent ? 1 : 2;
}

function meanX(children) {
  return children.reduce(meanXReduce, 0) / children.length;
}

function meanXReduce(x, c) {
  return x + c.x;
}

function maxY(children) {
  return 1 + children.reduce(maxYReduce, 0);
}

function maxYReduce(y, c) {
  return Math.max(y, c.y);
}

function leafLeft(node) {
  var children;

  while (children = node.children) node = children[0];

  return node;
}

function leafRight(node) {
  var children;

  while (children = node.children) node = children[children.length - 1];

  return node;
}

function _default() {
  var separation = defaultSeparation,
      dx = 1,
      dy = 1,
      nodeSize = false;

  function cluster(root) {
    var previousNode,
        x = 0; // First walk, computing the initial x & y values.

    root.eachAfter(function (node) {
      var children = node.children;

      if (children) {
        node.x = meanX(children);
        node.y = maxY(children);
      } else {
        node.x = previousNode ? x += separation(node, previousNode) : 0;
        node.y = 0;
        previousNode = node;
      }
    });
    var left = leafLeft(root),
        right = leafRight(root),
        x0 = left.x - separation(left, right) / 2,
        x1 = right.x + separation(right, left) / 2; // Second walk, normalizing x & y to the desired size.

    return root.eachAfter(nodeSize ? function (node) {
      node.x = (node.x - root.x) * dx;
      node.y = (root.y - node.y) * dy;
    } : function (node) {
      node.x = (node.x - x0) / (x1 - x0) * dx;
      node.y = (1 - (root.y ? node.y / root.y : 1)) * dy;
    });
  }

  cluster.separation = function (x) {
    return arguments.length ? (separation = x, cluster) : separation;
  };

  cluster.size = function (x) {
    return arguments.length ? (nodeSize = false, dx = +x[0], dy = +x[1], cluster) : nodeSize ? null : [dx, dy];
  };

  cluster.nodeSize = function (x) {
    return arguments.length ? (nodeSize = true, dx = +x[0], dy = +x[1], cluster) : nodeSize ? [dx, dy] : null;
  };

  return cluster;
}
},{}],"7jJj":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function count(node) {
  var sum = 0,
      children = node.children,
      i = children && children.length;
  if (!i) sum = 1;else while (--i >= 0) sum += children[i].value;
  node.value = sum;
}

function _default() {
  return this.eachAfter(count);
}
},{}],"YN75":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(callback) {
  var node = this,
      current,
      next = [node],
      children,
      i,
      n;

  do {
    current = next.reverse(), next = [];

    while (node = current.pop()) {
      callback(node), children = node.children;
      if (children) for (i = 0, n = children.length; i < n; ++i) {
        next.push(children[i]);
      }
    }
  } while (next.length);

  return this;
}
},{}],"b04E":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(callback) {
  var node = this,
      nodes = [node],
      children,
      i;

  while (node = nodes.pop()) {
    callback(node), children = node.children;
    if (children) for (i = children.length - 1; i >= 0; --i) {
      nodes.push(children[i]);
    }
  }

  return this;
}
},{}],"oHKJ":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(callback) {
  var node = this,
      nodes = [node],
      next = [],
      children,
      i,
      n;

  while (node = nodes.pop()) {
    next.push(node), children = node.children;
    if (children) for (i = 0, n = children.length; i < n; ++i) {
      nodes.push(children[i]);
    }
  }

  while (node = next.pop()) {
    callback(node);
  }

  return this;
}
},{}],"Btd4":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(value) {
  return this.eachAfter(function (node) {
    var sum = +value(node.data) || 0,
        children = node.children,
        i = children && children.length;

    while (--i >= 0) sum += children[i].value;

    node.value = sum;
  });
}
},{}],"q7tv":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(compare) {
  return this.eachBefore(function (node) {
    if (node.children) {
      node.children.sort(compare);
    }
  });
}
},{}],"5x0Y":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(end) {
  var start = this,
      ancestor = leastCommonAncestor(start, end),
      nodes = [start];

  while (start !== ancestor) {
    start = start.parent;
    nodes.push(start);
  }

  var k = nodes.length;

  while (end !== ancestor) {
    nodes.splice(k, 0, end);
    end = end.parent;
  }

  return nodes;
}

function leastCommonAncestor(a, b) {
  if (a === b) return a;
  var aNodes = a.ancestors(),
      bNodes = b.ancestors(),
      c = null;
  a = aNodes.pop();
  b = bNodes.pop();

  while (a === b) {
    c = a;
    a = aNodes.pop();
    b = bNodes.pop();
  }

  return c;
}
},{}],"fOge":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default() {
  var node = this,
      nodes = [node];

  while (node = node.parent) {
    nodes.push(node);
  }

  return nodes;
}
},{}],"chHE":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default() {
  var nodes = [];
  this.each(function (node) {
    nodes.push(node);
  });
  return nodes;
}
},{}],"+Res":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default() {
  var leaves = [];
  this.eachBefore(function (node) {
    if (!node.children) {
      leaves.push(node);
    }
  });
  return leaves;
}
},{}],"gBUX":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default() {
  var root = this,
      links = [];
  root.each(function (node) {
    if (node !== root) {
      // Don’t include the root’s parent, if any.
      links.push({
        source: node.parent,
        target: node
      });
    }
  });
  return links;
}
},{}],"LCo+":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = hierarchy;
exports.computeHeight = computeHeight;
exports.Node = Node;

var _count = _interopRequireDefault(require("./count"));

var _each = _interopRequireDefault(require("./each"));

var _eachBefore = _interopRequireDefault(require("./eachBefore"));

var _eachAfter = _interopRequireDefault(require("./eachAfter"));

var _sum = _interopRequireDefault(require("./sum"));

var _sort = _interopRequireDefault(require("./sort"));

var _path = _interopRequireDefault(require("./path"));

var _ancestors = _interopRequireDefault(require("./ancestors"));

var _descendants = _interopRequireDefault(require("./descendants"));

var _leaves = _interopRequireDefault(require("./leaves"));

var _links = _interopRequireDefault(require("./links"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function hierarchy(data, children) {
  var root = new Node(data),
      valued = +data.value && (root.value = data.value),
      node,
      nodes = [root],
      child,
      childs,
      i,
      n;
  if (children == null) children = defaultChildren;

  while (node = nodes.pop()) {
    if (valued) node.value = +node.data.value;

    if ((childs = children(node.data)) && (n = childs.length)) {
      node.children = new Array(n);

      for (i = n - 1; i >= 0; --i) {
        nodes.push(child = node.children[i] = new Node(childs[i]));
        child.parent = node;
        child.depth = node.depth + 1;
      }
    }
  }

  return root.eachBefore(computeHeight);
}

function node_copy() {
  return hierarchy(this).eachBefore(copyData);
}

function defaultChildren(d) {
  return d.children;
}

function copyData(node) {
  node.data = node.data.data;
}

function computeHeight(node) {
  var height = 0;

  do node.height = height; while ((node = node.parent) && node.height < ++height);
}

function Node(data) {
  this.data = data;
  this.depth = this.height = 0;
  this.parent = null;
}

Node.prototype = hierarchy.prototype = {
  constructor: Node,
  count: _count.default,
  each: _each.default,
  eachAfter: _eachAfter.default,
  eachBefore: _eachBefore.default,
  sum: _sum.default,
  sort: _sort.default,
  path: _path.default,
  ancestors: _ancestors.default,
  descendants: _descendants.default,
  leaves: _leaves.default,
  links: _links.default,
  copy: node_copy
};
},{"./count":"7jJj","./each":"YN75","./eachBefore":"b04E","./eachAfter":"oHKJ","./sum":"Btd4","./sort":"q7tv","./path":"5x0Y","./ancestors":"fOge","./descendants":"chHE","./leaves":"+Res","./links":"gBUX"}],"Wl9w":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.shuffle = shuffle;
exports.slice = void 0;
var slice = Array.prototype.slice;
exports.slice = slice;

function shuffle(array) {
  var m = array.length,
      t,
      i;

  while (m) {
    i = Math.random() * m-- | 0;
    t = array[m];
    array[m] = array[i];
    array[i] = t;
  }

  return array;
}
},{}],"ZzhU":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _array = require("../array");

function _default(circles) {
  var i = 0,
      n = (circles = (0, _array.shuffle)(_array.slice.call(circles))).length,
      B = [],
      p,
      e;

  while (i < n) {
    p = circles[i];
    if (e && enclosesWeak(e, p)) ++i;else e = encloseBasis(B = extendBasis(B, p)), i = 0;
  }

  return e;
}

function extendBasis(B, p) {
  var i, j;
  if (enclosesWeakAll(p, B)) return [p]; // If we get here then B must have at least one element.

  for (i = 0; i < B.length; ++i) {
    if (enclosesNot(p, B[i]) && enclosesWeakAll(encloseBasis2(B[i], p), B)) {
      return [B[i], p];
    }
  } // If we get here then B must have at least two elements.


  for (i = 0; i < B.length - 1; ++i) {
    for (j = i + 1; j < B.length; ++j) {
      if (enclosesNot(encloseBasis2(B[i], B[j]), p) && enclosesNot(encloseBasis2(B[i], p), B[j]) && enclosesNot(encloseBasis2(B[j], p), B[i]) && enclosesWeakAll(encloseBasis3(B[i], B[j], p), B)) {
        return [B[i], B[j], p];
      }
    }
  } // If we get here then something is very wrong.


  throw new Error();
}

function enclosesNot(a, b) {
  var dr = a.r - b.r,
      dx = b.x - a.x,
      dy = b.y - a.y;
  return dr < 0 || dr * dr < dx * dx + dy * dy;
}

function enclosesWeak(a, b) {
  var dr = a.r - b.r + 1e-6,
      dx = b.x - a.x,
      dy = b.y - a.y;
  return dr > 0 && dr * dr > dx * dx + dy * dy;
}

function enclosesWeakAll(a, B) {
  for (var i = 0; i < B.length; ++i) {
    if (!enclosesWeak(a, B[i])) {
      return false;
    }
  }

  return true;
}

function encloseBasis(B) {
  switch (B.length) {
    case 1:
      return encloseBasis1(B[0]);

    case 2:
      return encloseBasis2(B[0], B[1]);

    case 3:
      return encloseBasis3(B[0], B[1], B[2]);
  }
}

function encloseBasis1(a) {
  return {
    x: a.x,
    y: a.y,
    r: a.r
  };
}

function encloseBasis2(a, b) {
  var x1 = a.x,
      y1 = a.y,
      r1 = a.r,
      x2 = b.x,
      y2 = b.y,
      r2 = b.r,
      x21 = x2 - x1,
      y21 = y2 - y1,
      r21 = r2 - r1,
      l = Math.sqrt(x21 * x21 + y21 * y21);
  return {
    x: (x1 + x2 + x21 / l * r21) / 2,
    y: (y1 + y2 + y21 / l * r21) / 2,
    r: (l + r1 + r2) / 2
  };
}

function encloseBasis3(a, b, c) {
  var x1 = a.x,
      y1 = a.y,
      r1 = a.r,
      x2 = b.x,
      y2 = b.y,
      r2 = b.r,
      x3 = c.x,
      y3 = c.y,
      r3 = c.r,
      a2 = x1 - x2,
      a3 = x1 - x3,
      b2 = y1 - y2,
      b3 = y1 - y3,
      c2 = r2 - r1,
      c3 = r3 - r1,
      d1 = x1 * x1 + y1 * y1 - r1 * r1,
      d2 = d1 - x2 * x2 - y2 * y2 + r2 * r2,
      d3 = d1 - x3 * x3 - y3 * y3 + r3 * r3,
      ab = a3 * b2 - a2 * b3,
      xa = (b2 * d3 - b3 * d2) / (ab * 2) - x1,
      xb = (b3 * c2 - b2 * c3) / ab,
      ya = (a3 * d2 - a2 * d3) / (ab * 2) - y1,
      yb = (a2 * c3 - a3 * c2) / ab,
      A = xb * xb + yb * yb - 1,
      B = 2 * (r1 + xa * xb + ya * yb),
      C = xa * xa + ya * ya - r1 * r1,
      r = -(A ? (B + Math.sqrt(B * B - 4 * A * C)) / (2 * A) : C / B);
  return {
    x: x1 + xa + xb * r,
    y: y1 + ya + yb * r,
    r: r
  };
}
},{"../array":"Wl9w"}],"efS5":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.packEnclose = packEnclose;
exports.default = _default;

var _enclose = _interopRequireDefault(require("./enclose"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function place(b, a, c) {
  var dx = b.x - a.x,
      x,
      a2,
      dy = b.y - a.y,
      y,
      b2,
      d2 = dx * dx + dy * dy;

  if (d2) {
    a2 = a.r + c.r, a2 *= a2;
    b2 = b.r + c.r, b2 *= b2;

    if (a2 > b2) {
      x = (d2 + b2 - a2) / (2 * d2);
      y = Math.sqrt(Math.max(0, b2 / d2 - x * x));
      c.x = b.x - x * dx - y * dy;
      c.y = b.y - x * dy + y * dx;
    } else {
      x = (d2 + a2 - b2) / (2 * d2);
      y = Math.sqrt(Math.max(0, a2 / d2 - x * x));
      c.x = a.x + x * dx - y * dy;
      c.y = a.y + x * dy + y * dx;
    }
  } else {
    c.x = a.x + c.r;
    c.y = a.y;
  }
}

function intersects(a, b) {
  var dr = a.r + b.r - 1e-6,
      dx = b.x - a.x,
      dy = b.y - a.y;
  return dr > 0 && dr * dr > dx * dx + dy * dy;
}

function score(node) {
  var a = node._,
      b = node.next._,
      ab = a.r + b.r,
      dx = (a.x * b.r + b.x * a.r) / ab,
      dy = (a.y * b.r + b.y * a.r) / ab;
  return dx * dx + dy * dy;
}

function Node(circle) {
  this._ = circle;
  this.next = null;
  this.previous = null;
}

function packEnclose(circles) {
  if (!(n = circles.length)) return 0;
  var a, b, c, n, aa, ca, i, j, k, sj, sk; // Place the first circle.

  a = circles[0], a.x = 0, a.y = 0;
  if (!(n > 1)) return a.r; // Place the second circle.

  b = circles[1], a.x = -b.r, b.x = a.r, b.y = 0;
  if (!(n > 2)) return a.r + b.r; // Place the third circle.

  place(b, a, c = circles[2]); // Initialize the front-chain using the first three circles a, b and c.

  a = new Node(a), b = new Node(b), c = new Node(c);
  a.next = c.previous = b;
  b.next = a.previous = c;
  c.next = b.previous = a; // Attempt to place each remaining circle…

  pack: for (i = 3; i < n; ++i) {
    place(a._, b._, c = circles[i]), c = new Node(c); // Find the closest intersecting circle on the front-chain, if any.
    // “Closeness” is determined by linear distance along the front-chain.
    // “Ahead” or “behind” is likewise determined by linear distance.

    j = b.next, k = a.previous, sj = b._.r, sk = a._.r;

    do {
      if (sj <= sk) {
        if (intersects(j._, c._)) {
          b = j, a.next = b, b.previous = a, --i;
          continue pack;
        }

        sj += j._.r, j = j.next;
      } else {
        if (intersects(k._, c._)) {
          a = k, a.next = b, b.previous = a, --i;
          continue pack;
        }

        sk += k._.r, k = k.previous;
      }
    } while (j !== k.next); // Success! Insert the new circle c between a and b.


    c.previous = a, c.next = b, a.next = b.previous = b = c; // Compute the new closest circle pair to the centroid.

    aa = score(a);

    while ((c = c.next) !== b) {
      if ((ca = score(c)) < aa) {
        a = c, aa = ca;
      }
    }

    b = a.next;
  } // Compute the enclosing circle of the front chain.


  a = [b._], c = b;

  while ((c = c.next) !== b) a.push(c._);

  c = (0, _enclose.default)(a); // Translate the circles to put the enclosing circle around the origin.

  for (i = 0; i < n; ++i) a = circles[i], a.x -= c.x, a.y -= c.y;

  return c.r;
}

function _default(circles) {
  packEnclose(circles);
  return circles;
}
},{"./enclose":"ZzhU"}],"OleL":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.optional = optional;
exports.required = required;

function optional(f) {
  return f == null ? null : required(f);
}

function required(f) {
  if (typeof f !== "function") throw new Error();
  return f;
}
},{}],"k/YM":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.constantZero = constantZero;
exports.default = _default;

function constantZero() {
  return 0;
}

function _default(x) {
  return function () {
    return x;
  };
}
},{}],"aVuj":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _siblings = require("./siblings");

var _accessors = require("../accessors");

var _constant = _interopRequireWildcard(require("../constant"));

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function defaultRadius(d) {
  return Math.sqrt(d.value);
}

function _default() {
  var radius = null,
      dx = 1,
      dy = 1,
      padding = _constant.constantZero;

  function pack(root) {
    root.x = dx / 2, root.y = dy / 2;

    if (radius) {
      root.eachBefore(radiusLeaf(radius)).eachAfter(packChildren(padding, 0.5)).eachBefore(translateChild(1));
    } else {
      root.eachBefore(radiusLeaf(defaultRadius)).eachAfter(packChildren(_constant.constantZero, 1)).eachAfter(packChildren(padding, root.r / Math.min(dx, dy))).eachBefore(translateChild(Math.min(dx, dy) / (2 * root.r)));
    }

    return root;
  }

  pack.radius = function (x) {
    return arguments.length ? (radius = (0, _accessors.optional)(x), pack) : radius;
  };

  pack.size = function (x) {
    return arguments.length ? (dx = +x[0], dy = +x[1], pack) : [dx, dy];
  };

  pack.padding = function (x) {
    return arguments.length ? (padding = typeof x === "function" ? x : (0, _constant.default)(+x), pack) : padding;
  };

  return pack;
}

function radiusLeaf(radius) {
  return function (node) {
    if (!node.children) {
      node.r = Math.max(0, +radius(node) || 0);
    }
  };
}

function packChildren(padding, k) {
  return function (node) {
    if (children = node.children) {
      var children,
          i,
          n = children.length,
          r = padding(node) * k || 0,
          e;
      if (r) for (i = 0; i < n; ++i) children[i].r += r;
      e = (0, _siblings.packEnclose)(children);
      if (r) for (i = 0; i < n; ++i) children[i].r -= r;
      node.r = e + r;
    }
  };
}

function translateChild(k) {
  return function (node) {
    var parent = node.parent;
    node.r *= k;

    if (parent) {
      node.x = parent.x + k * node.x;
      node.y = parent.y + k * node.y;
    }
  };
}
},{"./siblings":"efS5","../accessors":"OleL","../constant":"k/YM"}],"PETl":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(node) {
  node.x0 = Math.round(node.x0);
  node.y0 = Math.round(node.y0);
  node.x1 = Math.round(node.x1);
  node.y1 = Math.round(node.y1);
}
},{}],"L3aV":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(parent, x0, y0, x1, y1) {
  var nodes = parent.children,
      node,
      i = -1,
      n = nodes.length,
      k = parent.value && (x1 - x0) / parent.value;

  while (++i < n) {
    node = nodes[i], node.y0 = y0, node.y1 = y1;
    node.x0 = x0, node.x1 = x0 += node.value * k;
  }
}
},{}],"h/+W":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _round = _interopRequireDefault(require("./treemap/round"));

var _dice = _interopRequireDefault(require("./treemap/dice"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default() {
  var dx = 1,
      dy = 1,
      padding = 0,
      round = false;

  function partition(root) {
    var n = root.height + 1;
    root.x0 = root.y0 = padding;
    root.x1 = dx;
    root.y1 = dy / n;
    root.eachBefore(positionNode(dy, n));
    if (round) root.eachBefore(_round.default);
    return root;
  }

  function positionNode(dy, n) {
    return function (node) {
      if (node.children) {
        (0, _dice.default)(node, node.x0, dy * (node.depth + 1) / n, node.x1, dy * (node.depth + 2) / n);
      }

      var x0 = node.x0,
          y0 = node.y0,
          x1 = node.x1 - padding,
          y1 = node.y1 - padding;
      if (x1 < x0) x0 = x1 = (x0 + x1) / 2;
      if (y1 < y0) y0 = y1 = (y0 + y1) / 2;
      node.x0 = x0;
      node.y0 = y0;
      node.x1 = x1;
      node.y1 = y1;
    };
  }

  partition.round = function (x) {
    return arguments.length ? (round = !!x, partition) : round;
  };

  partition.size = function (x) {
    return arguments.length ? (dx = +x[0], dy = +x[1], partition) : [dx, dy];
  };

  partition.padding = function (x) {
    return arguments.length ? (padding = +x, partition) : padding;
  };

  return partition;
}
},{"./treemap/round":"PETl","./treemap/dice":"L3aV"}],"bJDQ":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _accessors = require("./accessors");

var _index = require("./hierarchy/index");

var keyPrefix = "$",
    // Protect against keys like “__proto__”.
preroot = {
  depth: -1
},
    ambiguous = {};

function defaultId(d) {
  return d.id;
}

function defaultParentId(d) {
  return d.parentId;
}

function _default() {
  var id = defaultId,
      parentId = defaultParentId;

  function stratify(data) {
    var d,
        i,
        n = data.length,
        root,
        parent,
        node,
        nodes = new Array(n),
        nodeId,
        nodeKey,
        nodeByKey = {};

    for (i = 0; i < n; ++i) {
      d = data[i], node = nodes[i] = new _index.Node(d);

      if ((nodeId = id(d, i, data)) != null && (nodeId += "")) {
        nodeKey = keyPrefix + (node.id = nodeId);
        nodeByKey[nodeKey] = nodeKey in nodeByKey ? ambiguous : node;
      }
    }

    for (i = 0; i < n; ++i) {
      node = nodes[i], nodeId = parentId(data[i], i, data);

      if (nodeId == null || !(nodeId += "")) {
        if (root) throw new Error("multiple roots");
        root = node;
      } else {
        parent = nodeByKey[keyPrefix + nodeId];
        if (!parent) throw new Error("missing: " + nodeId);
        if (parent === ambiguous) throw new Error("ambiguous: " + nodeId);
        if (parent.children) parent.children.push(node);else parent.children = [node];
        node.parent = parent;
      }
    }

    if (!root) throw new Error("no root");
    root.parent = preroot;
    root.eachBefore(function (node) {
      node.depth = node.parent.depth + 1;
      --n;
    }).eachBefore(_index.computeHeight);
    root.parent = null;
    if (n > 0) throw new Error("cycle");
    return root;
  }

  stratify.id = function (x) {
    return arguments.length ? (id = (0, _accessors.required)(x), stratify) : id;
  };

  stratify.parentId = function (x) {
    return arguments.length ? (parentId = (0, _accessors.required)(x), stratify) : parentId;
  };

  return stratify;
}
},{"./accessors":"OleL","./hierarchy/index":"LCo+"}],"7nrL":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _index = require("./hierarchy/index");

function defaultSeparation(a, b) {
  return a.parent === b.parent ? 1 : 2;
} // function radialSeparation(a, b) {
//   return (a.parent === b.parent ? 1 : 2) / a.depth;
// }
// This function is used to traverse the left contour of a subtree (or
// subforest). It returns the successor of v on this contour. This successor is
// either given by the leftmost child of v or by the thread of v. The function
// returns null if and only if v is on the highest level of its subtree.


function nextLeft(v) {
  var children = v.children;
  return children ? children[0] : v.t;
} // This function works analogously to nextLeft.


function nextRight(v) {
  var children = v.children;
  return children ? children[children.length - 1] : v.t;
} // Shifts the current subtree rooted at w+. This is done by increasing
// prelim(w+) and mod(w+) by shift.


function moveSubtree(wm, wp, shift) {
  var change = shift / (wp.i - wm.i);
  wp.c -= change;
  wp.s += shift;
  wm.c += change;
  wp.z += shift;
  wp.m += shift;
} // All other shifts, applied to the smaller subtrees between w- and w+, are
// performed by this function. To prepare the shifts, we have to adjust
// change(w+), shift(w+), and change(w-).


function executeShifts(v) {
  var shift = 0,
      change = 0,
      children = v.children,
      i = children.length,
      w;

  while (--i >= 0) {
    w = children[i];
    w.z += shift;
    w.m += shift;
    shift += w.s + (change += w.c);
  }
} // If vi-’s ancestor is a sibling of v, returns vi-’s ancestor. Otherwise,
// returns the specified (default) ancestor.


function nextAncestor(vim, v, ancestor) {
  return vim.a.parent === v.parent ? vim.a : ancestor;
}

function TreeNode(node, i) {
  this._ = node;
  this.parent = null;
  this.children = null;
  this.A = null; // default ancestor

  this.a = this; // ancestor

  this.z = 0; // prelim

  this.m = 0; // mod

  this.c = 0; // change

  this.s = 0; // shift

  this.t = null; // thread

  this.i = i; // number
}

TreeNode.prototype = Object.create(_index.Node.prototype);

function treeRoot(root) {
  var tree = new TreeNode(root, 0),
      node,
      nodes = [tree],
      child,
      children,
      i,
      n;

  while (node = nodes.pop()) {
    if (children = node._.children) {
      node.children = new Array(n = children.length);

      for (i = n - 1; i >= 0; --i) {
        nodes.push(child = node.children[i] = new TreeNode(children[i], i));
        child.parent = node;
      }
    }
  }

  (tree.parent = new TreeNode(null, 0)).children = [tree];
  return tree;
} // Node-link tree diagram using the Reingold-Tilford "tidy" algorithm


function _default() {
  var separation = defaultSeparation,
      dx = 1,
      dy = 1,
      nodeSize = null;

  function tree(root) {
    var t = treeRoot(root); // Compute the layout using Buchheim et al.’s algorithm.

    t.eachAfter(firstWalk), t.parent.m = -t.z;
    t.eachBefore(secondWalk); // If a fixed node size is specified, scale x and y.

    if (nodeSize) root.eachBefore(sizeNode); // If a fixed tree size is specified, scale x and y based on the extent.
    // Compute the left-most, right-most, and depth-most nodes for extents.
    else {
        var left = root,
            right = root,
            bottom = root;
        root.eachBefore(function (node) {
          if (node.x < left.x) left = node;
          if (node.x > right.x) right = node;
          if (node.depth > bottom.depth) bottom = node;
        });
        var s = left === right ? 1 : separation(left, right) / 2,
            tx = s - left.x,
            kx = dx / (right.x + s + tx),
            ky = dy / (bottom.depth || 1);
        root.eachBefore(function (node) {
          node.x = (node.x + tx) * kx;
          node.y = node.depth * ky;
        });
      }
    return root;
  } // Computes a preliminary x-coordinate for v. Before that, FIRST WALK is
  // applied recursively to the children of v, as well as the function
  // APPORTION. After spacing out the children by calling EXECUTE SHIFTS, the
  // node v is placed to the midpoint of its outermost children.


  function firstWalk(v) {
    var children = v.children,
        siblings = v.parent.children,
        w = v.i ? siblings[v.i - 1] : null;

    if (children) {
      executeShifts(v);
      var midpoint = (children[0].z + children[children.length - 1].z) / 2;

      if (w) {
        v.z = w.z + separation(v._, w._);
        v.m = v.z - midpoint;
      } else {
        v.z = midpoint;
      }
    } else if (w) {
      v.z = w.z + separation(v._, w._);
    }

    v.parent.A = apportion(v, w, v.parent.A || siblings[0]);
  } // Computes all real x-coordinates by summing up the modifiers recursively.


  function secondWalk(v) {
    v._.x = v.z + v.parent.m;
    v.m += v.parent.m;
  } // The core of the algorithm. Here, a new subtree is combined with the
  // previous subtrees. Threads are used to traverse the inside and outside
  // contours of the left and right subtree up to the highest common level. The
  // vertices used for the traversals are vi+, vi-, vo-, and vo+, where the
  // superscript o means outside and i means inside, the subscript - means left
  // subtree and + means right subtree. For summing up the modifiers along the
  // contour, we use respective variables si+, si-, so-, and so+. Whenever two
  // nodes of the inside contours conflict, we compute the left one of the
  // greatest uncommon ancestors using the function ANCESTOR and call MOVE
  // SUBTREE to shift the subtree and prepare the shifts of smaller subtrees.
  // Finally, we add a new thread (if necessary).


  function apportion(v, w, ancestor) {
    if (w) {
      var vip = v,
          vop = v,
          vim = w,
          vom = vip.parent.children[0],
          sip = vip.m,
          sop = vop.m,
          sim = vim.m,
          som = vom.m,
          shift;

      while (vim = nextRight(vim), vip = nextLeft(vip), vim && vip) {
        vom = nextLeft(vom);
        vop = nextRight(vop);
        vop.a = v;
        shift = vim.z + sim - vip.z - sip + separation(vim._, vip._);

        if (shift > 0) {
          moveSubtree(nextAncestor(vim, v, ancestor), v, shift);
          sip += shift;
          sop += shift;
        }

        sim += vim.m;
        sip += vip.m;
        som += vom.m;
        sop += vop.m;
      }

      if (vim && !nextRight(vop)) {
        vop.t = vim;
        vop.m += sim - sop;
      }

      if (vip && !nextLeft(vom)) {
        vom.t = vip;
        vom.m += sip - som;
        ancestor = v;
      }
    }

    return ancestor;
  }

  function sizeNode(node) {
    node.x *= dx;
    node.y = node.depth * dy;
  }

  tree.separation = function (x) {
    return arguments.length ? (separation = x, tree) : separation;
  };

  tree.size = function (x) {
    return arguments.length ? (nodeSize = false, dx = +x[0], dy = +x[1], tree) : nodeSize ? null : [dx, dy];
  };

  tree.nodeSize = function (x) {
    return arguments.length ? (nodeSize = true, dx = +x[0], dy = +x[1], tree) : nodeSize ? [dx, dy] : null;
  };

  return tree;
}
},{"./hierarchy/index":"LCo+"}],"RVbL":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(parent, x0, y0, x1, y1) {
  var nodes = parent.children,
      node,
      i = -1,
      n = nodes.length,
      k = parent.value && (y1 - y0) / parent.value;

  while (++i < n) {
    node = nodes[i], node.x0 = x0, node.x1 = x1;
    node.y0 = y0, node.y1 = y0 += node.value * k;
  }
}
},{}],"jyLZ":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.squarifyRatio = squarifyRatio;
exports.default = exports.phi = void 0;

var _dice = _interopRequireDefault(require("./dice"));

var _slice = _interopRequireDefault(require("./slice"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var phi = (1 + Math.sqrt(5)) / 2;
exports.phi = phi;

function squarifyRatio(ratio, parent, x0, y0, x1, y1) {
  var rows = [],
      nodes = parent.children,
      row,
      nodeValue,
      i0 = 0,
      i1 = 0,
      n = nodes.length,
      dx,
      dy,
      value = parent.value,
      sumValue,
      minValue,
      maxValue,
      newRatio,
      minRatio,
      alpha,
      beta;

  while (i0 < n) {
    dx = x1 - x0, dy = y1 - y0; // Find the next non-empty node.

    do sumValue = nodes[i1++].value; while (!sumValue && i1 < n);

    minValue = maxValue = sumValue;
    alpha = Math.max(dy / dx, dx / dy) / (value * ratio);
    beta = sumValue * sumValue * alpha;
    minRatio = Math.max(maxValue / beta, beta / minValue); // Keep adding nodes while the aspect ratio maintains or improves.

    for (; i1 < n; ++i1) {
      sumValue += nodeValue = nodes[i1].value;
      if (nodeValue < minValue) minValue = nodeValue;
      if (nodeValue > maxValue) maxValue = nodeValue;
      beta = sumValue * sumValue * alpha;
      newRatio = Math.max(maxValue / beta, beta / minValue);

      if (newRatio > minRatio) {
        sumValue -= nodeValue;
        break;
      }

      minRatio = newRatio;
    } // Position and record the row orientation.


    rows.push(row = {
      value: sumValue,
      dice: dx < dy,
      children: nodes.slice(i0, i1)
    });
    if (row.dice) (0, _dice.default)(row, x0, y0, x1, value ? y0 += dy * sumValue / value : y1);else (0, _slice.default)(row, x0, y0, value ? x0 += dx * sumValue / value : x1, y1);
    value -= sumValue, i0 = i1;
  }

  return rows;
}

var _default = function custom(ratio) {
  function squarify(parent, x0, y0, x1, y1) {
    squarifyRatio(ratio, parent, x0, y0, x1, y1);
  }

  squarify.ratio = function (x) {
    return custom((x = +x) > 1 ? x : 1);
  };

  return squarify;
}(phi);

exports.default = _default;
},{"./dice":"L3aV","./slice":"RVbL"}],"3cC5":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _round = _interopRequireDefault(require("./round"));

var _squarify = _interopRequireDefault(require("./squarify"));

var _accessors = require("../accessors");

var _constant = _interopRequireWildcard(require("../constant"));

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default() {
  var tile = _squarify.default,
      round = false,
      dx = 1,
      dy = 1,
      paddingStack = [0],
      paddingInner = _constant.constantZero,
      paddingTop = _constant.constantZero,
      paddingRight = _constant.constantZero,
      paddingBottom = _constant.constantZero,
      paddingLeft = _constant.constantZero;

  function treemap(root) {
    root.x0 = root.y0 = 0;
    root.x1 = dx;
    root.y1 = dy;
    root.eachBefore(positionNode);
    paddingStack = [0];
    if (round) root.eachBefore(_round.default);
    return root;
  }

  function positionNode(node) {
    var p = paddingStack[node.depth],
        x0 = node.x0 + p,
        y0 = node.y0 + p,
        x1 = node.x1 - p,
        y1 = node.y1 - p;
    if (x1 < x0) x0 = x1 = (x0 + x1) / 2;
    if (y1 < y0) y0 = y1 = (y0 + y1) / 2;
    node.x0 = x0;
    node.y0 = y0;
    node.x1 = x1;
    node.y1 = y1;

    if (node.children) {
      p = paddingStack[node.depth + 1] = paddingInner(node) / 2;
      x0 += paddingLeft(node) - p;
      y0 += paddingTop(node) - p;
      x1 -= paddingRight(node) - p;
      y1 -= paddingBottom(node) - p;
      if (x1 < x0) x0 = x1 = (x0 + x1) / 2;
      if (y1 < y0) y0 = y1 = (y0 + y1) / 2;
      tile(node, x0, y0, x1, y1);
    }
  }

  treemap.round = function (x) {
    return arguments.length ? (round = !!x, treemap) : round;
  };

  treemap.size = function (x) {
    return arguments.length ? (dx = +x[0], dy = +x[1], treemap) : [dx, dy];
  };

  treemap.tile = function (x) {
    return arguments.length ? (tile = (0, _accessors.required)(x), treemap) : tile;
  };

  treemap.padding = function (x) {
    return arguments.length ? treemap.paddingInner(x).paddingOuter(x) : treemap.paddingInner();
  };

  treemap.paddingInner = function (x) {
    return arguments.length ? (paddingInner = typeof x === "function" ? x : (0, _constant.default)(+x), treemap) : paddingInner;
  };

  treemap.paddingOuter = function (x) {
    return arguments.length ? treemap.paddingTop(x).paddingRight(x).paddingBottom(x).paddingLeft(x) : treemap.paddingTop();
  };

  treemap.paddingTop = function (x) {
    return arguments.length ? (paddingTop = typeof x === "function" ? x : (0, _constant.default)(+x), treemap) : paddingTop;
  };

  treemap.paddingRight = function (x) {
    return arguments.length ? (paddingRight = typeof x === "function" ? x : (0, _constant.default)(+x), treemap) : paddingRight;
  };

  treemap.paddingBottom = function (x) {
    return arguments.length ? (paddingBottom = typeof x === "function" ? x : (0, _constant.default)(+x), treemap) : paddingBottom;
  };

  treemap.paddingLeft = function (x) {
    return arguments.length ? (paddingLeft = typeof x === "function" ? x : (0, _constant.default)(+x), treemap) : paddingLeft;
  };

  return treemap;
}
},{"./round":"PETl","./squarify":"jyLZ","../accessors":"OleL","../constant":"k/YM"}],"cDuG":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(parent, x0, y0, x1, y1) {
  var nodes = parent.children,
      i,
      n = nodes.length,
      sum,
      sums = new Array(n + 1);

  for (sums[0] = sum = i = 0; i < n; ++i) {
    sums[i + 1] = sum += nodes[i].value;
  }

  partition(0, n, parent.value, x0, y0, x1, y1);

  function partition(i, j, value, x0, y0, x1, y1) {
    if (i >= j - 1) {
      var node = nodes[i];
      node.x0 = x0, node.y0 = y0;
      node.x1 = x1, node.y1 = y1;
      return;
    }

    var valueOffset = sums[i],
        valueTarget = value / 2 + valueOffset,
        k = i + 1,
        hi = j - 1;

    while (k < hi) {
      var mid = k + hi >>> 1;
      if (sums[mid] < valueTarget) k = mid + 1;else hi = mid;
    }

    if (valueTarget - sums[k - 1] < sums[k] - valueTarget && i + 1 < k) --k;
    var valueLeft = sums[k] - valueOffset,
        valueRight = value - valueLeft;

    if (x1 - x0 > y1 - y0) {
      var xk = (x0 * valueRight + x1 * valueLeft) / value;
      partition(i, k, valueLeft, x0, y0, xk, y1);
      partition(k, j, valueRight, xk, y0, x1, y1);
    } else {
      var yk = (y0 * valueRight + y1 * valueLeft) / value;
      partition(i, k, valueLeft, x0, y0, x1, yk);
      partition(k, j, valueRight, x0, yk, x1, y1);
    }
  }
}
},{}],"dACy":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _dice = _interopRequireDefault(require("./dice"));

var _slice = _interopRequireDefault(require("./slice"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(parent, x0, y0, x1, y1) {
  (parent.depth & 1 ? _slice.default : _dice.default)(parent, x0, y0, x1, y1);
}
},{"./dice":"L3aV","./slice":"RVbL"}],"GrWc":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _dice = _interopRequireDefault(require("./dice"));

var _slice = _interopRequireDefault(require("./slice"));

var _squarify = require("./squarify");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _default = function custom(ratio) {
  function resquarify(parent, x0, y0, x1, y1) {
    if ((rows = parent._squarify) && rows.ratio === ratio) {
      var rows,
          row,
          nodes,
          i,
          j = -1,
          n,
          m = rows.length,
          value = parent.value;

      while (++j < m) {
        row = rows[j], nodes = row.children;

        for (i = row.value = 0, n = nodes.length; i < n; ++i) row.value += nodes[i].value;

        if (row.dice) (0, _dice.default)(row, x0, y0, x1, y0 += (y1 - y0) * row.value / value);else (0, _slice.default)(row, x0, y0, x0 += (x1 - x0) * row.value / value, y1);
        value -= row.value;
      }
    } else {
      parent._squarify = rows = (0, _squarify.squarifyRatio)(ratio, parent, x0, y0, x1, y1);
      rows.ratio = ratio;
    }
  }

  resquarify.ratio = function (x) {
    return custom((x = +x) > 1 ? x : 1);
  };

  return resquarify;
}(_squarify.phi);

exports.default = _default;
},{"./dice":"L3aV","./slice":"RVbL","./squarify":"jyLZ"}],"wNQE":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "cluster", {
  enumerable: true,
  get: function () {
    return _cluster.default;
  }
});
Object.defineProperty(exports, "hierarchy", {
  enumerable: true,
  get: function () {
    return _index.default;
  }
});
Object.defineProperty(exports, "pack", {
  enumerable: true,
  get: function () {
    return _index2.default;
  }
});
Object.defineProperty(exports, "packSiblings", {
  enumerable: true,
  get: function () {
    return _siblings.default;
  }
});
Object.defineProperty(exports, "packEnclose", {
  enumerable: true,
  get: function () {
    return _enclose.default;
  }
});
Object.defineProperty(exports, "partition", {
  enumerable: true,
  get: function () {
    return _partition.default;
  }
});
Object.defineProperty(exports, "stratify", {
  enumerable: true,
  get: function () {
    return _stratify.default;
  }
});
Object.defineProperty(exports, "tree", {
  enumerable: true,
  get: function () {
    return _tree.default;
  }
});
Object.defineProperty(exports, "treemap", {
  enumerable: true,
  get: function () {
    return _index3.default;
  }
});
Object.defineProperty(exports, "treemapBinary", {
  enumerable: true,
  get: function () {
    return _binary.default;
  }
});
Object.defineProperty(exports, "treemapDice", {
  enumerable: true,
  get: function () {
    return _dice.default;
  }
});
Object.defineProperty(exports, "treemapSlice", {
  enumerable: true,
  get: function () {
    return _slice.default;
  }
});
Object.defineProperty(exports, "treemapSliceDice", {
  enumerable: true,
  get: function () {
    return _sliceDice.default;
  }
});
Object.defineProperty(exports, "treemapSquarify", {
  enumerable: true,
  get: function () {
    return _squarify.default;
  }
});
Object.defineProperty(exports, "treemapResquarify", {
  enumerable: true,
  get: function () {
    return _resquarify.default;
  }
});

var _cluster = _interopRequireDefault(require("./cluster"));

var _index = _interopRequireDefault(require("./hierarchy/index"));

var _index2 = _interopRequireDefault(require("./pack/index"));

var _siblings = _interopRequireDefault(require("./pack/siblings"));

var _enclose = _interopRequireDefault(require("./pack/enclose"));

var _partition = _interopRequireDefault(require("./partition"));

var _stratify = _interopRequireDefault(require("./stratify"));

var _tree = _interopRequireDefault(require("./tree"));

var _index3 = _interopRequireDefault(require("./treemap/index"));

var _binary = _interopRequireDefault(require("./treemap/binary"));

var _dice = _interopRequireDefault(require("./treemap/dice"));

var _slice = _interopRequireDefault(require("./treemap/slice"));

var _sliceDice = _interopRequireDefault(require("./treemap/sliceDice"));

var _squarify = _interopRequireDefault(require("./treemap/squarify"));

var _resquarify = _interopRequireDefault(require("./treemap/resquarify"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
},{"./cluster":"brcY","./hierarchy/index":"LCo+","./pack/index":"aVuj","./pack/siblings":"efS5","./pack/enclose":"ZzhU","./partition":"h/+W","./stratify":"bJDQ","./tree":"7nrL","./treemap/index":"3cC5","./treemap/binary":"cDuG","./treemap/dice":"L3aV","./treemap/slice":"RVbL","./treemap/sliceDice":"dACy","./treemap/squarify":"jyLZ","./treemap/resquarify":"GrWc"}],"xGSp":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(polygon) {
  var i = -1,
      n = polygon.length,
      a,
      b = polygon[n - 1],
      area = 0;

  while (++i < n) {
    a = b;
    b = polygon[i];
    area += a[1] * b[0] - a[0] * b[1];
  }

  return area / 2;
}
},{}],"5ySB":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(polygon) {
  var i = -1,
      n = polygon.length,
      x = 0,
      y = 0,
      a,
      b = polygon[n - 1],
      c,
      k = 0;

  while (++i < n) {
    a = b;
    b = polygon[i];
    k += c = a[0] * b[1] - b[0] * a[1];
    x += (a[0] + b[0]) * c;
    y += (a[1] + b[1]) * c;
  }

  return k *= 3, [x / k, y / k];
}
},{}],"1Q4L":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

// Returns the 2D cross product of AB and AC vectors, i.e., the z-component of
// the 3D cross product in a quadrant I Cartesian coordinate system (+x is
// right, +y is up). Returns a positive value if ABC is counter-clockwise,
// negative if clockwise, and zero if the points are collinear.
function _default(a, b, c) {
  return (b[0] - a[0]) * (c[1] - a[1]) - (b[1] - a[1]) * (c[0] - a[0]);
}
},{}],"tgjV":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _cross = _interopRequireDefault(require("./cross"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function lexicographicOrder(a, b) {
  return a[0] - b[0] || a[1] - b[1];
} // Computes the upper convex hull per the monotone chain algorithm.
// Assumes points.length >= 3, is sorted by x, unique in y.
// Returns an array of indices into points in left-to-right order.


function computeUpperHullIndexes(points) {
  var n = points.length,
      indexes = [0, 1],
      size = 2;

  for (var i = 2; i < n; ++i) {
    while (size > 1 && (0, _cross.default)(points[indexes[size - 2]], points[indexes[size - 1]], points[i]) <= 0) --size;

    indexes[size++] = i;
  }

  return indexes.slice(0, size); // remove popped points
}

function _default(points) {
  if ((n = points.length) < 3) return null;
  var i,
      n,
      sortedPoints = new Array(n),
      flippedPoints = new Array(n);

  for (i = 0; i < n; ++i) sortedPoints[i] = [+points[i][0], +points[i][1], i];

  sortedPoints.sort(lexicographicOrder);

  for (i = 0; i < n; ++i) flippedPoints[i] = [sortedPoints[i][0], -sortedPoints[i][1]];

  var upperIndexes = computeUpperHullIndexes(sortedPoints),
      lowerIndexes = computeUpperHullIndexes(flippedPoints); // Construct the hull polygon, removing possible duplicate endpoints.

  var skipLeft = lowerIndexes[0] === upperIndexes[0],
      skipRight = lowerIndexes[lowerIndexes.length - 1] === upperIndexes[upperIndexes.length - 1],
      hull = []; // Add upper hull in right-to-l order.
  // Then add lower hull in left-to-right order.

  for (i = upperIndexes.length - 1; i >= 0; --i) hull.push(points[sortedPoints[upperIndexes[i]][2]]);

  for (i = +skipLeft; i < lowerIndexes.length - skipRight; ++i) hull.push(points[sortedPoints[lowerIndexes[i]][2]]);

  return hull;
}
},{"./cross":"1Q4L"}],"pcph":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(polygon, point) {
  var n = polygon.length,
      p = polygon[n - 1],
      x = point[0],
      y = point[1],
      x0 = p[0],
      y0 = p[1],
      x1,
      y1,
      inside = false;

  for (var i = 0; i < n; ++i) {
    p = polygon[i], x1 = p[0], y1 = p[1];
    if (y1 > y !== y0 > y && x < (x0 - x1) * (y - y1) / (y0 - y1) + x1) inside = !inside;
    x0 = x1, y0 = y1;
  }

  return inside;
}
},{}],"naEA":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(polygon) {
  var i = -1,
      n = polygon.length,
      b = polygon[n - 1],
      xa,
      ya,
      xb = b[0],
      yb = b[1],
      perimeter = 0;

  while (++i < n) {
    xa = xb;
    ya = yb;
    b = polygon[i];
    xb = b[0];
    yb = b[1];
    xa -= xb;
    ya -= yb;
    perimeter += Math.sqrt(xa * xa + ya * ya);
  }

  return perimeter;
}
},{}],"QnuL":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "polygonArea", {
  enumerable: true,
  get: function () {
    return _area.default;
  }
});
Object.defineProperty(exports, "polygonCentroid", {
  enumerable: true,
  get: function () {
    return _centroid.default;
  }
});
Object.defineProperty(exports, "polygonHull", {
  enumerable: true,
  get: function () {
    return _hull.default;
  }
});
Object.defineProperty(exports, "polygonContains", {
  enumerable: true,
  get: function () {
    return _contains.default;
  }
});
Object.defineProperty(exports, "polygonLength", {
  enumerable: true,
  get: function () {
    return _length.default;
  }
});

var _area = _interopRequireDefault(require("./area"));

var _centroid = _interopRequireDefault(require("./centroid"));

var _hull = _interopRequireDefault(require("./hull"));

var _contains = _interopRequireDefault(require("./contains"));

var _length = _interopRequireDefault(require("./length"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
},{"./area":"xGSp","./centroid":"5ySB","./hull":"tgjV","./contains":"pcph","./length":"naEA"}],"uDia":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default() {
  return Math.random();
}
},{}],"hmOZ":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defaultSource = _interopRequireDefault(require("./defaultSource"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _default = function sourceRandomUniform(source) {
  function randomUniform(min, max) {
    min = min == null ? 0 : +min;
    max = max == null ? 1 : +max;
    if (arguments.length === 1) max = min, min = 0;else max -= min;
    return function () {
      return source() * max + min;
    };
  }

  randomUniform.source = sourceRandomUniform;
  return randomUniform;
}(_defaultSource.default);

exports.default = _default;
},{"./defaultSource":"uDia"}],"pjsZ":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defaultSource = _interopRequireDefault(require("./defaultSource"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _default = function sourceRandomNormal(source) {
  function randomNormal(mu, sigma) {
    var x, r;
    mu = mu == null ? 0 : +mu;
    sigma = sigma == null ? 1 : +sigma;
    return function () {
      var y; // If available, use the second previously-generated uniform random.

      if (x != null) y = x, x = null; // Otherwise, generate a new x and y.
      else do {
          x = source() * 2 - 1;
          y = source() * 2 - 1;
          r = x * x + y * y;
        } while (!r || r > 1);
      return mu + sigma * y * Math.sqrt(-2 * Math.log(r) / r);
    };
  }

  randomNormal.source = sourceRandomNormal;
  return randomNormal;
}(_defaultSource.default);

exports.default = _default;
},{"./defaultSource":"uDia"}],"lZpB":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defaultSource = _interopRequireDefault(require("./defaultSource"));

var _normal = _interopRequireDefault(require("./normal"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _default = function sourceRandomLogNormal(source) {
  function randomLogNormal() {
    var randomNormal = _normal.default.source(source).apply(this, arguments);

    return function () {
      return Math.exp(randomNormal());
    };
  }

  randomLogNormal.source = sourceRandomLogNormal;
  return randomLogNormal;
}(_defaultSource.default);

exports.default = _default;
},{"./defaultSource":"uDia","./normal":"pjsZ"}],"DMHS":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defaultSource = _interopRequireDefault(require("./defaultSource"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _default = function sourceRandomIrwinHall(source) {
  function randomIrwinHall(n) {
    return function () {
      for (var sum = 0, i = 0; i < n; ++i) sum += source();

      return sum;
    };
  }

  randomIrwinHall.source = sourceRandomIrwinHall;
  return randomIrwinHall;
}(_defaultSource.default);

exports.default = _default;
},{"./defaultSource":"uDia"}],"g+l6":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defaultSource = _interopRequireDefault(require("./defaultSource"));

var _irwinHall = _interopRequireDefault(require("./irwinHall"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _default = function sourceRandomBates(source) {
  function randomBates(n) {
    var randomIrwinHall = _irwinHall.default.source(source)(n);

    return function () {
      return randomIrwinHall() / n;
    };
  }

  randomBates.source = sourceRandomBates;
  return randomBates;
}(_defaultSource.default);

exports.default = _default;
},{"./defaultSource":"uDia","./irwinHall":"DMHS"}],"gEmS":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defaultSource = _interopRequireDefault(require("./defaultSource"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _default = function sourceRandomExponential(source) {
  function randomExponential(lambda) {
    return function () {
      return -Math.log(1 - source()) / lambda;
    };
  }

  randomExponential.source = sourceRandomExponential;
  return randomExponential;
}(_defaultSource.default);

exports.default = _default;
},{"./defaultSource":"uDia"}],"4WQ4":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "randomUniform", {
  enumerable: true,
  get: function () {
    return _uniform.default;
  }
});
Object.defineProperty(exports, "randomNormal", {
  enumerable: true,
  get: function () {
    return _normal.default;
  }
});
Object.defineProperty(exports, "randomLogNormal", {
  enumerable: true,
  get: function () {
    return _logNormal.default;
  }
});
Object.defineProperty(exports, "randomBates", {
  enumerable: true,
  get: function () {
    return _bates.default;
  }
});
Object.defineProperty(exports, "randomIrwinHall", {
  enumerable: true,
  get: function () {
    return _irwinHall.default;
  }
});
Object.defineProperty(exports, "randomExponential", {
  enumerable: true,
  get: function () {
    return _exponential.default;
  }
});

var _uniform = _interopRequireDefault(require("./uniform"));

var _normal = _interopRequireDefault(require("./normal"));

var _logNormal = _interopRequireDefault(require("./logNormal"));

var _bates = _interopRequireDefault(require("./bates"));

var _irwinHall = _interopRequireDefault(require("./irwinHall"));

var _exponential = _interopRequireDefault(require("./exponential"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
},{"./uniform":"hmOZ","./normal":"pjsZ","./logNormal":"lZpB","./bates":"g+l6","./irwinHall":"DMHS","./exponential":"gEmS"}],"lLkj":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.slice = exports.map = void 0;
var array = Array.prototype;
var map = array.map;
exports.map = map;
var slice = array.slice;
exports.slice = slice;
},{}],"ELIM":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = ordinal;
exports.implicit = void 0;

var _d3Collection = require("d3-collection");

var _array = require("./array");

var implicit = {
  name: "implicit"
};
exports.implicit = implicit;

function ordinal(range) {
  var index = (0, _d3Collection.map)(),
      domain = [],
      unknown = implicit;
  range = range == null ? [] : _array.slice.call(range);

  function scale(d) {
    var key = d + "",
        i = index.get(key);

    if (!i) {
      if (unknown !== implicit) return unknown;
      index.set(key, i = domain.push(d));
    }

    return range[(i - 1) % range.length];
  }

  scale.domain = function (_) {
    if (!arguments.length) return domain.slice();
    domain = [], index = (0, _d3Collection.map)();
    var i = -1,
        n = _.length,
        d,
        key;

    while (++i < n) if (!index.has(key = (d = _[i]) + "")) index.set(key, domain.push(d));

    return scale;
  };

  scale.range = function (_) {
    return arguments.length ? (range = _array.slice.call(_), scale) : range.slice();
  };

  scale.unknown = function (_) {
    return arguments.length ? (unknown = _, scale) : unknown;
  };

  scale.copy = function () {
    return ordinal().domain(domain).range(range).unknown(unknown);
  };

  return scale;
}
},{"d3-collection":"qqV1","./array":"lLkj"}],"rJZF":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = band;
exports.point = point;

var _d3Array = require("d3-array");

var _ordinal = _interopRequireDefault(require("./ordinal"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function band() {
  var scale = (0, _ordinal.default)().unknown(undefined),
      domain = scale.domain,
      ordinalRange = scale.range,
      range = [0, 1],
      step,
      bandwidth,
      round = false,
      paddingInner = 0,
      paddingOuter = 0,
      align = 0.5;
  delete scale.unknown;

  function rescale() {
    var n = domain().length,
        reverse = range[1] < range[0],
        start = range[reverse - 0],
        stop = range[1 - reverse];
    step = (stop - start) / Math.max(1, n - paddingInner + paddingOuter * 2);
    if (round) step = Math.floor(step);
    start += (stop - start - step * (n - paddingInner)) * align;
    bandwidth = step * (1 - paddingInner);
    if (round) start = Math.round(start), bandwidth = Math.round(bandwidth);
    var values = (0, _d3Array.range)(n).map(function (i) {
      return start + step * i;
    });
    return ordinalRange(reverse ? values.reverse() : values);
  }

  scale.domain = function (_) {
    return arguments.length ? (domain(_), rescale()) : domain();
  };

  scale.range = function (_) {
    return arguments.length ? (range = [+_[0], +_[1]], rescale()) : range.slice();
  };

  scale.rangeRound = function (_) {
    return range = [+_[0], +_[1]], round = true, rescale();
  };

  scale.bandwidth = function () {
    return bandwidth;
  };

  scale.step = function () {
    return step;
  };

  scale.round = function (_) {
    return arguments.length ? (round = !!_, rescale()) : round;
  };

  scale.padding = function (_) {
    return arguments.length ? (paddingInner = paddingOuter = Math.max(0, Math.min(1, _)), rescale()) : paddingInner;
  };

  scale.paddingInner = function (_) {
    return arguments.length ? (paddingInner = Math.max(0, Math.min(1, _)), rescale()) : paddingInner;
  };

  scale.paddingOuter = function (_) {
    return arguments.length ? (paddingOuter = Math.max(0, Math.min(1, _)), rescale()) : paddingOuter;
  };

  scale.align = function (_) {
    return arguments.length ? (align = Math.max(0, Math.min(1, _)), rescale()) : align;
  };

  scale.copy = function () {
    return band().domain(domain()).range(range).round(round).paddingInner(paddingInner).paddingOuter(paddingOuter).align(align);
  };

  return rescale();
}

function pointish(scale) {
  var copy = scale.copy;
  scale.padding = scale.paddingOuter;
  delete scale.paddingInner;
  delete scale.paddingOuter;

  scale.copy = function () {
    return pointish(copy());
  };

  return scale;
}

function point() {
  return pointish(band().paddingInner(1));
}
},{"d3-array":"cBuZ","./ordinal":"ELIM"}],"zRWI":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(x) {
  return +x;
}
},{}],"ZpMB":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.deinterpolateLinear = deinterpolateLinear;
exports.copy = copy;
exports.default = continuous;

var _d3Array = require("d3-array");

var _d3Interpolate = require("d3-interpolate");

var _array = require("./array");

var _constant = _interopRequireDefault(require("./constant"));

var _number = _interopRequireDefault(require("./number"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var unit = [0, 1];

function deinterpolateLinear(a, b) {
  return (b -= a = +a) ? function (x) {
    return (x - a) / b;
  } : (0, _constant.default)(b);
}

function deinterpolateClamp(deinterpolate) {
  return function (a, b) {
    var d = deinterpolate(a = +a, b = +b);
    return function (x) {
      return x <= a ? 0 : x >= b ? 1 : d(x);
    };
  };
}

function reinterpolateClamp(reinterpolate) {
  return function (a, b) {
    var r = reinterpolate(a = +a, b = +b);
    return function (t) {
      return t <= 0 ? a : t >= 1 ? b : r(t);
    };
  };
}

function bimap(domain, range, deinterpolate, reinterpolate) {
  var d0 = domain[0],
      d1 = domain[1],
      r0 = range[0],
      r1 = range[1];
  if (d1 < d0) d0 = deinterpolate(d1, d0), r0 = reinterpolate(r1, r0);else d0 = deinterpolate(d0, d1), r0 = reinterpolate(r0, r1);
  return function (x) {
    return r0(d0(x));
  };
}

function polymap(domain, range, deinterpolate, reinterpolate) {
  var j = Math.min(domain.length, range.length) - 1,
      d = new Array(j),
      r = new Array(j),
      i = -1; // Reverse descending domains.

  if (domain[j] < domain[0]) {
    domain = domain.slice().reverse();
    range = range.slice().reverse();
  }

  while (++i < j) {
    d[i] = deinterpolate(domain[i], domain[i + 1]);
    r[i] = reinterpolate(range[i], range[i + 1]);
  }

  return function (x) {
    var i = (0, _d3Array.bisect)(domain, x, 1, j) - 1;
    return r[i](d[i](x));
  };
}

function copy(source, target) {
  return target.domain(source.domain()).range(source.range()).interpolate(source.interpolate()).clamp(source.clamp());
} // deinterpolate(a, b)(x) takes a domain value x in [a,b] and returns the corresponding parameter t in [0,1].
// reinterpolate(a, b)(t) takes a parameter t in [0,1] and returns the corresponding domain value x in [a,b].


function continuous(deinterpolate, reinterpolate) {
  var domain = unit,
      range = unit,
      interpolate = _d3Interpolate.interpolate,
      clamp = false,
      piecewise,
      output,
      input;

  function rescale() {
    piecewise = Math.min(domain.length, range.length) > 2 ? polymap : bimap;
    output = input = null;
    return scale;
  }

  function scale(x) {
    return (output || (output = piecewise(domain, range, clamp ? deinterpolateClamp(deinterpolate) : deinterpolate, interpolate)))(+x);
  }

  scale.invert = function (y) {
    return (input || (input = piecewise(range, domain, deinterpolateLinear, clamp ? reinterpolateClamp(reinterpolate) : reinterpolate)))(+y);
  };

  scale.domain = function (_) {
    return arguments.length ? (domain = _array.map.call(_, _number.default), rescale()) : domain.slice();
  };

  scale.range = function (_) {
    return arguments.length ? (range = _array.slice.call(_), rescale()) : range.slice();
  };

  scale.rangeRound = function (_) {
    return range = _array.slice.call(_), interpolate = _d3Interpolate.interpolateRound, rescale();
  };

  scale.clamp = function (_) {
    return arguments.length ? (clamp = !!_, rescale()) : clamp;
  };

  scale.interpolate = function (_) {
    return arguments.length ? (interpolate = _, rescale()) : interpolate;
  };

  return rescale();
}
},{"d3-array":"cBuZ","d3-interpolate":"mkGF","./array":"lLkj","./constant":"5O/Y","./number":"zRWI"}],"m0SA":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _d3Array = require("d3-array");

var _d3Format = require("d3-format");

function _default(domain, count, specifier) {
  var start = domain[0],
      stop = domain[domain.length - 1],
      step = (0, _d3Array.tickStep)(start, stop, count == null ? 10 : count),
      precision;
  specifier = (0, _d3Format.formatSpecifier)(specifier == null ? ",f" : specifier);

  switch (specifier.type) {
    case "s":
      {
        var value = Math.max(Math.abs(start), Math.abs(stop));
        if (specifier.precision == null && !isNaN(precision = (0, _d3Format.precisionPrefix)(step, value))) specifier.precision = precision;
        return (0, _d3Format.formatPrefix)(specifier, value);
      }

    case "":
    case "e":
    case "g":
    case "p":
    case "r":
      {
        if (specifier.precision == null && !isNaN(precision = (0, _d3Format.precisionRound)(step, Math.max(Math.abs(start), Math.abs(stop))))) specifier.precision = precision - (specifier.type === "e");
        break;
      }

    case "f":
    case "%":
      {
        if (specifier.precision == null && !isNaN(precision = (0, _d3Format.precisionFixed)(step))) specifier.precision = precision - (specifier.type === "%") * 2;
        break;
      }
  }

  return (0, _d3Format.format)(specifier);
}
},{"d3-array":"cBuZ","d3-format":"4gWe"}],"VMtl":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.linearish = linearish;
exports.default = linear;

var _d3Array = require("d3-array");

var _d3Interpolate = require("d3-interpolate");

var _continuous = _interopRequireWildcard(require("./continuous"));

var _tickFormat = _interopRequireDefault(require("./tickFormat"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function linearish(scale) {
  var domain = scale.domain;

  scale.ticks = function (count) {
    var d = domain();
    return (0, _d3Array.ticks)(d[0], d[d.length - 1], count == null ? 10 : count);
  };

  scale.tickFormat = function (count, specifier) {
    return (0, _tickFormat.default)(domain(), count, specifier);
  };

  scale.nice = function (count) {
    if (count == null) count = 10;
    var d = domain(),
        i0 = 0,
        i1 = d.length - 1,
        start = d[i0],
        stop = d[i1],
        step;

    if (stop < start) {
      step = start, start = stop, stop = step;
      step = i0, i0 = i1, i1 = step;
    }

    step = (0, _d3Array.tickIncrement)(start, stop, count);

    if (step > 0) {
      start = Math.floor(start / step) * step;
      stop = Math.ceil(stop / step) * step;
      step = (0, _d3Array.tickIncrement)(start, stop, count);
    } else if (step < 0) {
      start = Math.ceil(start * step) / step;
      stop = Math.floor(stop * step) / step;
      step = (0, _d3Array.tickIncrement)(start, stop, count);
    }

    if (step > 0) {
      d[i0] = Math.floor(start / step) * step;
      d[i1] = Math.ceil(stop / step) * step;
      domain(d);
    } else if (step < 0) {
      d[i0] = Math.ceil(start * step) / step;
      d[i1] = Math.floor(stop * step) / step;
      domain(d);
    }

    return scale;
  };

  return scale;
}

function linear() {
  var scale = (0, _continuous.default)(_continuous.deinterpolateLinear, _d3Interpolate.interpolateNumber);

  scale.copy = function () {
    return (0, _continuous.copy)(scale, linear());
  };

  return linearish(scale);
}
},{"d3-array":"cBuZ","d3-interpolate":"mkGF","./continuous":"ZpMB","./tickFormat":"m0SA"}],"eP89":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = identity;

var _array = require("./array");

var _linear = require("./linear");

var _number = _interopRequireDefault(require("./number"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function identity() {
  var domain = [0, 1];

  function scale(x) {
    return +x;
  }

  scale.invert = scale;

  scale.domain = scale.range = function (_) {
    return arguments.length ? (domain = _array.map.call(_, _number.default), scale) : domain.slice();
  };

  scale.copy = function () {
    return identity().domain(domain);
  };

  return (0, _linear.linearish)(scale);
}
},{"./array":"lLkj","./linear":"VMtl","./number":"zRWI"}],"gRJQ":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(domain, interval) {
  domain = domain.slice();
  var i0 = 0,
      i1 = domain.length - 1,
      x0 = domain[i0],
      x1 = domain[i1],
      t;

  if (x1 < x0) {
    t = i0, i0 = i1, i1 = t;
    t = x0, x0 = x1, x1 = t;
  }

  domain[i0] = interval.floor(x0);
  domain[i1] = interval.ceil(x1);
  return domain;
}
},{}],"X3YW":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = log;

var _d3Array = require("d3-array");

var _d3Format = require("d3-format");

var _constant = _interopRequireDefault(require("./constant"));

var _nice = _interopRequireDefault(require("./nice"));

var _continuous = _interopRequireWildcard(require("./continuous"));

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function deinterpolate(a, b) {
  return (b = Math.log(b / a)) ? function (x) {
    return Math.log(x / a) / b;
  } : (0, _constant.default)(b);
}

function reinterpolate(a, b) {
  return a < 0 ? function (t) {
    return -Math.pow(-b, t) * Math.pow(-a, 1 - t);
  } : function (t) {
    return Math.pow(b, t) * Math.pow(a, 1 - t);
  };
}

function pow10(x) {
  return isFinite(x) ? +("1e" + x) : x < 0 ? 0 : x;
}

function powp(base) {
  return base === 10 ? pow10 : base === Math.E ? Math.exp : function (x) {
    return Math.pow(base, x);
  };
}

function logp(base) {
  return base === Math.E ? Math.log : base === 10 && Math.log10 || base === 2 && Math.log2 || (base = Math.log(base), function (x) {
    return Math.log(x) / base;
  });
}

function reflect(f) {
  return function (x) {
    return -f(-x);
  };
}

function log() {
  var scale = (0, _continuous.default)(deinterpolate, reinterpolate).domain([1, 10]),
      domain = scale.domain,
      base = 10,
      logs = logp(10),
      pows = powp(10);

  function rescale() {
    logs = logp(base), pows = powp(base);
    if (domain()[0] < 0) logs = reflect(logs), pows = reflect(pows);
    return scale;
  }

  scale.base = function (_) {
    return arguments.length ? (base = +_, rescale()) : base;
  };

  scale.domain = function (_) {
    return arguments.length ? (domain(_), rescale()) : domain();
  };

  scale.ticks = function (count) {
    var d = domain(),
        u = d[0],
        v = d[d.length - 1],
        r;
    if (r = v < u) i = u, u = v, v = i;
    var i = logs(u),
        j = logs(v),
        p,
        k,
        t,
        n = count == null ? 10 : +count,
        z = [];

    if (!(base % 1) && j - i < n) {
      i = Math.round(i) - 1, j = Math.round(j) + 1;
      if (u > 0) for (; i < j; ++i) {
        for (k = 1, p = pows(i); k < base; ++k) {
          t = p * k;
          if (t < u) continue;
          if (t > v) break;
          z.push(t);
        }
      } else for (; i < j; ++i) {
        for (k = base - 1, p = pows(i); k >= 1; --k) {
          t = p * k;
          if (t < u) continue;
          if (t > v) break;
          z.push(t);
        }
      }
    } else {
      z = (0, _d3Array.ticks)(i, j, Math.min(j - i, n)).map(pows);
    }

    return r ? z.reverse() : z;
  };

  scale.tickFormat = function (count, specifier) {
    if (specifier == null) specifier = base === 10 ? ".0e" : ",";
    if (typeof specifier !== "function") specifier = (0, _d3Format.format)(specifier);
    if (count === Infinity) return specifier;
    if (count == null) count = 10;
    var k = Math.max(1, base * count / scale.ticks().length); // TODO fast estimate?

    return function (d) {
      var i = d / pows(Math.round(logs(d)));
      if (i * base < base - 0.5) i *= base;
      return i <= k ? specifier(d) : "";
    };
  };

  scale.nice = function () {
    return domain((0, _nice.default)(domain(), {
      floor: function (x) {
        return pows(Math.floor(logs(x)));
      },
      ceil: function (x) {
        return pows(Math.ceil(logs(x)));
      }
    }));
  };

  scale.copy = function () {
    return (0, _continuous.copy)(scale, log().base(base));
  };

  return scale;
}
},{"d3-array":"cBuZ","d3-format":"4gWe","./constant":"5O/Y","./nice":"gRJQ","./continuous":"ZpMB"}],"/yse":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = pow;
exports.sqrt = sqrt;

var _constant = _interopRequireDefault(require("./constant"));

var _linear = require("./linear");

var _continuous = _interopRequireWildcard(require("./continuous"));

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function raise(x, exponent) {
  return x < 0 ? -Math.pow(-x, exponent) : Math.pow(x, exponent);
}

function pow() {
  var exponent = 1,
      scale = (0, _continuous.default)(deinterpolate, reinterpolate),
      domain = scale.domain;

  function deinterpolate(a, b) {
    return (b = raise(b, exponent) - (a = raise(a, exponent))) ? function (x) {
      return (raise(x, exponent) - a) / b;
    } : (0, _constant.default)(b);
  }

  function reinterpolate(a, b) {
    b = raise(b, exponent) - (a = raise(a, exponent));
    return function (t) {
      return raise(a + b * t, 1 / exponent);
    };
  }

  scale.exponent = function (_) {
    return arguments.length ? (exponent = +_, domain(domain())) : exponent;
  };

  scale.copy = function () {
    return (0, _continuous.copy)(scale, pow().exponent(exponent));
  };

  return (0, _linear.linearish)(scale);
}

function sqrt() {
  return pow().exponent(0.5);
}
},{"./constant":"5O/Y","./linear":"VMtl","./continuous":"ZpMB"}],"fsZk":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = quantile;

var _d3Array = require("d3-array");

var _array = require("./array");

function quantile() {
  var domain = [],
      range = [],
      thresholds = [];

  function rescale() {
    var i = 0,
        n = Math.max(1, range.length);
    thresholds = new Array(n - 1);

    while (++i < n) thresholds[i - 1] = (0, _d3Array.quantile)(domain, i / n);

    return scale;
  }

  function scale(x) {
    if (!isNaN(x = +x)) return range[(0, _d3Array.bisect)(thresholds, x)];
  }

  scale.invertExtent = function (y) {
    var i = range.indexOf(y);
    return i < 0 ? [NaN, NaN] : [i > 0 ? thresholds[i - 1] : domain[0], i < thresholds.length ? thresholds[i] : domain[domain.length - 1]];
  };

  scale.domain = function (_) {
    if (!arguments.length) return domain.slice();
    domain = [];

    for (var i = 0, n = _.length, d; i < n; ++i) if (d = _[i], d != null && !isNaN(d = +d)) domain.push(d);

    domain.sort(_d3Array.ascending);
    return rescale();
  };

  scale.range = function (_) {
    return arguments.length ? (range = _array.slice.call(_), rescale()) : range.slice();
  };

  scale.quantiles = function () {
    return thresholds.slice();
  };

  scale.copy = function () {
    return quantile().domain(domain).range(range);
  };

  return scale;
}
},{"d3-array":"cBuZ","./array":"lLkj"}],"8Z2c":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = quantize;

var _d3Array = require("d3-array");

var _array = require("./array");

var _linear = require("./linear");

function quantize() {
  var x0 = 0,
      x1 = 1,
      n = 1,
      domain = [0.5],
      range = [0, 1];

  function scale(x) {
    if (x <= x) return range[(0, _d3Array.bisect)(domain, x, 0, n)];
  }

  function rescale() {
    var i = -1;
    domain = new Array(n);

    while (++i < n) domain[i] = ((i + 1) * x1 - (i - n) * x0) / (n + 1);

    return scale;
  }

  scale.domain = function (_) {
    return arguments.length ? (x0 = +_[0], x1 = +_[1], rescale()) : [x0, x1];
  };

  scale.range = function (_) {
    return arguments.length ? (n = (range = _array.slice.call(_)).length - 1, rescale()) : range.slice();
  };

  scale.invertExtent = function (y) {
    var i = range.indexOf(y);
    return i < 0 ? [NaN, NaN] : i < 1 ? [x0, domain[0]] : i >= n ? [domain[n - 1], x1] : [domain[i - 1], domain[i]];
  };

  scale.copy = function () {
    return quantize().domain([x0, x1]).range(range);
  };

  return (0, _linear.linearish)(scale);
}
},{"d3-array":"cBuZ","./array":"lLkj","./linear":"VMtl"}],"odYE":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = threshold;

var _d3Array = require("d3-array");

var _array = require("./array");

function threshold() {
  var domain = [0.5],
      range = [0, 1],
      n = 1;

  function scale(x) {
    if (x <= x) return range[(0, _d3Array.bisect)(domain, x, 0, n)];
  }

  scale.domain = function (_) {
    return arguments.length ? (domain = _array.slice.call(_), n = Math.min(domain.length, range.length - 1), scale) : domain.slice();
  };

  scale.range = function (_) {
    return arguments.length ? (range = _array.slice.call(_), n = Math.min(domain.length, range.length - 1), scale) : range.slice();
  };

  scale.invertExtent = function (y) {
    var i = range.indexOf(y);
    return [domain[i - 1], domain[i]];
  };

  scale.copy = function () {
    return threshold().domain(domain).range(range);
  };

  return scale;
}
},{"d3-array":"cBuZ","./array":"lLkj"}],"gsab":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = newInterval;
var t0 = new Date(),
    t1 = new Date();

function newInterval(floori, offseti, count, field) {
  function interval(date) {
    return floori(date = new Date(+date)), date;
  }

  interval.floor = interval;

  interval.ceil = function (date) {
    return floori(date = new Date(date - 1)), offseti(date, 1), floori(date), date;
  };

  interval.round = function (date) {
    var d0 = interval(date),
        d1 = interval.ceil(date);
    return date - d0 < d1 - date ? d0 : d1;
  };

  interval.offset = function (date, step) {
    return offseti(date = new Date(+date), step == null ? 1 : Math.floor(step)), date;
  };

  interval.range = function (start, stop, step) {
    var range = [],
        previous;
    start = interval.ceil(start);
    step = step == null ? 1 : Math.floor(step);
    if (!(start < stop) || !(step > 0)) return range; // also handles Invalid Date

    do range.push(previous = new Date(+start)), offseti(start, step), floori(start); while (previous < start && start < stop);

    return range;
  };

  interval.filter = function (test) {
    return newInterval(function (date) {
      if (date >= date) while (floori(date), !test(date)) date.setTime(date - 1);
    }, function (date, step) {
      if (date >= date) {
        if (step < 0) while (++step <= 0) {
          while (offseti(date, -1), !test(date)) {} // eslint-disable-line no-empty

        } else while (--step >= 0) {
          while (offseti(date, +1), !test(date)) {} // eslint-disable-line no-empty

        }
      }
    });
  };

  if (count) {
    interval.count = function (start, end) {
      t0.setTime(+start), t1.setTime(+end);
      floori(t0), floori(t1);
      return Math.floor(count(t0, t1));
    };

    interval.every = function (step) {
      step = Math.floor(step);
      return !isFinite(step) || !(step > 0) ? null : !(step > 1) ? interval : interval.filter(field ? function (d) {
        return field(d) % step === 0;
      } : function (d) {
        return interval.count(0, d) % step === 0;
      });
    };
  }

  return interval;
}
},{}],"r4Yr":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.milliseconds = exports.default = void 0;

var _interval = _interopRequireDefault(require("./interval"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var millisecond = (0, _interval.default)(function () {// noop
}, function (date, step) {
  date.setTime(+date + step);
}, function (start, end) {
  return end - start;
}); // An optimized implementation for this simple case.

millisecond.every = function (k) {
  k = Math.floor(k);
  if (!isFinite(k) || !(k > 0)) return null;
  if (!(k > 1)) return millisecond;
  return (0, _interval.default)(function (date) {
    date.setTime(Math.floor(date / k) * k);
  }, function (date, step) {
    date.setTime(+date + step * k);
  }, function (start, end) {
    return (end - start) / k;
  });
};

var _default = millisecond;
exports.default = _default;
var milliseconds = millisecond.range;
exports.milliseconds = milliseconds;
},{"./interval":"gsab"}],"EMi+":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.durationWeek = exports.durationDay = exports.durationHour = exports.durationMinute = exports.durationSecond = void 0;
var durationSecond = 1e3;
exports.durationSecond = durationSecond;
var durationMinute = 6e4;
exports.durationMinute = durationMinute;
var durationHour = 36e5;
exports.durationHour = durationHour;
var durationDay = 864e5;
exports.durationDay = durationDay;
var durationWeek = 6048e5;
exports.durationWeek = durationWeek;
},{}],"K4G6":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.seconds = exports.default = void 0;

var _interval = _interopRequireDefault(require("./interval"));

var _duration = require("./duration");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var second = (0, _interval.default)(function (date) {
  date.setTime(Math.floor(date / _duration.durationSecond) * _duration.durationSecond);
}, function (date, step) {
  date.setTime(+date + step * _duration.durationSecond);
}, function (start, end) {
  return (end - start) / _duration.durationSecond;
}, function (date) {
  return date.getUTCSeconds();
});
var _default = second;
exports.default = _default;
var seconds = second.range;
exports.seconds = seconds;
},{"./interval":"gsab","./duration":"EMi+"}],"sObl":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.minutes = exports.default = void 0;

var _interval = _interopRequireDefault(require("./interval"));

var _duration = require("./duration");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var minute = (0, _interval.default)(function (date) {
  date.setTime(Math.floor(date / _duration.durationMinute) * _duration.durationMinute);
}, function (date, step) {
  date.setTime(+date + step * _duration.durationMinute);
}, function (start, end) {
  return (end - start) / _duration.durationMinute;
}, function (date) {
  return date.getMinutes();
});
var _default = minute;
exports.default = _default;
var minutes = minute.range;
exports.minutes = minutes;
},{"./interval":"gsab","./duration":"EMi+"}],"wPv4":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.hours = exports.default = void 0;

var _interval = _interopRequireDefault(require("./interval"));

var _duration = require("./duration");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var hour = (0, _interval.default)(function (date) {
  var offset = date.getTimezoneOffset() * _duration.durationMinute % _duration.durationHour;

  if (offset < 0) offset += _duration.durationHour;
  date.setTime(Math.floor((+date - offset) / _duration.durationHour) * _duration.durationHour + offset);
}, function (date, step) {
  date.setTime(+date + step * _duration.durationHour);
}, function (start, end) {
  return (end - start) / _duration.durationHour;
}, function (date) {
  return date.getHours();
});
var _default = hour;
exports.default = _default;
var hours = hour.range;
exports.hours = hours;
},{"./interval":"gsab","./duration":"EMi+"}],"bZ++":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.days = exports.default = void 0;

var _interval = _interopRequireDefault(require("./interval"));

var _duration = require("./duration");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var day = (0, _interval.default)(function (date) {
  date.setHours(0, 0, 0, 0);
}, function (date, step) {
  date.setDate(date.getDate() + step);
}, function (start, end) {
  return (end - start - (end.getTimezoneOffset() - start.getTimezoneOffset()) * _duration.durationMinute) / _duration.durationDay;
}, function (date) {
  return date.getDate() - 1;
});
var _default = day;
exports.default = _default;
var days = day.range;
exports.days = days;
},{"./interval":"gsab","./duration":"EMi+"}],"6SUb":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.saturdays = exports.fridays = exports.thursdays = exports.wednesdays = exports.tuesdays = exports.mondays = exports.sundays = exports.saturday = exports.friday = exports.thursday = exports.wednesday = exports.tuesday = exports.monday = exports.sunday = void 0;

var _interval = _interopRequireDefault(require("./interval"));

var _duration = require("./duration");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function weekday(i) {
  return (0, _interval.default)(function (date) {
    date.setDate(date.getDate() - (date.getDay() + 7 - i) % 7);
    date.setHours(0, 0, 0, 0);
  }, function (date, step) {
    date.setDate(date.getDate() + step * 7);
  }, function (start, end) {
    return (end - start - (end.getTimezoneOffset() - start.getTimezoneOffset()) * _duration.durationMinute) / _duration.durationWeek;
  });
}

var sunday = weekday(0);
exports.sunday = sunday;
var monday = weekday(1);
exports.monday = monday;
var tuesday = weekday(2);
exports.tuesday = tuesday;
var wednesday = weekday(3);
exports.wednesday = wednesday;
var thursday = weekday(4);
exports.thursday = thursday;
var friday = weekday(5);
exports.friday = friday;
var saturday = weekday(6);
exports.saturday = saturday;
var sundays = sunday.range;
exports.sundays = sundays;
var mondays = monday.range;
exports.mondays = mondays;
var tuesdays = tuesday.range;
exports.tuesdays = tuesdays;
var wednesdays = wednesday.range;
exports.wednesdays = wednesdays;
var thursdays = thursday.range;
exports.thursdays = thursdays;
var fridays = friday.range;
exports.fridays = fridays;
var saturdays = saturday.range;
exports.saturdays = saturdays;
},{"./interval":"gsab","./duration":"EMi+"}],"XpbA":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.months = exports.default = void 0;

var _interval = _interopRequireDefault(require("./interval"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var month = (0, _interval.default)(function (date) {
  date.setDate(1);
  date.setHours(0, 0, 0, 0);
}, function (date, step) {
  date.setMonth(date.getMonth() + step);
}, function (start, end) {
  return end.getMonth() - start.getMonth() + (end.getFullYear() - start.getFullYear()) * 12;
}, function (date) {
  return date.getMonth();
});
var _default = month;
exports.default = _default;
var months = month.range;
exports.months = months;
},{"./interval":"gsab"}],"djmh":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.years = exports.default = void 0;

var _interval = _interopRequireDefault(require("./interval"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var year = (0, _interval.default)(function (date) {
  date.setMonth(0, 1);
  date.setHours(0, 0, 0, 0);
}, function (date, step) {
  date.setFullYear(date.getFullYear() + step);
}, function (start, end) {
  return end.getFullYear() - start.getFullYear();
}, function (date) {
  return date.getFullYear();
}); // An optimized implementation for this simple case.

year.every = function (k) {
  return !isFinite(k = Math.floor(k)) || !(k > 0) ? null : (0, _interval.default)(function (date) {
    date.setFullYear(Math.floor(date.getFullYear() / k) * k);
    date.setMonth(0, 1);
    date.setHours(0, 0, 0, 0);
  }, function (date, step) {
    date.setFullYear(date.getFullYear() + step * k);
  });
};

var _default = year;
exports.default = _default;
var years = year.range;
exports.years = years;
},{"./interval":"gsab"}],"c3Ah":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.utcMinutes = exports.default = void 0;

var _interval = _interopRequireDefault(require("./interval"));

var _duration = require("./duration");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var utcMinute = (0, _interval.default)(function (date) {
  date.setUTCSeconds(0, 0);
}, function (date, step) {
  date.setTime(+date + step * _duration.durationMinute);
}, function (start, end) {
  return (end - start) / _duration.durationMinute;
}, function (date) {
  return date.getUTCMinutes();
});
var _default = utcMinute;
exports.default = _default;
var utcMinutes = utcMinute.range;
exports.utcMinutes = utcMinutes;
},{"./interval":"gsab","./duration":"EMi+"}],"sGav":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.utcHours = exports.default = void 0;

var _interval = _interopRequireDefault(require("./interval"));

var _duration = require("./duration");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var utcHour = (0, _interval.default)(function (date) {
  date.setUTCMinutes(0, 0, 0);
}, function (date, step) {
  date.setTime(+date + step * _duration.durationHour);
}, function (start, end) {
  return (end - start) / _duration.durationHour;
}, function (date) {
  return date.getUTCHours();
});
var _default = utcHour;
exports.default = _default;
var utcHours = utcHour.range;
exports.utcHours = utcHours;
},{"./interval":"gsab","./duration":"EMi+"}],"ns65":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.utcDays = exports.default = void 0;

var _interval = _interopRequireDefault(require("./interval"));

var _duration = require("./duration");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var utcDay = (0, _interval.default)(function (date) {
  date.setUTCHours(0, 0, 0, 0);
}, function (date, step) {
  date.setUTCDate(date.getUTCDate() + step);
}, function (start, end) {
  return (end - start) / _duration.durationDay;
}, function (date) {
  return date.getUTCDate() - 1;
});
var _default = utcDay;
exports.default = _default;
var utcDays = utcDay.range;
exports.utcDays = utcDays;
},{"./interval":"gsab","./duration":"EMi+"}],"/HsO":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.utcSaturdays = exports.utcFridays = exports.utcThursdays = exports.utcWednesdays = exports.utcTuesdays = exports.utcMondays = exports.utcSundays = exports.utcSaturday = exports.utcFriday = exports.utcThursday = exports.utcWednesday = exports.utcTuesday = exports.utcMonday = exports.utcSunday = void 0;

var _interval = _interopRequireDefault(require("./interval"));

var _duration = require("./duration");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function utcWeekday(i) {
  return (0, _interval.default)(function (date) {
    date.setUTCDate(date.getUTCDate() - (date.getUTCDay() + 7 - i) % 7);
    date.setUTCHours(0, 0, 0, 0);
  }, function (date, step) {
    date.setUTCDate(date.getUTCDate() + step * 7);
  }, function (start, end) {
    return (end - start) / _duration.durationWeek;
  });
}

var utcSunday = utcWeekday(0);
exports.utcSunday = utcSunday;
var utcMonday = utcWeekday(1);
exports.utcMonday = utcMonday;
var utcTuesday = utcWeekday(2);
exports.utcTuesday = utcTuesday;
var utcWednesday = utcWeekday(3);
exports.utcWednesday = utcWednesday;
var utcThursday = utcWeekday(4);
exports.utcThursday = utcThursday;
var utcFriday = utcWeekday(5);
exports.utcFriday = utcFriday;
var utcSaturday = utcWeekday(6);
exports.utcSaturday = utcSaturday;
var utcSundays = utcSunday.range;
exports.utcSundays = utcSundays;
var utcMondays = utcMonday.range;
exports.utcMondays = utcMondays;
var utcTuesdays = utcTuesday.range;
exports.utcTuesdays = utcTuesdays;
var utcWednesdays = utcWednesday.range;
exports.utcWednesdays = utcWednesdays;
var utcThursdays = utcThursday.range;
exports.utcThursdays = utcThursdays;
var utcFridays = utcFriday.range;
exports.utcFridays = utcFridays;
var utcSaturdays = utcSaturday.range;
exports.utcSaturdays = utcSaturdays;
},{"./interval":"gsab","./duration":"EMi+"}],"KWFc":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.utcMonths = exports.default = void 0;

var _interval = _interopRequireDefault(require("./interval"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var utcMonth = (0, _interval.default)(function (date) {
  date.setUTCDate(1);
  date.setUTCHours(0, 0, 0, 0);
}, function (date, step) {
  date.setUTCMonth(date.getUTCMonth() + step);
}, function (start, end) {
  return end.getUTCMonth() - start.getUTCMonth() + (end.getUTCFullYear() - start.getUTCFullYear()) * 12;
}, function (date) {
  return date.getUTCMonth();
});
var _default = utcMonth;
exports.default = _default;
var utcMonths = utcMonth.range;
exports.utcMonths = utcMonths;
},{"./interval":"gsab"}],"LM11":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.utcYears = exports.default = void 0;

var _interval = _interopRequireDefault(require("./interval"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var utcYear = (0, _interval.default)(function (date) {
  date.setUTCMonth(0, 1);
  date.setUTCHours(0, 0, 0, 0);
}, function (date, step) {
  date.setUTCFullYear(date.getUTCFullYear() + step);
}, function (start, end) {
  return end.getUTCFullYear() - start.getUTCFullYear();
}, function (date) {
  return date.getUTCFullYear();
}); // An optimized implementation for this simple case.

utcYear.every = function (k) {
  return !isFinite(k = Math.floor(k)) || !(k > 0) ? null : (0, _interval.default)(function (date) {
    date.setUTCFullYear(Math.floor(date.getUTCFullYear() / k) * k);
    date.setUTCMonth(0, 1);
    date.setUTCHours(0, 0, 0, 0);
  }, function (date, step) {
    date.setUTCFullYear(date.getUTCFullYear() + step * k);
  });
};

var _default = utcYear;
exports.default = _default;
var utcYears = utcYear.range;
exports.utcYears = utcYears;
},{"./interval":"gsab"}],"F00f":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "timeInterval", {
  enumerable: true,
  get: function () {
    return _interval.default;
  }
});
Object.defineProperty(exports, "timeMillisecond", {
  enumerable: true,
  get: function () {
    return _millisecond.default;
  }
});
Object.defineProperty(exports, "timeMilliseconds", {
  enumerable: true,
  get: function () {
    return _millisecond.milliseconds;
  }
});
Object.defineProperty(exports, "utcMillisecond", {
  enumerable: true,
  get: function () {
    return _millisecond.default;
  }
});
Object.defineProperty(exports, "utcMilliseconds", {
  enumerable: true,
  get: function () {
    return _millisecond.milliseconds;
  }
});
Object.defineProperty(exports, "timeSecond", {
  enumerable: true,
  get: function () {
    return _second.default;
  }
});
Object.defineProperty(exports, "timeSeconds", {
  enumerable: true,
  get: function () {
    return _second.seconds;
  }
});
Object.defineProperty(exports, "utcSecond", {
  enumerable: true,
  get: function () {
    return _second.default;
  }
});
Object.defineProperty(exports, "utcSeconds", {
  enumerable: true,
  get: function () {
    return _second.seconds;
  }
});
Object.defineProperty(exports, "timeMinute", {
  enumerable: true,
  get: function () {
    return _minute.default;
  }
});
Object.defineProperty(exports, "timeMinutes", {
  enumerable: true,
  get: function () {
    return _minute.minutes;
  }
});
Object.defineProperty(exports, "timeHour", {
  enumerable: true,
  get: function () {
    return _hour.default;
  }
});
Object.defineProperty(exports, "timeHours", {
  enumerable: true,
  get: function () {
    return _hour.hours;
  }
});
Object.defineProperty(exports, "timeDay", {
  enumerable: true,
  get: function () {
    return _day.default;
  }
});
Object.defineProperty(exports, "timeDays", {
  enumerable: true,
  get: function () {
    return _day.days;
  }
});
Object.defineProperty(exports, "timeWeek", {
  enumerable: true,
  get: function () {
    return _week.sunday;
  }
});
Object.defineProperty(exports, "timeWeeks", {
  enumerable: true,
  get: function () {
    return _week.sundays;
  }
});
Object.defineProperty(exports, "timeSunday", {
  enumerable: true,
  get: function () {
    return _week.sunday;
  }
});
Object.defineProperty(exports, "timeSundays", {
  enumerable: true,
  get: function () {
    return _week.sundays;
  }
});
Object.defineProperty(exports, "timeMonday", {
  enumerable: true,
  get: function () {
    return _week.monday;
  }
});
Object.defineProperty(exports, "timeMondays", {
  enumerable: true,
  get: function () {
    return _week.mondays;
  }
});
Object.defineProperty(exports, "timeTuesday", {
  enumerable: true,
  get: function () {
    return _week.tuesday;
  }
});
Object.defineProperty(exports, "timeTuesdays", {
  enumerable: true,
  get: function () {
    return _week.tuesdays;
  }
});
Object.defineProperty(exports, "timeWednesday", {
  enumerable: true,
  get: function () {
    return _week.wednesday;
  }
});
Object.defineProperty(exports, "timeWednesdays", {
  enumerable: true,
  get: function () {
    return _week.wednesdays;
  }
});
Object.defineProperty(exports, "timeThursday", {
  enumerable: true,
  get: function () {
    return _week.thursday;
  }
});
Object.defineProperty(exports, "timeThursdays", {
  enumerable: true,
  get: function () {
    return _week.thursdays;
  }
});
Object.defineProperty(exports, "timeFriday", {
  enumerable: true,
  get: function () {
    return _week.friday;
  }
});
Object.defineProperty(exports, "timeFridays", {
  enumerable: true,
  get: function () {
    return _week.fridays;
  }
});
Object.defineProperty(exports, "timeSaturday", {
  enumerable: true,
  get: function () {
    return _week.saturday;
  }
});
Object.defineProperty(exports, "timeSaturdays", {
  enumerable: true,
  get: function () {
    return _week.saturdays;
  }
});
Object.defineProperty(exports, "timeMonth", {
  enumerable: true,
  get: function () {
    return _month.default;
  }
});
Object.defineProperty(exports, "timeMonths", {
  enumerable: true,
  get: function () {
    return _month.months;
  }
});
Object.defineProperty(exports, "timeYear", {
  enumerable: true,
  get: function () {
    return _year.default;
  }
});
Object.defineProperty(exports, "timeYears", {
  enumerable: true,
  get: function () {
    return _year.years;
  }
});
Object.defineProperty(exports, "utcMinute", {
  enumerable: true,
  get: function () {
    return _utcMinute.default;
  }
});
Object.defineProperty(exports, "utcMinutes", {
  enumerable: true,
  get: function () {
    return _utcMinute.utcMinutes;
  }
});
Object.defineProperty(exports, "utcHour", {
  enumerable: true,
  get: function () {
    return _utcHour.default;
  }
});
Object.defineProperty(exports, "utcHours", {
  enumerable: true,
  get: function () {
    return _utcHour.utcHours;
  }
});
Object.defineProperty(exports, "utcDay", {
  enumerable: true,
  get: function () {
    return _utcDay.default;
  }
});
Object.defineProperty(exports, "utcDays", {
  enumerable: true,
  get: function () {
    return _utcDay.utcDays;
  }
});
Object.defineProperty(exports, "utcWeek", {
  enumerable: true,
  get: function () {
    return _utcWeek.utcSunday;
  }
});
Object.defineProperty(exports, "utcWeeks", {
  enumerable: true,
  get: function () {
    return _utcWeek.utcSundays;
  }
});
Object.defineProperty(exports, "utcSunday", {
  enumerable: true,
  get: function () {
    return _utcWeek.utcSunday;
  }
});
Object.defineProperty(exports, "utcSundays", {
  enumerable: true,
  get: function () {
    return _utcWeek.utcSundays;
  }
});
Object.defineProperty(exports, "utcMonday", {
  enumerable: true,
  get: function () {
    return _utcWeek.utcMonday;
  }
});
Object.defineProperty(exports, "utcMondays", {
  enumerable: true,
  get: function () {
    return _utcWeek.utcMondays;
  }
});
Object.defineProperty(exports, "utcTuesday", {
  enumerable: true,
  get: function () {
    return _utcWeek.utcTuesday;
  }
});
Object.defineProperty(exports, "utcTuesdays", {
  enumerable: true,
  get: function () {
    return _utcWeek.utcTuesdays;
  }
});
Object.defineProperty(exports, "utcWednesday", {
  enumerable: true,
  get: function () {
    return _utcWeek.utcWednesday;
  }
});
Object.defineProperty(exports, "utcWednesdays", {
  enumerable: true,
  get: function () {
    return _utcWeek.utcWednesdays;
  }
});
Object.defineProperty(exports, "utcThursday", {
  enumerable: true,
  get: function () {
    return _utcWeek.utcThursday;
  }
});
Object.defineProperty(exports, "utcThursdays", {
  enumerable: true,
  get: function () {
    return _utcWeek.utcThursdays;
  }
});
Object.defineProperty(exports, "utcFriday", {
  enumerable: true,
  get: function () {
    return _utcWeek.utcFriday;
  }
});
Object.defineProperty(exports, "utcFridays", {
  enumerable: true,
  get: function () {
    return _utcWeek.utcFridays;
  }
});
Object.defineProperty(exports, "utcSaturday", {
  enumerable: true,
  get: function () {
    return _utcWeek.utcSaturday;
  }
});
Object.defineProperty(exports, "utcSaturdays", {
  enumerable: true,
  get: function () {
    return _utcWeek.utcSaturdays;
  }
});
Object.defineProperty(exports, "utcMonth", {
  enumerable: true,
  get: function () {
    return _utcMonth.default;
  }
});
Object.defineProperty(exports, "utcMonths", {
  enumerable: true,
  get: function () {
    return _utcMonth.utcMonths;
  }
});
Object.defineProperty(exports, "utcYear", {
  enumerable: true,
  get: function () {
    return _utcYear.default;
  }
});
Object.defineProperty(exports, "utcYears", {
  enumerable: true,
  get: function () {
    return _utcYear.utcYears;
  }
});

var _interval = _interopRequireDefault(require("./interval"));

var _millisecond = _interopRequireWildcard(require("./millisecond"));

var _second = _interopRequireWildcard(require("./second"));

var _minute = _interopRequireWildcard(require("./minute"));

var _hour = _interopRequireWildcard(require("./hour"));

var _day = _interopRequireWildcard(require("./day"));

var _week = require("./week");

var _month = _interopRequireWildcard(require("./month"));

var _year = _interopRequireWildcard(require("./year"));

var _utcMinute = _interopRequireWildcard(require("./utcMinute"));

var _utcHour = _interopRequireWildcard(require("./utcHour"));

var _utcDay = _interopRequireWildcard(require("./utcDay"));

var _utcWeek = require("./utcWeek");

var _utcMonth = _interopRequireWildcard(require("./utcMonth"));

var _utcYear = _interopRequireWildcard(require("./utcYear"));

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
},{"./interval":"gsab","./millisecond":"r4Yr","./second":"K4G6","./minute":"sObl","./hour":"wPv4","./day":"bZ++","./week":"6SUb","./month":"XpbA","./year":"djmh","./utcMinute":"c3Ah","./utcHour":"sGav","./utcDay":"ns65","./utcWeek":"/HsO","./utcMonth":"KWFc","./utcYear":"LM11"}],"rf9h":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = formatLocale;

var _d3Time = require("d3-time");

function localDate(d) {
  if (0 <= d.y && d.y < 100) {
    var date = new Date(-1, d.m, d.d, d.H, d.M, d.S, d.L);
    date.setFullYear(d.y);
    return date;
  }

  return new Date(d.y, d.m, d.d, d.H, d.M, d.S, d.L);
}

function utcDate(d) {
  if (0 <= d.y && d.y < 100) {
    var date = new Date(Date.UTC(-1, d.m, d.d, d.H, d.M, d.S, d.L));
    date.setUTCFullYear(d.y);
    return date;
  }

  return new Date(Date.UTC(d.y, d.m, d.d, d.H, d.M, d.S, d.L));
}

function newYear(y) {
  return {
    y: y,
    m: 0,
    d: 1,
    H: 0,
    M: 0,
    S: 0,
    L: 0
  };
}

function formatLocale(locale) {
  var locale_dateTime = locale.dateTime,
      locale_date = locale.date,
      locale_time = locale.time,
      locale_periods = locale.periods,
      locale_weekdays = locale.days,
      locale_shortWeekdays = locale.shortDays,
      locale_months = locale.months,
      locale_shortMonths = locale.shortMonths;
  var periodRe = formatRe(locale_periods),
      periodLookup = formatLookup(locale_periods),
      weekdayRe = formatRe(locale_weekdays),
      weekdayLookup = formatLookup(locale_weekdays),
      shortWeekdayRe = formatRe(locale_shortWeekdays),
      shortWeekdayLookup = formatLookup(locale_shortWeekdays),
      monthRe = formatRe(locale_months),
      monthLookup = formatLookup(locale_months),
      shortMonthRe = formatRe(locale_shortMonths),
      shortMonthLookup = formatLookup(locale_shortMonths);
  var formats = {
    "a": formatShortWeekday,
    "A": formatWeekday,
    "b": formatShortMonth,
    "B": formatMonth,
    "c": null,
    "d": formatDayOfMonth,
    "e": formatDayOfMonth,
    "f": formatMicroseconds,
    "H": formatHour24,
    "I": formatHour12,
    "j": formatDayOfYear,
    "L": formatMilliseconds,
    "m": formatMonthNumber,
    "M": formatMinutes,
    "p": formatPeriod,
    "Q": formatUnixTimestamp,
    "s": formatUnixTimestampSeconds,
    "S": formatSeconds,
    "u": formatWeekdayNumberMonday,
    "U": formatWeekNumberSunday,
    "V": formatWeekNumberISO,
    "w": formatWeekdayNumberSunday,
    "W": formatWeekNumberMonday,
    "x": null,
    "X": null,
    "y": formatYear,
    "Y": formatFullYear,
    "Z": formatZone,
    "%": formatLiteralPercent
  };
  var utcFormats = {
    "a": formatUTCShortWeekday,
    "A": formatUTCWeekday,
    "b": formatUTCShortMonth,
    "B": formatUTCMonth,
    "c": null,
    "d": formatUTCDayOfMonth,
    "e": formatUTCDayOfMonth,
    "f": formatUTCMicroseconds,
    "H": formatUTCHour24,
    "I": formatUTCHour12,
    "j": formatUTCDayOfYear,
    "L": formatUTCMilliseconds,
    "m": formatUTCMonthNumber,
    "M": formatUTCMinutes,
    "p": formatUTCPeriod,
    "Q": formatUnixTimestamp,
    "s": formatUnixTimestampSeconds,
    "S": formatUTCSeconds,
    "u": formatUTCWeekdayNumberMonday,
    "U": formatUTCWeekNumberSunday,
    "V": formatUTCWeekNumberISO,
    "w": formatUTCWeekdayNumberSunday,
    "W": formatUTCWeekNumberMonday,
    "x": null,
    "X": null,
    "y": formatUTCYear,
    "Y": formatUTCFullYear,
    "Z": formatUTCZone,
    "%": formatLiteralPercent
  };
  var parses = {
    "a": parseShortWeekday,
    "A": parseWeekday,
    "b": parseShortMonth,
    "B": parseMonth,
    "c": parseLocaleDateTime,
    "d": parseDayOfMonth,
    "e": parseDayOfMonth,
    "f": parseMicroseconds,
    "H": parseHour24,
    "I": parseHour24,
    "j": parseDayOfYear,
    "L": parseMilliseconds,
    "m": parseMonthNumber,
    "M": parseMinutes,
    "p": parsePeriod,
    "Q": parseUnixTimestamp,
    "s": parseUnixTimestampSeconds,
    "S": parseSeconds,
    "u": parseWeekdayNumberMonday,
    "U": parseWeekNumberSunday,
    "V": parseWeekNumberISO,
    "w": parseWeekdayNumberSunday,
    "W": parseWeekNumberMonday,
    "x": parseLocaleDate,
    "X": parseLocaleTime,
    "y": parseYear,
    "Y": parseFullYear,
    "Z": parseZone,
    "%": parseLiteralPercent
  }; // These recursive directive definitions must be deferred.

  formats.x = newFormat(locale_date, formats);
  formats.X = newFormat(locale_time, formats);
  formats.c = newFormat(locale_dateTime, formats);
  utcFormats.x = newFormat(locale_date, utcFormats);
  utcFormats.X = newFormat(locale_time, utcFormats);
  utcFormats.c = newFormat(locale_dateTime, utcFormats);

  function newFormat(specifier, formats) {
    return function (date) {
      var string = [],
          i = -1,
          j = 0,
          n = specifier.length,
          c,
          pad,
          format;
      if (!(date instanceof Date)) date = new Date(+date);

      while (++i < n) {
        if (specifier.charCodeAt(i) === 37) {
          string.push(specifier.slice(j, i));
          if ((pad = pads[c = specifier.charAt(++i)]) != null) c = specifier.charAt(++i);else pad = c === "e" ? " " : "0";
          if (format = formats[c]) c = format(date, pad);
          string.push(c);
          j = i + 1;
        }
      }

      string.push(specifier.slice(j, i));
      return string.join("");
    };
  }

  function newParse(specifier, newDate) {
    return function (string) {
      var d = newYear(1900),
          i = parseSpecifier(d, specifier, string += "", 0),
          week,
          day;
      if (i != string.length) return null; // If a UNIX timestamp is specified, return it.

      if ("Q" in d) return new Date(d.Q); // The am-pm flag is 0 for AM, and 1 for PM.

      if ("p" in d) d.H = d.H % 12 + d.p * 12; // Convert day-of-week and week-of-year to day-of-year.

      if ("V" in d) {
        if (d.V < 1 || d.V > 53) return null;
        if (!("w" in d)) d.w = 1;

        if ("Z" in d) {
          week = utcDate(newYear(d.y)), day = week.getUTCDay();
          week = day > 4 || day === 0 ? _d3Time.utcMonday.ceil(week) : (0, _d3Time.utcMonday)(week);
          week = _d3Time.utcDay.offset(week, (d.V - 1) * 7);
          d.y = week.getUTCFullYear();
          d.m = week.getUTCMonth();
          d.d = week.getUTCDate() + (d.w + 6) % 7;
        } else {
          week = newDate(newYear(d.y)), day = week.getDay();
          week = day > 4 || day === 0 ? _d3Time.timeMonday.ceil(week) : (0, _d3Time.timeMonday)(week);
          week = _d3Time.timeDay.offset(week, (d.V - 1) * 7);
          d.y = week.getFullYear();
          d.m = week.getMonth();
          d.d = week.getDate() + (d.w + 6) % 7;
        }
      } else if ("W" in d || "U" in d) {
        if (!("w" in d)) d.w = "u" in d ? d.u % 7 : "W" in d ? 1 : 0;
        day = "Z" in d ? utcDate(newYear(d.y)).getUTCDay() : newDate(newYear(d.y)).getDay();
        d.m = 0;
        d.d = "W" in d ? (d.w + 6) % 7 + d.W * 7 - (day + 5) % 7 : d.w + d.U * 7 - (day + 6) % 7;
      } // If a time zone is specified, all fields are interpreted as UTC and then
      // offset according to the specified time zone.


      if ("Z" in d) {
        d.H += d.Z / 100 | 0;
        d.M += d.Z % 100;
        return utcDate(d);
      } // Otherwise, all fields are in local time.


      return newDate(d);
    };
  }

  function parseSpecifier(d, specifier, string, j) {
    var i = 0,
        n = specifier.length,
        m = string.length,
        c,
        parse;

    while (i < n) {
      if (j >= m) return -1;
      c = specifier.charCodeAt(i++);

      if (c === 37) {
        c = specifier.charAt(i++);
        parse = parses[c in pads ? specifier.charAt(i++) : c];
        if (!parse || (j = parse(d, string, j)) < 0) return -1;
      } else if (c != string.charCodeAt(j++)) {
        return -1;
      }
    }

    return j;
  }

  function parsePeriod(d, string, i) {
    var n = periodRe.exec(string.slice(i));
    return n ? (d.p = periodLookup[n[0].toLowerCase()], i + n[0].length) : -1;
  }

  function parseShortWeekday(d, string, i) {
    var n = shortWeekdayRe.exec(string.slice(i));
    return n ? (d.w = shortWeekdayLookup[n[0].toLowerCase()], i + n[0].length) : -1;
  }

  function parseWeekday(d, string, i) {
    var n = weekdayRe.exec(string.slice(i));
    return n ? (d.w = weekdayLookup[n[0].toLowerCase()], i + n[0].length) : -1;
  }

  function parseShortMonth(d, string, i) {
    var n = shortMonthRe.exec(string.slice(i));
    return n ? (d.m = shortMonthLookup[n[0].toLowerCase()], i + n[0].length) : -1;
  }

  function parseMonth(d, string, i) {
    var n = monthRe.exec(string.slice(i));
    return n ? (d.m = monthLookup[n[0].toLowerCase()], i + n[0].length) : -1;
  }

  function parseLocaleDateTime(d, string, i) {
    return parseSpecifier(d, locale_dateTime, string, i);
  }

  function parseLocaleDate(d, string, i) {
    return parseSpecifier(d, locale_date, string, i);
  }

  function parseLocaleTime(d, string, i) {
    return parseSpecifier(d, locale_time, string, i);
  }

  function formatShortWeekday(d) {
    return locale_shortWeekdays[d.getDay()];
  }

  function formatWeekday(d) {
    return locale_weekdays[d.getDay()];
  }

  function formatShortMonth(d) {
    return locale_shortMonths[d.getMonth()];
  }

  function formatMonth(d) {
    return locale_months[d.getMonth()];
  }

  function formatPeriod(d) {
    return locale_periods[+(d.getHours() >= 12)];
  }

  function formatUTCShortWeekday(d) {
    return locale_shortWeekdays[d.getUTCDay()];
  }

  function formatUTCWeekday(d) {
    return locale_weekdays[d.getUTCDay()];
  }

  function formatUTCShortMonth(d) {
    return locale_shortMonths[d.getUTCMonth()];
  }

  function formatUTCMonth(d) {
    return locale_months[d.getUTCMonth()];
  }

  function formatUTCPeriod(d) {
    return locale_periods[+(d.getUTCHours() >= 12)];
  }

  return {
    format: function (specifier) {
      var f = newFormat(specifier += "", formats);

      f.toString = function () {
        return specifier;
      };

      return f;
    },
    parse: function (specifier) {
      var p = newParse(specifier += "", localDate);

      p.toString = function () {
        return specifier;
      };

      return p;
    },
    utcFormat: function (specifier) {
      var f = newFormat(specifier += "", utcFormats);

      f.toString = function () {
        return specifier;
      };

      return f;
    },
    utcParse: function (specifier) {
      var p = newParse(specifier, utcDate);

      p.toString = function () {
        return specifier;
      };

      return p;
    }
  };
}

var pads = {
  "-": "",
  "_": " ",
  "0": "0"
},
    numberRe = /^\s*\d+/,
    // note: ignores next directive
percentRe = /^%/,
    requoteRe = /[\\^$*+?|[\]().{}]/g;

function pad(value, fill, width) {
  var sign = value < 0 ? "-" : "",
      string = (sign ? -value : value) + "",
      length = string.length;
  return sign + (length < width ? new Array(width - length + 1).join(fill) + string : string);
}

function requote(s) {
  return s.replace(requoteRe, "\\$&");
}

function formatRe(names) {
  return new RegExp("^(?:" + names.map(requote).join("|") + ")", "i");
}

function formatLookup(names) {
  var map = {},
      i = -1,
      n = names.length;

  while (++i < n) map[names[i].toLowerCase()] = i;

  return map;
}

function parseWeekdayNumberSunday(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 1));
  return n ? (d.w = +n[0], i + n[0].length) : -1;
}

function parseWeekdayNumberMonday(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 1));
  return n ? (d.u = +n[0], i + n[0].length) : -1;
}

function parseWeekNumberSunday(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 2));
  return n ? (d.U = +n[0], i + n[0].length) : -1;
}

function parseWeekNumberISO(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 2));
  return n ? (d.V = +n[0], i + n[0].length) : -1;
}

function parseWeekNumberMonday(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 2));
  return n ? (d.W = +n[0], i + n[0].length) : -1;
}

function parseFullYear(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 4));
  return n ? (d.y = +n[0], i + n[0].length) : -1;
}

function parseYear(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 2));
  return n ? (d.y = +n[0] + (+n[0] > 68 ? 1900 : 2000), i + n[0].length) : -1;
}

function parseZone(d, string, i) {
  var n = /^(Z)|([+-]\d\d)(?::?(\d\d))?/.exec(string.slice(i, i + 6));
  return n ? (d.Z = n[1] ? 0 : -(n[2] + (n[3] || "00")), i + n[0].length) : -1;
}

function parseMonthNumber(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 2));
  return n ? (d.m = n[0] - 1, i + n[0].length) : -1;
}

function parseDayOfMonth(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 2));
  return n ? (d.d = +n[0], i + n[0].length) : -1;
}

function parseDayOfYear(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 3));
  return n ? (d.m = 0, d.d = +n[0], i + n[0].length) : -1;
}

function parseHour24(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 2));
  return n ? (d.H = +n[0], i + n[0].length) : -1;
}

function parseMinutes(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 2));
  return n ? (d.M = +n[0], i + n[0].length) : -1;
}

function parseSeconds(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 2));
  return n ? (d.S = +n[0], i + n[0].length) : -1;
}

function parseMilliseconds(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 3));
  return n ? (d.L = +n[0], i + n[0].length) : -1;
}

function parseMicroseconds(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 6));
  return n ? (d.L = Math.floor(n[0] / 1000), i + n[0].length) : -1;
}

function parseLiteralPercent(d, string, i) {
  var n = percentRe.exec(string.slice(i, i + 1));
  return n ? i + n[0].length : -1;
}

function parseUnixTimestamp(d, string, i) {
  var n = numberRe.exec(string.slice(i));
  return n ? (d.Q = +n[0], i + n[0].length) : -1;
}

function parseUnixTimestampSeconds(d, string, i) {
  var n = numberRe.exec(string.slice(i));
  return n ? (d.Q = +n[0] * 1000, i + n[0].length) : -1;
}

function formatDayOfMonth(d, p) {
  return pad(d.getDate(), p, 2);
}

function formatHour24(d, p) {
  return pad(d.getHours(), p, 2);
}

function formatHour12(d, p) {
  return pad(d.getHours() % 12 || 12, p, 2);
}

function formatDayOfYear(d, p) {
  return pad(1 + _d3Time.timeDay.count((0, _d3Time.timeYear)(d), d), p, 3);
}

function formatMilliseconds(d, p) {
  return pad(d.getMilliseconds(), p, 3);
}

function formatMicroseconds(d, p) {
  return formatMilliseconds(d, p) + "000";
}

function formatMonthNumber(d, p) {
  return pad(d.getMonth() + 1, p, 2);
}

function formatMinutes(d, p) {
  return pad(d.getMinutes(), p, 2);
}

function formatSeconds(d, p) {
  return pad(d.getSeconds(), p, 2);
}

function formatWeekdayNumberMonday(d) {
  var day = d.getDay();
  return day === 0 ? 7 : day;
}

function formatWeekNumberSunday(d, p) {
  return pad(_d3Time.timeSunday.count((0, _d3Time.timeYear)(d), d), p, 2);
}

function formatWeekNumberISO(d, p) {
  var day = d.getDay();
  d = day >= 4 || day === 0 ? (0, _d3Time.timeThursday)(d) : _d3Time.timeThursday.ceil(d);
  return pad(_d3Time.timeThursday.count((0, _d3Time.timeYear)(d), d) + ((0, _d3Time.timeYear)(d).getDay() === 4), p, 2);
}

function formatWeekdayNumberSunday(d) {
  return d.getDay();
}

function formatWeekNumberMonday(d, p) {
  return pad(_d3Time.timeMonday.count((0, _d3Time.timeYear)(d), d), p, 2);
}

function formatYear(d, p) {
  return pad(d.getFullYear() % 100, p, 2);
}

function formatFullYear(d, p) {
  return pad(d.getFullYear() % 10000, p, 4);
}

function formatZone(d) {
  var z = d.getTimezoneOffset();
  return (z > 0 ? "-" : (z *= -1, "+")) + pad(z / 60 | 0, "0", 2) + pad(z % 60, "0", 2);
}

function formatUTCDayOfMonth(d, p) {
  return pad(d.getUTCDate(), p, 2);
}

function formatUTCHour24(d, p) {
  return pad(d.getUTCHours(), p, 2);
}

function formatUTCHour12(d, p) {
  return pad(d.getUTCHours() % 12 || 12, p, 2);
}

function formatUTCDayOfYear(d, p) {
  return pad(1 + _d3Time.utcDay.count((0, _d3Time.utcYear)(d), d), p, 3);
}

function formatUTCMilliseconds(d, p) {
  return pad(d.getUTCMilliseconds(), p, 3);
}

function formatUTCMicroseconds(d, p) {
  return formatUTCMilliseconds(d, p) + "000";
}

function formatUTCMonthNumber(d, p) {
  return pad(d.getUTCMonth() + 1, p, 2);
}

function formatUTCMinutes(d, p) {
  return pad(d.getUTCMinutes(), p, 2);
}

function formatUTCSeconds(d, p) {
  return pad(d.getUTCSeconds(), p, 2);
}

function formatUTCWeekdayNumberMonday(d) {
  var dow = d.getUTCDay();
  return dow === 0 ? 7 : dow;
}

function formatUTCWeekNumberSunday(d, p) {
  return pad(_d3Time.utcSunday.count((0, _d3Time.utcYear)(d), d), p, 2);
}

function formatUTCWeekNumberISO(d, p) {
  var day = d.getUTCDay();
  d = day >= 4 || day === 0 ? (0, _d3Time.utcThursday)(d) : _d3Time.utcThursday.ceil(d);
  return pad(_d3Time.utcThursday.count((0, _d3Time.utcYear)(d), d) + ((0, _d3Time.utcYear)(d).getUTCDay() === 4), p, 2);
}

function formatUTCWeekdayNumberSunday(d) {
  return d.getUTCDay();
}

function formatUTCWeekNumberMonday(d, p) {
  return pad(_d3Time.utcMonday.count((0, _d3Time.utcYear)(d), d), p, 2);
}

function formatUTCYear(d, p) {
  return pad(d.getUTCFullYear() % 100, p, 2);
}

function formatUTCFullYear(d, p) {
  return pad(d.getUTCFullYear() % 10000, p, 4);
}

function formatUTCZone() {
  return "+0000";
}

function formatLiteralPercent() {
  return "%";
}

function formatUnixTimestamp(d) {
  return +d;
}

function formatUnixTimestampSeconds(d) {
  return Math.floor(+d / 1000);
}
},{"d3-time":"F00f"}],"LmVV":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = defaultLocale;
exports.utcParse = exports.utcFormat = exports.timeParse = exports.timeFormat = void 0;

var _locale = _interopRequireDefault(require("./locale"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var locale;
var timeFormat;
exports.timeFormat = timeFormat;
var timeParse;
exports.timeParse = timeParse;
var utcFormat;
exports.utcFormat = utcFormat;
var utcParse;
exports.utcParse = utcParse;
defaultLocale({
  dateTime: "%x, %X",
  date: "%-m/%-d/%Y",
  time: "%-I:%M:%S %p",
  periods: ["AM", "PM"],
  days: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"],
  shortDays: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
  months: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],
  shortMonths: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"]
});

function defaultLocale(definition) {
  locale = (0, _locale.default)(definition);
  exports.timeFormat = timeFormat = locale.format;
  exports.timeParse = timeParse = locale.parse;
  exports.utcFormat = utcFormat = locale.utcFormat;
  exports.utcParse = utcParse = locale.utcParse;
  return locale;
}
},{"./locale":"rf9h"}],"UFnF":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.isoSpecifier = void 0;

var _defaultLocale = require("./defaultLocale");

var isoSpecifier = "%Y-%m-%dT%H:%M:%S.%LZ";
exports.isoSpecifier = isoSpecifier;

function formatIsoNative(date) {
  return date.toISOString();
}

var formatIso = Date.prototype.toISOString ? formatIsoNative : (0, _defaultLocale.utcFormat)(isoSpecifier);
var _default = formatIso;
exports.default = _default;
},{"./defaultLocale":"LmVV"}],"hAdq":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _isoFormat = require("./isoFormat");

var _defaultLocale = require("./defaultLocale");

function parseIsoNative(string) {
  var date = new Date(string);
  return isNaN(date) ? null : date;
}

var parseIso = +new Date("2000-01-01T00:00:00.000Z") ? parseIsoNative : (0, _defaultLocale.utcParse)(_isoFormat.isoSpecifier);
var _default = parseIso;
exports.default = _default;
},{"./isoFormat":"UFnF","./defaultLocale":"LmVV"}],"+7zs":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "timeFormatDefaultLocale", {
  enumerable: true,
  get: function () {
    return _defaultLocale.default;
  }
});
Object.defineProperty(exports, "timeFormat", {
  enumerable: true,
  get: function () {
    return _defaultLocale.timeFormat;
  }
});
Object.defineProperty(exports, "timeParse", {
  enumerable: true,
  get: function () {
    return _defaultLocale.timeParse;
  }
});
Object.defineProperty(exports, "utcFormat", {
  enumerable: true,
  get: function () {
    return _defaultLocale.utcFormat;
  }
});
Object.defineProperty(exports, "utcParse", {
  enumerable: true,
  get: function () {
    return _defaultLocale.utcParse;
  }
});
Object.defineProperty(exports, "timeFormatLocale", {
  enumerable: true,
  get: function () {
    return _locale.default;
  }
});
Object.defineProperty(exports, "isoFormat", {
  enumerable: true,
  get: function () {
    return _isoFormat.default;
  }
});
Object.defineProperty(exports, "isoParse", {
  enumerable: true,
  get: function () {
    return _isoParse.default;
  }
});

var _defaultLocale = _interopRequireWildcard(require("./defaultLocale"));

var _locale = _interopRequireDefault(require("./locale"));

var _isoFormat = _interopRequireDefault(require("./isoFormat"));

var _isoParse = _interopRequireDefault(require("./isoParse"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }
},{"./defaultLocale":"LmVV","./locale":"rf9h","./isoFormat":"UFnF","./isoParse":"hAdq"}],"QHrh":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.calendar = calendar;
exports.default = _default;

var _d3Array = require("d3-array");

var _d3Interpolate = require("d3-interpolate");

var _d3Time = require("d3-time");

var _d3TimeFormat = require("d3-time-format");

var _array = require("./array");

var _continuous = _interopRequireWildcard(require("./continuous"));

var _nice = _interopRequireDefault(require("./nice"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

var durationSecond = 1000,
    durationMinute = durationSecond * 60,
    durationHour = durationMinute * 60,
    durationDay = durationHour * 24,
    durationWeek = durationDay * 7,
    durationMonth = durationDay * 30,
    durationYear = durationDay * 365;

function date(t) {
  return new Date(t);
}

function number(t) {
  return t instanceof Date ? +t : +new Date(+t);
}

function calendar(year, month, week, day, hour, minute, second, millisecond, format) {
  var scale = (0, _continuous.default)(_continuous.deinterpolateLinear, _d3Interpolate.interpolateNumber),
      invert = scale.invert,
      domain = scale.domain;
  var formatMillisecond = format(".%L"),
      formatSecond = format(":%S"),
      formatMinute = format("%I:%M"),
      formatHour = format("%I %p"),
      formatDay = format("%a %d"),
      formatWeek = format("%b %d"),
      formatMonth = format("%B"),
      formatYear = format("%Y");
  var tickIntervals = [[second, 1, durationSecond], [second, 5, 5 * durationSecond], [second, 15, 15 * durationSecond], [second, 30, 30 * durationSecond], [minute, 1, durationMinute], [minute, 5, 5 * durationMinute], [minute, 15, 15 * durationMinute], [minute, 30, 30 * durationMinute], [hour, 1, durationHour], [hour, 3, 3 * durationHour], [hour, 6, 6 * durationHour], [hour, 12, 12 * durationHour], [day, 1, durationDay], [day, 2, 2 * durationDay], [week, 1, durationWeek], [month, 1, durationMonth], [month, 3, 3 * durationMonth], [year, 1, durationYear]];

  function tickFormat(date) {
    return (second(date) < date ? formatMillisecond : minute(date) < date ? formatSecond : hour(date) < date ? formatMinute : day(date) < date ? formatHour : month(date) < date ? week(date) < date ? formatDay : formatWeek : year(date) < date ? formatMonth : formatYear)(date);
  }

  function tickInterval(interval, start, stop, step) {
    if (interval == null) interval = 10; // If a desired tick count is specified, pick a reasonable tick interval
    // based on the extent of the domain and a rough estimate of tick size.
    // Otherwise, assume interval is already a time interval and use it.

    if (typeof interval === "number") {
      var target = Math.abs(stop - start) / interval,
          i = (0, _d3Array.bisector)(function (i) {
        return i[2];
      }).right(tickIntervals, target);

      if (i === tickIntervals.length) {
        step = (0, _d3Array.tickStep)(start / durationYear, stop / durationYear, interval);
        interval = year;
      } else if (i) {
        i = tickIntervals[target / tickIntervals[i - 1][2] < tickIntervals[i][2] / target ? i - 1 : i];
        step = i[1];
        interval = i[0];
      } else {
        step = Math.max((0, _d3Array.tickStep)(start, stop, interval), 1);
        interval = millisecond;
      }
    }

    return step == null ? interval : interval.every(step);
  }

  scale.invert = function (y) {
    return new Date(invert(y));
  };

  scale.domain = function (_) {
    return arguments.length ? domain(_array.map.call(_, number)) : domain().map(date);
  };

  scale.ticks = function (interval, step) {
    var d = domain(),
        t0 = d[0],
        t1 = d[d.length - 1],
        r = t1 < t0,
        t;
    if (r) t = t0, t0 = t1, t1 = t;
    t = tickInterval(interval, t0, t1, step);
    t = t ? t.range(t0, t1 + 1) : []; // inclusive stop

    return r ? t.reverse() : t;
  };

  scale.tickFormat = function (count, specifier) {
    return specifier == null ? tickFormat : format(specifier);
  };

  scale.nice = function (interval, step) {
    var d = domain();
    return (interval = tickInterval(interval, d[0], d[d.length - 1], step)) ? domain((0, _nice.default)(d, interval)) : scale;
  };

  scale.copy = function () {
    return (0, _continuous.copy)(scale, calendar(year, month, week, day, hour, minute, second, millisecond, format));
  };

  return scale;
}

function _default() {
  return calendar(_d3Time.timeYear, _d3Time.timeMonth, _d3Time.timeWeek, _d3Time.timeDay, _d3Time.timeHour, _d3Time.timeMinute, _d3Time.timeSecond, _d3Time.timeMillisecond, _d3TimeFormat.timeFormat).domain([new Date(2000, 0, 1), new Date(2000, 0, 2)]);
}
},{"d3-array":"cBuZ","d3-interpolate":"mkGF","d3-time":"F00f","d3-time-format":"+7zs","./array":"lLkj","./continuous":"ZpMB","./nice":"gRJQ"}],"D6Mr":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _time = require("./time");

var _d3TimeFormat = require("d3-time-format");

var _d3Time = require("d3-time");

function _default() {
  return (0, _time.calendar)(_d3Time.utcYear, _d3Time.utcMonth, _d3Time.utcWeek, _d3Time.utcDay, _d3Time.utcHour, _d3Time.utcMinute, _d3Time.utcSecond, _d3Time.utcMillisecond, _d3TimeFormat.utcFormat).domain([Date.UTC(2000, 0, 1), Date.UTC(2000, 0, 2)]);
}
},{"./time":"QHrh","d3-time-format":"+7zs","d3-time":"F00f"}],"O1DZ":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = sequential;

var _linear = require("./linear");

function sequential(interpolator) {
  var x0 = 0,
      x1 = 1,
      k10 = 1,
      clamp = false;

  function scale(x) {
    var t = (x - x0) * k10;
    return interpolator(clamp ? Math.max(0, Math.min(1, t)) : t);
  }

  scale.domain = function (_) {
    return arguments.length ? (x0 = +_[0], x1 = +_[1], k10 = x0 === x1 ? 0 : 1 / (x1 - x0), scale) : [x0, x1];
  };

  scale.clamp = function (_) {
    return arguments.length ? (clamp = !!_, scale) : clamp;
  };

  scale.interpolator = function (_) {
    return arguments.length ? (interpolator = _, scale) : interpolator;
  };

  scale.copy = function () {
    return sequential(interpolator).domain([x0, x1]).clamp(clamp);
  };

  return (0, _linear.linearish)(scale);
}
},{"./linear":"VMtl"}],"shE4":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = diverging;

var _linear = require("./linear");

function diverging(interpolator) {
  var x0 = 0,
      x1 = 0.5,
      x2 = 1,
      k10 = 1,
      k21 = 1,
      clamp = false;

  function scale(x) {
    var t = 0.5 + ((x = +x) - x1) * (x < x1 ? k10 : k21);
    return interpolator(clamp ? Math.max(0, Math.min(1, t)) : t);
  }

  scale.domain = function (_) {
    return arguments.length ? (x0 = +_[0], x1 = +_[1], x2 = +_[2], k10 = x0 === x1 ? 0 : 0.5 / (x1 - x0), k21 = x1 === x2 ? 0 : 0.5 / (x2 - x1), scale) : [x0, x1, x2];
  };

  scale.clamp = function (_) {
    return arguments.length ? (clamp = !!_, scale) : clamp;
  };

  scale.interpolator = function (_) {
    return arguments.length ? (interpolator = _, scale) : interpolator;
  };

  scale.copy = function () {
    return diverging(interpolator).domain([x0, x1, x2]).clamp(clamp);
  };

  return (0, _linear.linearish)(scale);
}
},{"./linear":"VMtl"}],"zt+a":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "scaleBand", {
  enumerable: true,
  get: function () {
    return _band.default;
  }
});
Object.defineProperty(exports, "scalePoint", {
  enumerable: true,
  get: function () {
    return _band.point;
  }
});
Object.defineProperty(exports, "scaleIdentity", {
  enumerable: true,
  get: function () {
    return _identity.default;
  }
});
Object.defineProperty(exports, "scaleLinear", {
  enumerable: true,
  get: function () {
    return _linear.default;
  }
});
Object.defineProperty(exports, "scaleLog", {
  enumerable: true,
  get: function () {
    return _log.default;
  }
});
Object.defineProperty(exports, "scaleOrdinal", {
  enumerable: true,
  get: function () {
    return _ordinal.default;
  }
});
Object.defineProperty(exports, "scaleImplicit", {
  enumerable: true,
  get: function () {
    return _ordinal.implicit;
  }
});
Object.defineProperty(exports, "scalePow", {
  enumerable: true,
  get: function () {
    return _pow.default;
  }
});
Object.defineProperty(exports, "scaleSqrt", {
  enumerable: true,
  get: function () {
    return _pow.sqrt;
  }
});
Object.defineProperty(exports, "scaleQuantile", {
  enumerable: true,
  get: function () {
    return _quantile.default;
  }
});
Object.defineProperty(exports, "scaleQuantize", {
  enumerable: true,
  get: function () {
    return _quantize.default;
  }
});
Object.defineProperty(exports, "scaleThreshold", {
  enumerable: true,
  get: function () {
    return _threshold.default;
  }
});
Object.defineProperty(exports, "scaleTime", {
  enumerable: true,
  get: function () {
    return _time.default;
  }
});
Object.defineProperty(exports, "scaleUtc", {
  enumerable: true,
  get: function () {
    return _utcTime.default;
  }
});
Object.defineProperty(exports, "scaleSequential", {
  enumerable: true,
  get: function () {
    return _sequential.default;
  }
});
Object.defineProperty(exports, "scaleDiverging", {
  enumerable: true,
  get: function () {
    return _diverging.default;
  }
});

var _band = _interopRequireWildcard(require("./band"));

var _identity = _interopRequireDefault(require("./identity"));

var _linear = _interopRequireDefault(require("./linear"));

var _log = _interopRequireDefault(require("./log"));

var _ordinal = _interopRequireWildcard(require("./ordinal"));

var _pow = _interopRequireWildcard(require("./pow"));

var _quantile = _interopRequireDefault(require("./quantile"));

var _quantize = _interopRequireDefault(require("./quantize"));

var _threshold = _interopRequireDefault(require("./threshold"));

var _time = _interopRequireDefault(require("./time"));

var _utcTime = _interopRequireDefault(require("./utcTime"));

var _sequential = _interopRequireDefault(require("./sequential"));

var _diverging = _interopRequireDefault(require("./diverging"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }
},{"./band":"rJZF","./identity":"eP89","./linear":"VMtl","./log":"X3YW","./ordinal":"ELIM","./pow":"/yse","./quantile":"fsZk","./quantize":"8Z2c","./threshold":"odYE","./time":"QHrh","./utcTime":"D6Mr","./sequential":"O1DZ","./diverging":"shE4"}],"e9Ar":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(specifier) {
  var n = specifier.length / 6 | 0,
      colors = new Array(n),
      i = 0;

  while (i < n) colors[i] = "#" + specifier.slice(i * 6, ++i * 6);

  return colors;
}
},{}],"PcKk":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _colors = _interopRequireDefault(require("../colors"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _default = (0, _colors.default)("1f77b4ff7f0e2ca02cd627289467bd8c564be377c27f7f7fbcbd2217becf");

exports.default = _default;
},{"../colors":"e9Ar"}],"2TXT":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _colors = _interopRequireDefault(require("../colors"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _default = (0, _colors.default)("7fc97fbeaed4fdc086ffff99386cb0f0027fbf5b17666666");

exports.default = _default;
},{"../colors":"e9Ar"}],"MCH8":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _colors = _interopRequireDefault(require("../colors"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _default = (0, _colors.default)("1b9e77d95f027570b3e7298a66a61ee6ab02a6761d666666");

exports.default = _default;
},{"../colors":"e9Ar"}],"bH6q":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _colors = _interopRequireDefault(require("../colors"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _default = (0, _colors.default)("a6cee31f78b4b2df8a33a02cfb9a99e31a1cfdbf6fff7f00cab2d66a3d9affff99b15928");

exports.default = _default;
},{"../colors":"e9Ar"}],"2GbC":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _colors = _interopRequireDefault(require("../colors"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _default = (0, _colors.default)("fbb4aeb3cde3ccebc5decbe4fed9a6ffffcce5d8bdfddaecf2f2f2");

exports.default = _default;
},{"../colors":"e9Ar"}],"SQbk":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _colors = _interopRequireDefault(require("../colors"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _default = (0, _colors.default)("b3e2cdfdcdaccbd5e8f4cae4e6f5c9fff2aef1e2cccccccc");

exports.default = _default;
},{"../colors":"e9Ar"}],"/J0n":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _colors = _interopRequireDefault(require("../colors"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _default = (0, _colors.default)("e41a1c377eb84daf4a984ea3ff7f00ffff33a65628f781bf999999");

exports.default = _default;
},{"../colors":"e9Ar"}],"rdh9":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _colors = _interopRequireDefault(require("../colors"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _default = (0, _colors.default)("66c2a5fc8d628da0cbe78ac3a6d854ffd92fe5c494b3b3b3");

exports.default = _default;
},{"../colors":"e9Ar"}],"7/o5":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _colors = _interopRequireDefault(require("../colors"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _default = (0, _colors.default)("8dd3c7ffffb3bebadafb807280b1d3fdb462b3de69fccde5d9d9d9bc80bdccebc5ffed6f");

exports.default = _default;
},{"../colors":"e9Ar"}],"tFWC":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _d3Interpolate = require("d3-interpolate");

function _default(scheme) {
  return (0, _d3Interpolate.interpolateRgbBasis)(scheme[scheme.length - 1]);
}
},{"d3-interpolate":"mkGF"}],"kmpN":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.scheme = void 0;

var _colors = _interopRequireDefault(require("../colors"));

var _ramp = _interopRequireDefault(require("../ramp"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var scheme = new Array(3).concat("d8b365f5f5f55ab4ac", "a6611adfc27d80cdc1018571", "a6611adfc27df5f5f580cdc1018571", "8c510ad8b365f6e8c3c7eae55ab4ac01665e", "8c510ad8b365f6e8c3f5f5f5c7eae55ab4ac01665e", "8c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e", "8c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e", "5430058c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e003c30", "5430058c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e003c30").map(_colors.default);
exports.scheme = scheme;

var _default = (0, _ramp.default)(scheme);

exports.default = _default;
},{"../colors":"e9Ar","../ramp":"tFWC"}],"Hn8a":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.scheme = void 0;

var _colors = _interopRequireDefault(require("../colors"));

var _ramp = _interopRequireDefault(require("../ramp"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var scheme = new Array(3).concat("af8dc3f7f7f77fbf7b", "7b3294c2a5cfa6dba0008837", "7b3294c2a5cff7f7f7a6dba0008837", "762a83af8dc3e7d4e8d9f0d37fbf7b1b7837", "762a83af8dc3e7d4e8f7f7f7d9f0d37fbf7b1b7837", "762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b7837", "762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b7837", "40004b762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b783700441b", "40004b762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b783700441b").map(_colors.default);
exports.scheme = scheme;

var _default = (0, _ramp.default)(scheme);

exports.default = _default;
},{"../colors":"e9Ar","../ramp":"tFWC"}],"cCiT":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.scheme = void 0;

var _colors = _interopRequireDefault(require("../colors"));

var _ramp = _interopRequireDefault(require("../ramp"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var scheme = new Array(3).concat("e9a3c9f7f7f7a1d76a", "d01c8bf1b6dab8e1864dac26", "d01c8bf1b6daf7f7f7b8e1864dac26", "c51b7de9a3c9fde0efe6f5d0a1d76a4d9221", "c51b7de9a3c9fde0eff7f7f7e6f5d0a1d76a4d9221", "c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221", "c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221", "8e0152c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221276419", "8e0152c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221276419").map(_colors.default);
exports.scheme = scheme;

var _default = (0, _ramp.default)(scheme);

exports.default = _default;
},{"../colors":"e9Ar","../ramp":"tFWC"}],"k6z3":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.scheme = void 0;

var _colors = _interopRequireDefault(require("../colors"));

var _ramp = _interopRequireDefault(require("../ramp"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var scheme = new Array(3).concat("998ec3f7f7f7f1a340", "5e3c99b2abd2fdb863e66101", "5e3c99b2abd2f7f7f7fdb863e66101", "542788998ec3d8daebfee0b6f1a340b35806", "542788998ec3d8daebf7f7f7fee0b6f1a340b35806", "5427888073acb2abd2d8daebfee0b6fdb863e08214b35806", "5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b35806", "2d004b5427888073acb2abd2d8daebfee0b6fdb863e08214b358067f3b08", "2d004b5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b358067f3b08").map(_colors.default);
exports.scheme = scheme;

var _default = (0, _ramp.default)(scheme);

exports.default = _default;
},{"../colors":"e9Ar","../ramp":"tFWC"}],"75sN":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.scheme = void 0;

var _colors = _interopRequireDefault(require("../colors"));

var _ramp = _interopRequireDefault(require("../ramp"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var scheme = new Array(3).concat("ef8a62f7f7f767a9cf", "ca0020f4a58292c5de0571b0", "ca0020f4a582f7f7f792c5de0571b0", "b2182bef8a62fddbc7d1e5f067a9cf2166ac", "b2182bef8a62fddbc7f7f7f7d1e5f067a9cf2166ac", "b2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac", "b2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac", "67001fb2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac053061", "67001fb2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac053061").map(_colors.default);
exports.scheme = scheme;

var _default = (0, _ramp.default)(scheme);

exports.default = _default;
},{"../colors":"e9Ar","../ramp":"tFWC"}],"mrMT":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.scheme = void 0;

var _colors = _interopRequireDefault(require("../colors"));

var _ramp = _interopRequireDefault(require("../ramp"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var scheme = new Array(3).concat("ef8a62ffffff999999", "ca0020f4a582bababa404040", "ca0020f4a582ffffffbababa404040", "b2182bef8a62fddbc7e0e0e09999994d4d4d", "b2182bef8a62fddbc7ffffffe0e0e09999994d4d4d", "b2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d", "b2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d", "67001fb2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d1a1a1a", "67001fb2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d1a1a1a").map(_colors.default);
exports.scheme = scheme;

var _default = (0, _ramp.default)(scheme);

exports.default = _default;
},{"../colors":"e9Ar","../ramp":"tFWC"}],"uyGf":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.scheme = void 0;

var _colors = _interopRequireDefault(require("../colors"));

var _ramp = _interopRequireDefault(require("../ramp"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var scheme = new Array(3).concat("fc8d59ffffbf91bfdb", "d7191cfdae61abd9e92c7bb6", "d7191cfdae61ffffbfabd9e92c7bb6", "d73027fc8d59fee090e0f3f891bfdb4575b4", "d73027fc8d59fee090ffffbfe0f3f891bfdb4575b4", "d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4", "d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4", "a50026d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4313695", "a50026d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4313695").map(_colors.default);
exports.scheme = scheme;

var _default = (0, _ramp.default)(scheme);

exports.default = _default;
},{"../colors":"e9Ar","../ramp":"tFWC"}],"Dt8k":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.scheme = void 0;

var _colors = _interopRequireDefault(require("../colors"));

var _ramp = _interopRequireDefault(require("../ramp"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var scheme = new Array(3).concat("fc8d59ffffbf91cf60", "d7191cfdae61a6d96a1a9641", "d7191cfdae61ffffbfa6d96a1a9641", "d73027fc8d59fee08bd9ef8b91cf601a9850", "d73027fc8d59fee08bffffbfd9ef8b91cf601a9850", "d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850", "d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850", "a50026d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850006837", "a50026d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850006837").map(_colors.default);
exports.scheme = scheme;

var _default = (0, _ramp.default)(scheme);

exports.default = _default;
},{"../colors":"e9Ar","../ramp":"tFWC"}],"eSjI":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.scheme = void 0;

var _colors = _interopRequireDefault(require("../colors"));

var _ramp = _interopRequireDefault(require("../ramp"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var scheme = new Array(3).concat("fc8d59ffffbf99d594", "d7191cfdae61abdda42b83ba", "d7191cfdae61ffffbfabdda42b83ba", "d53e4ffc8d59fee08be6f59899d5943288bd", "d53e4ffc8d59fee08bffffbfe6f59899d5943288bd", "d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd", "d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd", "9e0142d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd5e4fa2", "9e0142d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd5e4fa2").map(_colors.default);
exports.scheme = scheme;

var _default = (0, _ramp.default)(scheme);

exports.default = _default;
},{"../colors":"e9Ar","../ramp":"tFWC"}],"L6xI":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.scheme = void 0;

var _colors = _interopRequireDefault(require("../colors"));

var _ramp = _interopRequireDefault(require("../ramp"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var scheme = new Array(3).concat("e5f5f999d8c92ca25f", "edf8fbb2e2e266c2a4238b45", "edf8fbb2e2e266c2a42ca25f006d2c", "edf8fbccece699d8c966c2a42ca25f006d2c", "edf8fbccece699d8c966c2a441ae76238b45005824", "f7fcfde5f5f9ccece699d8c966c2a441ae76238b45005824", "f7fcfde5f5f9ccece699d8c966c2a441ae76238b45006d2c00441b").map(_colors.default);
exports.scheme = scheme;

var _default = (0, _ramp.default)(scheme);

exports.default = _default;
},{"../colors":"e9Ar","../ramp":"tFWC"}],"JRrn":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.scheme = void 0;

var _colors = _interopRequireDefault(require("../colors"));

var _ramp = _interopRequireDefault(require("../ramp"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var scheme = new Array(3).concat("e0ecf49ebcda8856a7", "edf8fbb3cde38c96c688419d", "edf8fbb3cde38c96c68856a7810f7c", "edf8fbbfd3e69ebcda8c96c68856a7810f7c", "edf8fbbfd3e69ebcda8c96c68c6bb188419d6e016b", "f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d6e016b", "f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d810f7c4d004b").map(_colors.default);
exports.scheme = scheme;

var _default = (0, _ramp.default)(scheme);

exports.default = _default;
},{"../colors":"e9Ar","../ramp":"tFWC"}],"j/1f":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.scheme = void 0;

var _colors = _interopRequireDefault(require("../colors"));

var _ramp = _interopRequireDefault(require("../ramp"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var scheme = new Array(3).concat("e0f3dba8ddb543a2ca", "f0f9e8bae4bc7bccc42b8cbe", "f0f9e8bae4bc7bccc443a2ca0868ac", "f0f9e8ccebc5a8ddb57bccc443a2ca0868ac", "f0f9e8ccebc5a8ddb57bccc44eb3d32b8cbe08589e", "f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe08589e", "f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe0868ac084081").map(_colors.default);
exports.scheme = scheme;

var _default = (0, _ramp.default)(scheme);

exports.default = _default;
},{"../colors":"e9Ar","../ramp":"tFWC"}],"nT+z":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.scheme = void 0;

var _colors = _interopRequireDefault(require("../colors"));

var _ramp = _interopRequireDefault(require("../ramp"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var scheme = new Array(3).concat("fee8c8fdbb84e34a33", "fef0d9fdcc8afc8d59d7301f", "fef0d9fdcc8afc8d59e34a33b30000", "fef0d9fdd49efdbb84fc8d59e34a33b30000", "fef0d9fdd49efdbb84fc8d59ef6548d7301f990000", "fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301f990000", "fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301fb300007f0000").map(_colors.default);
exports.scheme = scheme;

var _default = (0, _ramp.default)(scheme);

exports.default = _default;
},{"../colors":"e9Ar","../ramp":"tFWC"}],"3B5M":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.scheme = void 0;

var _colors = _interopRequireDefault(require("../colors"));

var _ramp = _interopRequireDefault(require("../ramp"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var scheme = new Array(3).concat("ece2f0a6bddb1c9099", "f6eff7bdc9e167a9cf02818a", "f6eff7bdc9e167a9cf1c9099016c59", "f6eff7d0d1e6a6bddb67a9cf1c9099016c59", "f6eff7d0d1e6a6bddb67a9cf3690c002818a016450", "fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016450", "fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016c59014636").map(_colors.default);
exports.scheme = scheme;

var _default = (0, _ramp.default)(scheme);

exports.default = _default;
},{"../colors":"e9Ar","../ramp":"tFWC"}],"NAcy":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.scheme = void 0;

var _colors = _interopRequireDefault(require("../colors"));

var _ramp = _interopRequireDefault(require("../ramp"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var scheme = new Array(3).concat("ece7f2a6bddb2b8cbe", "f1eef6bdc9e174a9cf0570b0", "f1eef6bdc9e174a9cf2b8cbe045a8d", "f1eef6d0d1e6a6bddb74a9cf2b8cbe045a8d", "f1eef6d0d1e6a6bddb74a9cf3690c00570b0034e7b", "fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0034e7b", "fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0045a8d023858").map(_colors.default);
exports.scheme = scheme;

var _default = (0, _ramp.default)(scheme);

exports.default = _default;
},{"../colors":"e9Ar","../ramp":"tFWC"}],"DZXx":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.scheme = void 0;

var _colors = _interopRequireDefault(require("../colors"));

var _ramp = _interopRequireDefault(require("../ramp"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var scheme = new Array(3).concat("e7e1efc994c7dd1c77", "f1eef6d7b5d8df65b0ce1256", "f1eef6d7b5d8df65b0dd1c77980043", "f1eef6d4b9dac994c7df65b0dd1c77980043", "f1eef6d4b9dac994c7df65b0e7298ace125691003f", "f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125691003f", "f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125698004367001f").map(_colors.default);
exports.scheme = scheme;

var _default = (0, _ramp.default)(scheme);

exports.default = _default;
},{"../colors":"e9Ar","../ramp":"tFWC"}],"aT++":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.scheme = void 0;

var _colors = _interopRequireDefault(require("../colors"));

var _ramp = _interopRequireDefault(require("../ramp"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var scheme = new Array(3).concat("fde0ddfa9fb5c51b8a", "feebe2fbb4b9f768a1ae017e", "feebe2fbb4b9f768a1c51b8a7a0177", "feebe2fcc5c0fa9fb5f768a1c51b8a7a0177", "feebe2fcc5c0fa9fb5f768a1dd3497ae017e7a0177", "fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a0177", "fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a017749006a").map(_colors.default);
exports.scheme = scheme;

var _default = (0, _ramp.default)(scheme);

exports.default = _default;
},{"../colors":"e9Ar","../ramp":"tFWC"}],"et2z":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.scheme = void 0;

var _colors = _interopRequireDefault(require("../colors"));

var _ramp = _interopRequireDefault(require("../ramp"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var scheme = new Array(3).concat("edf8b17fcdbb2c7fb8", "ffffcca1dab441b6c4225ea8", "ffffcca1dab441b6c42c7fb8253494", "ffffccc7e9b47fcdbb41b6c42c7fb8253494", "ffffccc7e9b47fcdbb41b6c41d91c0225ea80c2c84", "ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea80c2c84", "ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea8253494081d58").map(_colors.default);
exports.scheme = scheme;

var _default = (0, _ramp.default)(scheme);

exports.default = _default;
},{"../colors":"e9Ar","../ramp":"tFWC"}],"lF8J":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.scheme = void 0;

var _colors = _interopRequireDefault(require("../colors"));

var _ramp = _interopRequireDefault(require("../ramp"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var scheme = new Array(3).concat("f7fcb9addd8e31a354", "ffffccc2e69978c679238443", "ffffccc2e69978c67931a354006837", "ffffccd9f0a3addd8e78c67931a354006837", "ffffccd9f0a3addd8e78c67941ab5d238443005a32", "ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443005a32", "ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443006837004529").map(_colors.default);
exports.scheme = scheme;

var _default = (0, _ramp.default)(scheme);

exports.default = _default;
},{"../colors":"e9Ar","../ramp":"tFWC"}],"aI9y":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.scheme = void 0;

var _colors = _interopRequireDefault(require("../colors"));

var _ramp = _interopRequireDefault(require("../ramp"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var scheme = new Array(3).concat("fff7bcfec44fd95f0e", "ffffd4fed98efe9929cc4c02", "ffffd4fed98efe9929d95f0e993404", "ffffd4fee391fec44ffe9929d95f0e993404", "ffffd4fee391fec44ffe9929ec7014cc4c028c2d04", "ffffe5fff7bcfee391fec44ffe9929ec7014cc4c028c2d04", "ffffe5fff7bcfee391fec44ffe9929ec7014cc4c02993404662506").map(_colors.default);
exports.scheme = scheme;

var _default = (0, _ramp.default)(scheme);

exports.default = _default;
},{"../colors":"e9Ar","../ramp":"tFWC"}],"JWLI":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.scheme = void 0;

var _colors = _interopRequireDefault(require("../colors"));

var _ramp = _interopRequireDefault(require("../ramp"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var scheme = new Array(3).concat("ffeda0feb24cf03b20", "ffffb2fecc5cfd8d3ce31a1c", "ffffb2fecc5cfd8d3cf03b20bd0026", "ffffb2fed976feb24cfd8d3cf03b20bd0026", "ffffb2fed976feb24cfd8d3cfc4e2ae31a1cb10026", "ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cb10026", "ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cbd0026800026").map(_colors.default);
exports.scheme = scheme;

var _default = (0, _ramp.default)(scheme);

exports.default = _default;
},{"../colors":"e9Ar","../ramp":"tFWC"}],"b4OA":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.scheme = void 0;

var _colors = _interopRequireDefault(require("../colors"));

var _ramp = _interopRequireDefault(require("../ramp"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var scheme = new Array(3).concat("deebf79ecae13182bd", "eff3ffbdd7e76baed62171b5", "eff3ffbdd7e76baed63182bd08519c", "eff3ffc6dbef9ecae16baed63182bd08519c", "eff3ffc6dbef9ecae16baed64292c62171b5084594", "f7fbffdeebf7c6dbef9ecae16baed64292c62171b5084594", "f7fbffdeebf7c6dbef9ecae16baed64292c62171b508519c08306b").map(_colors.default);
exports.scheme = scheme;

var _default = (0, _ramp.default)(scheme);

exports.default = _default;
},{"../colors":"e9Ar","../ramp":"tFWC"}],"NKRR":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.scheme = void 0;

var _colors = _interopRequireDefault(require("../colors"));

var _ramp = _interopRequireDefault(require("../ramp"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var scheme = new Array(3).concat("e5f5e0a1d99b31a354", "edf8e9bae4b374c476238b45", "edf8e9bae4b374c47631a354006d2c", "edf8e9c7e9c0a1d99b74c47631a354006d2c", "edf8e9c7e9c0a1d99b74c47641ab5d238b45005a32", "f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45005a32", "f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45006d2c00441b").map(_colors.default);
exports.scheme = scheme;

var _default = (0, _ramp.default)(scheme);

exports.default = _default;
},{"../colors":"e9Ar","../ramp":"tFWC"}],"jAVD":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.scheme = void 0;

var _colors = _interopRequireDefault(require("../colors"));

var _ramp = _interopRequireDefault(require("../ramp"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var scheme = new Array(3).concat("f0f0f0bdbdbd636363", "f7f7f7cccccc969696525252", "f7f7f7cccccc969696636363252525", "f7f7f7d9d9d9bdbdbd969696636363252525", "f7f7f7d9d9d9bdbdbd969696737373525252252525", "fffffff0f0f0d9d9d9bdbdbd969696737373525252252525", "fffffff0f0f0d9d9d9bdbdbd969696737373525252252525000000").map(_colors.default);
exports.scheme = scheme;

var _default = (0, _ramp.default)(scheme);

exports.default = _default;
},{"../colors":"e9Ar","../ramp":"tFWC"}],"Emw5":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.scheme = void 0;

var _colors = _interopRequireDefault(require("../colors"));

var _ramp = _interopRequireDefault(require("../ramp"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var scheme = new Array(3).concat("efedf5bcbddc756bb1", "f2f0f7cbc9e29e9ac86a51a3", "f2f0f7cbc9e29e9ac8756bb154278f", "f2f0f7dadaebbcbddc9e9ac8756bb154278f", "f2f0f7dadaebbcbddc9e9ac8807dba6a51a34a1486", "fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a34a1486", "fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a354278f3f007d").map(_colors.default);
exports.scheme = scheme;

var _default = (0, _ramp.default)(scheme);

exports.default = _default;
},{"../colors":"e9Ar","../ramp":"tFWC"}],"wB2L":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.scheme = void 0;

var _colors = _interopRequireDefault(require("../colors"));

var _ramp = _interopRequireDefault(require("../ramp"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var scheme = new Array(3).concat("fee0d2fc9272de2d26", "fee5d9fcae91fb6a4acb181d", "fee5d9fcae91fb6a4ade2d26a50f15", "fee5d9fcbba1fc9272fb6a4ade2d26a50f15", "fee5d9fcbba1fc9272fb6a4aef3b2ccb181d99000d", "fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181d99000d", "fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181da50f1567000d").map(_colors.default);
exports.scheme = scheme;

var _default = (0, _ramp.default)(scheme);

exports.default = _default;
},{"../colors":"e9Ar","../ramp":"tFWC"}],"wV9s":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.scheme = void 0;

var _colors = _interopRequireDefault(require("../colors"));

var _ramp = _interopRequireDefault(require("../ramp"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var scheme = new Array(3).concat("fee6cefdae6be6550d", "feeddefdbe85fd8d3cd94701", "feeddefdbe85fd8d3ce6550da63603", "feeddefdd0a2fdae6bfd8d3ce6550da63603", "feeddefdd0a2fdae6bfd8d3cf16913d948018c2d04", "fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d948018c2d04", "fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d94801a636037f2704").map(_colors.default);
exports.scheme = scheme;

var _default = (0, _ramp.default)(scheme);

exports.default = _default;
},{"../colors":"e9Ar","../ramp":"tFWC"}],"Spoc":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _d3Color = require("d3-color");

var _d3Interpolate = require("d3-interpolate");

var _default = (0, _d3Interpolate.interpolateCubehelixLong)((0, _d3Color.cubehelix)(300, 0.5, 0.0), (0, _d3Color.cubehelix)(-240, 0.5, 1.0));

exports.default = _default;
},{"d3-color":"4TJ2","d3-interpolate":"mkGF"}],"pM5F":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;
exports.cool = exports.warm = void 0;

var _d3Color = require("d3-color");

var _d3Interpolate = require("d3-interpolate");

var warm = (0, _d3Interpolate.interpolateCubehelixLong)((0, _d3Color.cubehelix)(-100, 0.75, 0.35), (0, _d3Color.cubehelix)(80, 1.50, 0.8));
exports.warm = warm;
var cool = (0, _d3Interpolate.interpolateCubehelixLong)((0, _d3Color.cubehelix)(260, 0.75, 0.35), (0, _d3Color.cubehelix)(80, 1.50, 0.8));
exports.cool = cool;
var c = (0, _d3Color.cubehelix)();

function _default(t) {
  if (t < 0 || t > 1) t -= Math.floor(t);
  var ts = Math.abs(t - 0.5);
  c.h = 360 * t - 100;
  c.s = 1.5 - 1.5 * ts;
  c.l = 0.8 - 0.9 * ts;
  return c + "";
}
},{"d3-color":"4TJ2","d3-interpolate":"mkGF"}],"dT4l":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _d3Color = require("d3-color");

var c = (0, _d3Color.rgb)(),
    pi_1_3 = Math.PI / 3,
    pi_2_3 = Math.PI * 2 / 3;

function _default(t) {
  var x;
  t = (0.5 - t) * Math.PI;
  c.r = 255 * (x = Math.sin(t)) * x;
  c.g = 255 * (x = Math.sin(t + pi_1_3)) * x;
  c.b = 255 * (x = Math.sin(t + pi_2_3)) * x;
  return c + "";
}
},{"d3-color":"4TJ2"}],"kmxq":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.plasma = exports.inferno = exports.magma = exports.default = void 0;

var _colors = _interopRequireDefault(require("../colors"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ramp(range) {
  var n = range.length;
  return function (t) {
    return range[Math.max(0, Math.min(n - 1, Math.floor(t * n)))];
  };
}

var _default = ramp((0, _colors.default)("44015444025645045745055946075a46085c460a5d460b5e470d60470e6147106347116447136548146748166848176948186a481a6c481b6d481c6e481d6f481f70482071482173482374482475482576482677482878482979472a7a472c7a472d7b472e7c472f7d46307e46327e46337f463480453581453781453882443983443a83443b84433d84433e85423f854240864241864142874144874045884046883f47883f48893e49893e4a893e4c8a3d4d8a3d4e8a3c4f8a3c508b3b518b3b528b3a538b3a548c39558c39568c38588c38598c375a8c375b8d365c8d365d8d355e8d355f8d34608d34618d33628d33638d32648e32658e31668e31678e31688e30698e306a8e2f6b8e2f6c8e2e6d8e2e6e8e2e6f8e2d708e2d718e2c718e2c728e2c738e2b748e2b758e2a768e2a778e2a788e29798e297a8e297b8e287c8e287d8e277e8e277f8e27808e26818e26828e26828e25838e25848e25858e24868e24878e23888e23898e238a8d228b8d228c8d228d8d218e8d218f8d21908d21918c20928c20928c20938c1f948c1f958b1f968b1f978b1f988b1f998a1f9a8a1e9b8a1e9c891e9d891f9e891f9f881fa0881fa1881fa1871fa28720a38620a48621a58521a68522a78522a88423a98324aa8325ab8225ac8226ad8127ad8128ae8029af7f2ab07f2cb17e2db27d2eb37c2fb47c31b57b32b67a34b67935b77937b87838b9773aba763bbb753dbc743fbc7340bd7242be7144bf7046c06f48c16e4ac16d4cc26c4ec36b50c46a52c56954c56856c66758c7655ac8645cc8635ec96260ca6063cb5f65cb5e67cc5c69cd5b6ccd5a6ece5870cf5773d05675d05477d1537ad1517cd2507fd34e81d34d84d44b86d54989d5488bd6468ed64590d74393d74195d84098d83e9bd93c9dd93ba0da39a2da37a5db36a8db34aadc32addc30b0dd2fb2dd2db5de2bb8de29bade28bddf26c0df25c2df23c5e021c8e020cae11fcde11dd0e11cd2e21bd5e21ad8e219dae319dde318dfe318e2e418e5e419e7e419eae51aece51befe51cf1e51df4e61ef6e620f8e621fbe723fde725"));

exports.default = _default;
var magma = ramp((0, _colors.default)("00000401000501010601010802010902020b02020d03030f03031204041405041606051806051a07061c08071e0907200a08220b09240c09260d0a290e0b2b100b2d110c2f120d31130d34140e36150e38160f3b180f3d19103f1a10421c10441d11471e114920114b21114e22115024125325125527125829115a2a115c2c115f2d11612f116331116533106734106936106b38106c390f6e3b0f703d0f713f0f72400f74420f75440f764510774710784910784a10794c117a4e117b4f127b51127c52137c54137d56147d57157e59157e5a167e5c167f5d177f5f187f601880621980641a80651a80671b80681c816a1c816b1d816d1d816e1e81701f81721f817320817521817621817822817922827b23827c23827e24828025828125818326818426818627818827818928818b29818c29818e2a81902a81912b81932b80942c80962c80982d80992d809b2e7f9c2e7f9e2f7fa02f7fa1307ea3307ea5317ea6317da8327daa337dab337cad347cae347bb0357bb2357bb3367ab5367ab73779b83779ba3878bc3978bd3977bf3a77c03a76c23b75c43c75c53c74c73d73c83e73ca3e72cc3f71cd4071cf4070d0416fd2426fd3436ed5446dd6456cd8456cd9466bdb476adc4869de4968df4a68e04c67e24d66e34e65e44f64e55064e75263e85362e95462ea5661eb5760ec5860ed5a5fee5b5eef5d5ef05f5ef1605df2625df2645cf3655cf4675cf4695cf56b5cf66c5cf66e5cf7705cf7725cf8745cf8765cf9785df9795df97b5dfa7d5efa7f5efa815ffb835ffb8560fb8761fc8961fc8a62fc8c63fc8e64fc9065fd9266fd9467fd9668fd9869fd9a6afd9b6bfe9d6cfe9f6dfea16efea36ffea571fea772fea973feaa74feac76feae77feb078feb27afeb47bfeb67cfeb77efeb97ffebb81febd82febf84fec185fec287fec488fec68afec88cfeca8dfecc8ffecd90fecf92fed194fed395fed597fed799fed89afdda9cfddc9efddea0fde0a1fde2a3fde3a5fde5a7fde7a9fde9aafdebacfcecaefceeb0fcf0b2fcf2b4fcf4b6fcf6b8fcf7b9fcf9bbfcfbbdfcfdbf"));
exports.magma = magma;
var inferno = ramp((0, _colors.default)("00000401000501010601010802010a02020c02020e03021004031204031405041706041907051b08051d09061f0a07220b07240c08260d08290e092b10092d110a30120a32140b34150b37160b39180c3c190c3e1b0c411c0c431e0c451f0c48210c4a230c4c240c4f260c51280b53290b552b0b572d0b592f0a5b310a5c320a5e340a5f3609613809623909633b09643d09653e0966400a67420a68440a68450a69470b6a490b6a4a0c6b4c0c6b4d0d6c4f0d6c510e6c520e6d540f6d550f6d57106e59106e5a116e5c126e5d126e5f136e61136e62146e64156e65156e67166e69166e6a176e6c186e6d186e6f196e71196e721a6e741a6e751b6e771c6d781c6d7a1d6d7c1d6d7d1e6d7f1e6c801f6c82206c84206b85216b87216b88226a8a226a8c23698d23698f24699025689225689326679526679727669827669a28659b29649d29649f2a63a02a63a22b62a32c61a52c60a62d60a82e5fa92e5eab2f5ead305dae305cb0315bb1325ab3325ab43359b63458b73557b93556ba3655bc3754bd3853bf3952c03a51c13a50c33b4fc43c4ec63d4dc73e4cc83f4bca404acb4149cc4248ce4347cf4446d04545d24644d34743d44842d54a41d74b3fd84c3ed94d3dda4e3cdb503bdd513ade5238df5337e05536e15635e25734e35933e45a31e55c30e65d2fe75e2ee8602de9612bea632aeb6429eb6628ec6726ed6925ee6a24ef6c23ef6e21f06f20f1711ff1731df2741cf3761bf37819f47918f57b17f57d15f67e14f68013f78212f78410f8850ff8870ef8890cf98b0bf98c0af98e09fa9008fa9207fa9407fb9606fb9706fb9906fb9b06fb9d07fc9f07fca108fca309fca50afca60cfca80dfcaa0ffcac11fcae12fcb014fcb216fcb418fbb61afbb81dfbba1ffbbc21fbbe23fac026fac228fac42afac62df9c72ff9c932f9cb35f8cd37f8cf3af7d13df7d340f6d543f6d746f5d949f5db4cf4dd4ff4df53f4e156f3e35af3e55df2e661f2e865f2ea69f1ec6df1ed71f1ef75f1f179f2f27df2f482f3f586f3f68af4f88ef5f992f6fa96f8fb9af9fc9dfafda1fcffa4"));
exports.inferno = inferno;
var plasma = ramp((0, _colors.default)("0d088710078813078916078a19068c1b068d1d068e20068f2206902406912605912805922a05932c05942e05952f059631059733059735049837049938049a3a049a3c049b3e049c3f049c41049d43039e44039e46039f48039f4903a04b03a14c02a14e02a25002a25102a35302a35502a45601a45801a45901a55b01a55c01a65e01a66001a66100a76300a76400a76600a76700a86900a86a00a86c00a86e00a86f00a87100a87201a87401a87501a87701a87801a87a02a87b02a87d03a87e03a88004a88104a78305a78405a78606a68707a68808a68a09a58b0aa58d0ba58e0ca48f0da4910ea3920fa39410a29511a19613a19814a099159f9a169f9c179e9d189d9e199da01a9ca11b9ba21d9aa31e9aa51f99a62098a72197a82296aa2395ab2494ac2694ad2793ae2892b02991b12a90b22b8fb32c8eb42e8db52f8cb6308bb7318ab83289ba3388bb3488bc3587bd3786be3885bf3984c03a83c13b82c23c81c33d80c43e7fc5407ec6417dc7427cc8437bc9447aca457acb4679cc4778cc4977cd4a76ce4b75cf4c74d04d73d14e72d24f71d35171d45270d5536fd5546ed6556dd7566cd8576bd9586ada5a6ada5b69db5c68dc5d67dd5e66de5f65de6164df6263e06363e16462e26561e26660e3685fe4695ee56a5de56b5de66c5ce76e5be76f5ae87059e97158e97257ea7457eb7556eb7655ec7754ed7953ed7a52ee7b51ef7c51ef7e50f07f4ff0804ef1814df1834cf2844bf3854bf3874af48849f48948f58b47f58c46f68d45f68f44f79044f79143f79342f89441f89540f9973ff9983ef99a3efa9b3dfa9c3cfa9e3bfb9f3afba139fba238fca338fca537fca636fca835fca934fdab33fdac33fdae32fdaf31fdb130fdb22ffdb42ffdb52efeb72dfeb82cfeba2cfebb2bfebd2afebe2afec029fdc229fdc328fdc527fdc627fdc827fdca26fdcb26fccd25fcce25fcd025fcd225fbd324fbd524fbd724fad824fada24f9dc24f9dd25f8df25f8e125f7e225f7e425f6e626f6e826f5e926f5eb27f4ed27f3ee27f3f027f2f227f1f426f1f525f0f724f0f921"));
exports.plasma = plasma;
},{"../colors":"e9Ar"}],"zd6o":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "schemeCategory10", {
  enumerable: true,
  get: function () {
    return _category.default;
  }
});
Object.defineProperty(exports, "schemeAccent", {
  enumerable: true,
  get: function () {
    return _Accent.default;
  }
});
Object.defineProperty(exports, "schemeDark2", {
  enumerable: true,
  get: function () {
    return _Dark.default;
  }
});
Object.defineProperty(exports, "schemePaired", {
  enumerable: true,
  get: function () {
    return _Paired.default;
  }
});
Object.defineProperty(exports, "schemePastel1", {
  enumerable: true,
  get: function () {
    return _Pastel.default;
  }
});
Object.defineProperty(exports, "schemePastel2", {
  enumerable: true,
  get: function () {
    return _Pastel2.default;
  }
});
Object.defineProperty(exports, "schemeSet1", {
  enumerable: true,
  get: function () {
    return _Set.default;
  }
});
Object.defineProperty(exports, "schemeSet2", {
  enumerable: true,
  get: function () {
    return _Set2.default;
  }
});
Object.defineProperty(exports, "schemeSet3", {
  enumerable: true,
  get: function () {
    return _Set3.default;
  }
});
Object.defineProperty(exports, "interpolateBrBG", {
  enumerable: true,
  get: function () {
    return _BrBG.default;
  }
});
Object.defineProperty(exports, "schemeBrBG", {
  enumerable: true,
  get: function () {
    return _BrBG.scheme;
  }
});
Object.defineProperty(exports, "interpolatePRGn", {
  enumerable: true,
  get: function () {
    return _PRGn.default;
  }
});
Object.defineProperty(exports, "schemePRGn", {
  enumerable: true,
  get: function () {
    return _PRGn.scheme;
  }
});
Object.defineProperty(exports, "interpolatePiYG", {
  enumerable: true,
  get: function () {
    return _PiYG.default;
  }
});
Object.defineProperty(exports, "schemePiYG", {
  enumerable: true,
  get: function () {
    return _PiYG.scheme;
  }
});
Object.defineProperty(exports, "interpolatePuOr", {
  enumerable: true,
  get: function () {
    return _PuOr.default;
  }
});
Object.defineProperty(exports, "schemePuOr", {
  enumerable: true,
  get: function () {
    return _PuOr.scheme;
  }
});
Object.defineProperty(exports, "interpolateRdBu", {
  enumerable: true,
  get: function () {
    return _RdBu.default;
  }
});
Object.defineProperty(exports, "schemeRdBu", {
  enumerable: true,
  get: function () {
    return _RdBu.scheme;
  }
});
Object.defineProperty(exports, "interpolateRdGy", {
  enumerable: true,
  get: function () {
    return _RdGy.default;
  }
});
Object.defineProperty(exports, "schemeRdGy", {
  enumerable: true,
  get: function () {
    return _RdGy.scheme;
  }
});
Object.defineProperty(exports, "interpolateRdYlBu", {
  enumerable: true,
  get: function () {
    return _RdYlBu.default;
  }
});
Object.defineProperty(exports, "schemeRdYlBu", {
  enumerable: true,
  get: function () {
    return _RdYlBu.scheme;
  }
});
Object.defineProperty(exports, "interpolateRdYlGn", {
  enumerable: true,
  get: function () {
    return _RdYlGn.default;
  }
});
Object.defineProperty(exports, "schemeRdYlGn", {
  enumerable: true,
  get: function () {
    return _RdYlGn.scheme;
  }
});
Object.defineProperty(exports, "interpolateSpectral", {
  enumerable: true,
  get: function () {
    return _Spectral.default;
  }
});
Object.defineProperty(exports, "schemeSpectral", {
  enumerable: true,
  get: function () {
    return _Spectral.scheme;
  }
});
Object.defineProperty(exports, "interpolateBuGn", {
  enumerable: true,
  get: function () {
    return _BuGn.default;
  }
});
Object.defineProperty(exports, "schemeBuGn", {
  enumerable: true,
  get: function () {
    return _BuGn.scheme;
  }
});
Object.defineProperty(exports, "interpolateBuPu", {
  enumerable: true,
  get: function () {
    return _BuPu.default;
  }
});
Object.defineProperty(exports, "schemeBuPu", {
  enumerable: true,
  get: function () {
    return _BuPu.scheme;
  }
});
Object.defineProperty(exports, "interpolateGnBu", {
  enumerable: true,
  get: function () {
    return _GnBu.default;
  }
});
Object.defineProperty(exports, "schemeGnBu", {
  enumerable: true,
  get: function () {
    return _GnBu.scheme;
  }
});
Object.defineProperty(exports, "interpolateOrRd", {
  enumerable: true,
  get: function () {
    return _OrRd.default;
  }
});
Object.defineProperty(exports, "schemeOrRd", {
  enumerable: true,
  get: function () {
    return _OrRd.scheme;
  }
});
Object.defineProperty(exports, "interpolatePuBuGn", {
  enumerable: true,
  get: function () {
    return _PuBuGn.default;
  }
});
Object.defineProperty(exports, "schemePuBuGn", {
  enumerable: true,
  get: function () {
    return _PuBuGn.scheme;
  }
});
Object.defineProperty(exports, "interpolatePuBu", {
  enumerable: true,
  get: function () {
    return _PuBu.default;
  }
});
Object.defineProperty(exports, "schemePuBu", {
  enumerable: true,
  get: function () {
    return _PuBu.scheme;
  }
});
Object.defineProperty(exports, "interpolatePuRd", {
  enumerable: true,
  get: function () {
    return _PuRd.default;
  }
});
Object.defineProperty(exports, "schemePuRd", {
  enumerable: true,
  get: function () {
    return _PuRd.scheme;
  }
});
Object.defineProperty(exports, "interpolateRdPu", {
  enumerable: true,
  get: function () {
    return _RdPu.default;
  }
});
Object.defineProperty(exports, "schemeRdPu", {
  enumerable: true,
  get: function () {
    return _RdPu.scheme;
  }
});
Object.defineProperty(exports, "interpolateYlGnBu", {
  enumerable: true,
  get: function () {
    return _YlGnBu.default;
  }
});
Object.defineProperty(exports, "schemeYlGnBu", {
  enumerable: true,
  get: function () {
    return _YlGnBu.scheme;
  }
});
Object.defineProperty(exports, "interpolateYlGn", {
  enumerable: true,
  get: function () {
    return _YlGn.default;
  }
});
Object.defineProperty(exports, "schemeYlGn", {
  enumerable: true,
  get: function () {
    return _YlGn.scheme;
  }
});
Object.defineProperty(exports, "interpolateYlOrBr", {
  enumerable: true,
  get: function () {
    return _YlOrBr.default;
  }
});
Object.defineProperty(exports, "schemeYlOrBr", {
  enumerable: true,
  get: function () {
    return _YlOrBr.scheme;
  }
});
Object.defineProperty(exports, "interpolateYlOrRd", {
  enumerable: true,
  get: function () {
    return _YlOrRd.default;
  }
});
Object.defineProperty(exports, "schemeYlOrRd", {
  enumerable: true,
  get: function () {
    return _YlOrRd.scheme;
  }
});
Object.defineProperty(exports, "interpolateBlues", {
  enumerable: true,
  get: function () {
    return _Blues.default;
  }
});
Object.defineProperty(exports, "schemeBlues", {
  enumerable: true,
  get: function () {
    return _Blues.scheme;
  }
});
Object.defineProperty(exports, "interpolateGreens", {
  enumerable: true,
  get: function () {
    return _Greens.default;
  }
});
Object.defineProperty(exports, "schemeGreens", {
  enumerable: true,
  get: function () {
    return _Greens.scheme;
  }
});
Object.defineProperty(exports, "interpolateGreys", {
  enumerable: true,
  get: function () {
    return _Greys.default;
  }
});
Object.defineProperty(exports, "schemeGreys", {
  enumerable: true,
  get: function () {
    return _Greys.scheme;
  }
});
Object.defineProperty(exports, "interpolatePurples", {
  enumerable: true,
  get: function () {
    return _Purples.default;
  }
});
Object.defineProperty(exports, "schemePurples", {
  enumerable: true,
  get: function () {
    return _Purples.scheme;
  }
});
Object.defineProperty(exports, "interpolateReds", {
  enumerable: true,
  get: function () {
    return _Reds.default;
  }
});
Object.defineProperty(exports, "schemeReds", {
  enumerable: true,
  get: function () {
    return _Reds.scheme;
  }
});
Object.defineProperty(exports, "interpolateOranges", {
  enumerable: true,
  get: function () {
    return _Oranges.default;
  }
});
Object.defineProperty(exports, "schemeOranges", {
  enumerable: true,
  get: function () {
    return _Oranges.scheme;
  }
});
Object.defineProperty(exports, "interpolateCubehelixDefault", {
  enumerable: true,
  get: function () {
    return _cubehelix.default;
  }
});
Object.defineProperty(exports, "interpolateRainbow", {
  enumerable: true,
  get: function () {
    return _rainbow.default;
  }
});
Object.defineProperty(exports, "interpolateWarm", {
  enumerable: true,
  get: function () {
    return _rainbow.warm;
  }
});
Object.defineProperty(exports, "interpolateCool", {
  enumerable: true,
  get: function () {
    return _rainbow.cool;
  }
});
Object.defineProperty(exports, "interpolateSinebow", {
  enumerable: true,
  get: function () {
    return _sinebow.default;
  }
});
Object.defineProperty(exports, "interpolateViridis", {
  enumerable: true,
  get: function () {
    return _viridis.default;
  }
});
Object.defineProperty(exports, "interpolateMagma", {
  enumerable: true,
  get: function () {
    return _viridis.magma;
  }
});
Object.defineProperty(exports, "interpolateInferno", {
  enumerable: true,
  get: function () {
    return _viridis.inferno;
  }
});
Object.defineProperty(exports, "interpolatePlasma", {
  enumerable: true,
  get: function () {
    return _viridis.plasma;
  }
});

var _category = _interopRequireDefault(require("./categorical/category10"));

var _Accent = _interopRequireDefault(require("./categorical/Accent"));

var _Dark = _interopRequireDefault(require("./categorical/Dark2"));

var _Paired = _interopRequireDefault(require("./categorical/Paired"));

var _Pastel = _interopRequireDefault(require("./categorical/Pastel1"));

var _Pastel2 = _interopRequireDefault(require("./categorical/Pastel2"));

var _Set = _interopRequireDefault(require("./categorical/Set1"));

var _Set2 = _interopRequireDefault(require("./categorical/Set2"));

var _Set3 = _interopRequireDefault(require("./categorical/Set3"));

var _BrBG = _interopRequireWildcard(require("./diverging/BrBG"));

var _PRGn = _interopRequireWildcard(require("./diverging/PRGn"));

var _PiYG = _interopRequireWildcard(require("./diverging/PiYG"));

var _PuOr = _interopRequireWildcard(require("./diverging/PuOr"));

var _RdBu = _interopRequireWildcard(require("./diverging/RdBu"));

var _RdGy = _interopRequireWildcard(require("./diverging/RdGy"));

var _RdYlBu = _interopRequireWildcard(require("./diverging/RdYlBu"));

var _RdYlGn = _interopRequireWildcard(require("./diverging/RdYlGn"));

var _Spectral = _interopRequireWildcard(require("./diverging/Spectral"));

var _BuGn = _interopRequireWildcard(require("./sequential-multi/BuGn"));

var _BuPu = _interopRequireWildcard(require("./sequential-multi/BuPu"));

var _GnBu = _interopRequireWildcard(require("./sequential-multi/GnBu"));

var _OrRd = _interopRequireWildcard(require("./sequential-multi/OrRd"));

var _PuBuGn = _interopRequireWildcard(require("./sequential-multi/PuBuGn"));

var _PuBu = _interopRequireWildcard(require("./sequential-multi/PuBu"));

var _PuRd = _interopRequireWildcard(require("./sequential-multi/PuRd"));

var _RdPu = _interopRequireWildcard(require("./sequential-multi/RdPu"));

var _YlGnBu = _interopRequireWildcard(require("./sequential-multi/YlGnBu"));

var _YlGn = _interopRequireWildcard(require("./sequential-multi/YlGn"));

var _YlOrBr = _interopRequireWildcard(require("./sequential-multi/YlOrBr"));

var _YlOrRd = _interopRequireWildcard(require("./sequential-multi/YlOrRd"));

var _Blues = _interopRequireWildcard(require("./sequential-single/Blues"));

var _Greens = _interopRequireWildcard(require("./sequential-single/Greens"));

var _Greys = _interopRequireWildcard(require("./sequential-single/Greys"));

var _Purples = _interopRequireWildcard(require("./sequential-single/Purples"));

var _Reds = _interopRequireWildcard(require("./sequential-single/Reds"));

var _Oranges = _interopRequireWildcard(require("./sequential-single/Oranges"));

var _cubehelix = _interopRequireDefault(require("./sequential-multi/cubehelix"));

var _rainbow = _interopRequireWildcard(require("./sequential-multi/rainbow"));

var _sinebow = _interopRequireDefault(require("./sequential-multi/sinebow"));

var _viridis = _interopRequireWildcard(require("./sequential-multi/viridis"));

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
},{"./categorical/category10":"PcKk","./categorical/Accent":"2TXT","./categorical/Dark2":"MCH8","./categorical/Paired":"bH6q","./categorical/Pastel1":"2GbC","./categorical/Pastel2":"SQbk","./categorical/Set1":"/J0n","./categorical/Set2":"rdh9","./categorical/Set3":"7/o5","./diverging/BrBG":"kmpN","./diverging/PRGn":"Hn8a","./diverging/PiYG":"cCiT","./diverging/PuOr":"k6z3","./diverging/RdBu":"75sN","./diverging/RdGy":"mrMT","./diverging/RdYlBu":"uyGf","./diverging/RdYlGn":"Dt8k","./diverging/Spectral":"eSjI","./sequential-multi/BuGn":"L6xI","./sequential-multi/BuPu":"JRrn","./sequential-multi/GnBu":"j/1f","./sequential-multi/OrRd":"nT+z","./sequential-multi/PuBuGn":"3B5M","./sequential-multi/PuBu":"NAcy","./sequential-multi/PuRd":"DZXx","./sequential-multi/RdPu":"aT++","./sequential-multi/YlGnBu":"et2z","./sequential-multi/YlGn":"lF8J","./sequential-multi/YlOrBr":"aI9y","./sequential-multi/YlOrRd":"JWLI","./sequential-single/Blues":"b4OA","./sequential-single/Greens":"NKRR","./sequential-single/Greys":"jAVD","./sequential-single/Purples":"Emw5","./sequential-single/Reds":"wB2L","./sequential-single/Oranges":"wV9s","./sequential-multi/cubehelix":"Spoc","./sequential-multi/rainbow":"pM5F","./sequential-multi/sinebow":"dT4l","./sequential-multi/viridis":"kmxq"}],"D3Ln":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(x) {
  return function constant() {
    return x;
  };
}
},{}],"9R8v":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.acos = acos;
exports.asin = asin;
exports.tau = exports.halfPi = exports.pi = exports.epsilon = exports.sqrt = exports.sin = exports.min = exports.max = exports.cos = exports.atan2 = exports.abs = void 0;
var abs = Math.abs;
exports.abs = abs;
var atan2 = Math.atan2;
exports.atan2 = atan2;
var cos = Math.cos;
exports.cos = cos;
var max = Math.max;
exports.max = max;
var min = Math.min;
exports.min = min;
var sin = Math.sin;
exports.sin = sin;
var sqrt = Math.sqrt;
exports.sqrt = sqrt;
var epsilon = 1e-12;
exports.epsilon = epsilon;
var pi = Math.PI;
exports.pi = pi;
var halfPi = pi / 2;
exports.halfPi = halfPi;
var tau = 2 * pi;
exports.tau = tau;

function acos(x) {
  return x > 1 ? 0 : x < -1 ? pi : Math.acos(x);
}

function asin(x) {
  return x >= 1 ? halfPi : x <= -1 ? -halfPi : Math.asin(x);
}
},{}],"TV07":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _d3Path = require("d3-path");

var _constant = _interopRequireDefault(require("./constant"));

var _math = require("./math");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function arcInnerRadius(d) {
  return d.innerRadius;
}

function arcOuterRadius(d) {
  return d.outerRadius;
}

function arcStartAngle(d) {
  return d.startAngle;
}

function arcEndAngle(d) {
  return d.endAngle;
}

function arcPadAngle(d) {
  return d && d.padAngle; // Note: optional!
}

function intersect(x0, y0, x1, y1, x2, y2, x3, y3) {
  var x10 = x1 - x0,
      y10 = y1 - y0,
      x32 = x3 - x2,
      y32 = y3 - y2,
      t = (x32 * (y0 - y2) - y32 * (x0 - x2)) / (y32 * x10 - x32 * y10);
  return [x0 + t * x10, y0 + t * y10];
} // Compute perpendicular offset line of length rc.
// http://mathworld.wolfram.com/Circle-LineIntersection.html


function cornerTangents(x0, y0, x1, y1, r1, rc, cw) {
  var x01 = x0 - x1,
      y01 = y0 - y1,
      lo = (cw ? rc : -rc) / (0, _math.sqrt)(x01 * x01 + y01 * y01),
      ox = lo * y01,
      oy = -lo * x01,
      x11 = x0 + ox,
      y11 = y0 + oy,
      x10 = x1 + ox,
      y10 = y1 + oy,
      x00 = (x11 + x10) / 2,
      y00 = (y11 + y10) / 2,
      dx = x10 - x11,
      dy = y10 - y11,
      d2 = dx * dx + dy * dy,
      r = r1 - rc,
      D = x11 * y10 - x10 * y11,
      d = (dy < 0 ? -1 : 1) * (0, _math.sqrt)((0, _math.max)(0, r * r * d2 - D * D)),
      cx0 = (D * dy - dx * d) / d2,
      cy0 = (-D * dx - dy * d) / d2,
      cx1 = (D * dy + dx * d) / d2,
      cy1 = (-D * dx + dy * d) / d2,
      dx0 = cx0 - x00,
      dy0 = cy0 - y00,
      dx1 = cx1 - x00,
      dy1 = cy1 - y00; // Pick the closer of the two intersection points.
  // TODO Is there a faster way to determine which intersection to use?

  if (dx0 * dx0 + dy0 * dy0 > dx1 * dx1 + dy1 * dy1) cx0 = cx1, cy0 = cy1;
  return {
    cx: cx0,
    cy: cy0,
    x01: -ox,
    y01: -oy,
    x11: cx0 * (r1 / r - 1),
    y11: cy0 * (r1 / r - 1)
  };
}

function _default() {
  var innerRadius = arcInnerRadius,
      outerRadius = arcOuterRadius,
      cornerRadius = (0, _constant.default)(0),
      padRadius = null,
      startAngle = arcStartAngle,
      endAngle = arcEndAngle,
      padAngle = arcPadAngle,
      context = null;

  function arc() {
    var buffer,
        r,
        r0 = +innerRadius.apply(this, arguments),
        r1 = +outerRadius.apply(this, arguments),
        a0 = startAngle.apply(this, arguments) - _math.halfPi,
        a1 = endAngle.apply(this, arguments) - _math.halfPi,
        da = (0, _math.abs)(a1 - a0),
        cw = a1 > a0;

    if (!context) context = buffer = (0, _d3Path.path)(); // Ensure that the outer radius is always larger than the inner radius.

    if (r1 < r0) r = r1, r1 = r0, r0 = r; // Is it a point?

    if (!(r1 > _math.epsilon)) context.moveTo(0, 0); // Or is it a circle or annulus?
    else if (da > _math.tau - _math.epsilon) {
        context.moveTo(r1 * (0, _math.cos)(a0), r1 * (0, _math.sin)(a0));
        context.arc(0, 0, r1, a0, a1, !cw);

        if (r0 > _math.epsilon) {
          context.moveTo(r0 * (0, _math.cos)(a1), r0 * (0, _math.sin)(a1));
          context.arc(0, 0, r0, a1, a0, cw);
        }
      } // Or is it a circular or annular sector?
      else {
          var a01 = a0,
              a11 = a1,
              a00 = a0,
              a10 = a1,
              da0 = da,
              da1 = da,
              ap = padAngle.apply(this, arguments) / 2,
              rp = ap > _math.epsilon && (padRadius ? +padRadius.apply(this, arguments) : (0, _math.sqrt)(r0 * r0 + r1 * r1)),
              rc = (0, _math.min)((0, _math.abs)(r1 - r0) / 2, +cornerRadius.apply(this, arguments)),
              rc0 = rc,
              rc1 = rc,
              t0,
              t1; // Apply padding? Note that since r1 ≥ r0, da1 ≥ da0.

          if (rp > _math.epsilon) {
            var p0 = (0, _math.asin)(rp / r0 * (0, _math.sin)(ap)),
                p1 = (0, _math.asin)(rp / r1 * (0, _math.sin)(ap));
            if ((da0 -= p0 * 2) > _math.epsilon) p0 *= cw ? 1 : -1, a00 += p0, a10 -= p0;else da0 = 0, a00 = a10 = (a0 + a1) / 2;
            if ((da1 -= p1 * 2) > _math.epsilon) p1 *= cw ? 1 : -1, a01 += p1, a11 -= p1;else da1 = 0, a01 = a11 = (a0 + a1) / 2;
          }

          var x01 = r1 * (0, _math.cos)(a01),
              y01 = r1 * (0, _math.sin)(a01),
              x10 = r0 * (0, _math.cos)(a10),
              y10 = r0 * (0, _math.sin)(a10); // Apply rounded corners?

          if (rc > _math.epsilon) {
            var x11 = r1 * (0, _math.cos)(a11),
                y11 = r1 * (0, _math.sin)(a11),
                x00 = r0 * (0, _math.cos)(a00),
                y00 = r0 * (0, _math.sin)(a00); // Restrict the corner radius according to the sector angle.

            if (da < _math.pi) {
              var oc = da0 > _math.epsilon ? intersect(x01, y01, x00, y00, x11, y11, x10, y10) : [x10, y10],
                  ax = x01 - oc[0],
                  ay = y01 - oc[1],
                  bx = x11 - oc[0],
                  by = y11 - oc[1],
                  kc = 1 / (0, _math.sin)((0, _math.acos)((ax * bx + ay * by) / ((0, _math.sqrt)(ax * ax + ay * ay) * (0, _math.sqrt)(bx * bx + by * by))) / 2),
                  lc = (0, _math.sqrt)(oc[0] * oc[0] + oc[1] * oc[1]);
              rc0 = (0, _math.min)(rc, (r0 - lc) / (kc - 1));
              rc1 = (0, _math.min)(rc, (r1 - lc) / (kc + 1));
            }
          } // Is the sector collapsed to a line?


          if (!(da1 > _math.epsilon)) context.moveTo(x01, y01); // Does the sector’s outer ring have rounded corners?
          else if (rc1 > _math.epsilon) {
              t0 = cornerTangents(x00, y00, x01, y01, r1, rc1, cw);
              t1 = cornerTangents(x11, y11, x10, y10, r1, rc1, cw);
              context.moveTo(t0.cx + t0.x01, t0.cy + t0.y01); // Have the corners merged?

              if (rc1 < rc) context.arc(t0.cx, t0.cy, rc1, (0, _math.atan2)(t0.y01, t0.x01), (0, _math.atan2)(t1.y01, t1.x01), !cw); // Otherwise, draw the two corners and the ring.
              else {
                  context.arc(t0.cx, t0.cy, rc1, (0, _math.atan2)(t0.y01, t0.x01), (0, _math.atan2)(t0.y11, t0.x11), !cw);
                  context.arc(0, 0, r1, (0, _math.atan2)(t0.cy + t0.y11, t0.cx + t0.x11), (0, _math.atan2)(t1.cy + t1.y11, t1.cx + t1.x11), !cw);
                  context.arc(t1.cx, t1.cy, rc1, (0, _math.atan2)(t1.y11, t1.x11), (0, _math.atan2)(t1.y01, t1.x01), !cw);
                }
            } // Or is the outer ring just a circular arc?
            else context.moveTo(x01, y01), context.arc(0, 0, r1, a01, a11, !cw); // Is there no inner ring, and it’s a circular sector?
          // Or perhaps it’s an annular sector collapsed due to padding?

          if (!(r0 > _math.epsilon) || !(da0 > _math.epsilon)) context.lineTo(x10, y10); // Does the sector’s inner ring (or point) have rounded corners?
          else if (rc0 > _math.epsilon) {
              t0 = cornerTangents(x10, y10, x11, y11, r0, -rc0, cw);
              t1 = cornerTangents(x01, y01, x00, y00, r0, -rc0, cw);
              context.lineTo(t0.cx + t0.x01, t0.cy + t0.y01); // Have the corners merged?

              if (rc0 < rc) context.arc(t0.cx, t0.cy, rc0, (0, _math.atan2)(t0.y01, t0.x01), (0, _math.atan2)(t1.y01, t1.x01), !cw); // Otherwise, draw the two corners and the ring.
              else {
                  context.arc(t0.cx, t0.cy, rc0, (0, _math.atan2)(t0.y01, t0.x01), (0, _math.atan2)(t0.y11, t0.x11), !cw);
                  context.arc(0, 0, r0, (0, _math.atan2)(t0.cy + t0.y11, t0.cx + t0.x11), (0, _math.atan2)(t1.cy + t1.y11, t1.cx + t1.x11), cw);
                  context.arc(t1.cx, t1.cy, rc0, (0, _math.atan2)(t1.y11, t1.x11), (0, _math.atan2)(t1.y01, t1.x01), !cw);
                }
            } // Or is the inner ring just a circular arc?
            else context.arc(0, 0, r0, a10, a00, cw);
        }
    context.closePath();
    if (buffer) return context = null, buffer + "" || null;
  }

  arc.centroid = function () {
    var r = (+innerRadius.apply(this, arguments) + +outerRadius.apply(this, arguments)) / 2,
        a = (+startAngle.apply(this, arguments) + +endAngle.apply(this, arguments)) / 2 - _math.pi / 2;
    return [(0, _math.cos)(a) * r, (0, _math.sin)(a) * r];
  };

  arc.innerRadius = function (_) {
    return arguments.length ? (innerRadius = typeof _ === "function" ? _ : (0, _constant.default)(+_), arc) : innerRadius;
  };

  arc.outerRadius = function (_) {
    return arguments.length ? (outerRadius = typeof _ === "function" ? _ : (0, _constant.default)(+_), arc) : outerRadius;
  };

  arc.cornerRadius = function (_) {
    return arguments.length ? (cornerRadius = typeof _ === "function" ? _ : (0, _constant.default)(+_), arc) : cornerRadius;
  };

  arc.padRadius = function (_) {
    return arguments.length ? (padRadius = _ == null ? null : typeof _ === "function" ? _ : (0, _constant.default)(+_), arc) : padRadius;
  };

  arc.startAngle = function (_) {
    return arguments.length ? (startAngle = typeof _ === "function" ? _ : (0, _constant.default)(+_), arc) : startAngle;
  };

  arc.endAngle = function (_) {
    return arguments.length ? (endAngle = typeof _ === "function" ? _ : (0, _constant.default)(+_), arc) : endAngle;
  };

  arc.padAngle = function (_) {
    return arguments.length ? (padAngle = typeof _ === "function" ? _ : (0, _constant.default)(+_), arc) : padAngle;
  };

  arc.context = function (_) {
    return arguments.length ? (context = _ == null ? null : _, arc) : context;
  };

  return arc;
}
},{"d3-path":"dz42","./constant":"D3Ln","./math":"9R8v"}],"4VCF":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function Linear(context) {
  this._context = context;
}

Linear.prototype = {
  areaStart: function () {
    this._line = 0;
  },
  areaEnd: function () {
    this._line = NaN;
  },
  lineStart: function () {
    this._point = 0;
  },
  lineEnd: function () {
    if (this._line || this._line !== 0 && this._point === 1) this._context.closePath();
    this._line = 1 - this._line;
  },
  point: function (x, y) {
    x = +x, y = +y;

    switch (this._point) {
      case 0:
        this._point = 1;
        this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y);
        break;

      case 1:
        this._point = 2;
      // proceed

      default:
        this._context.lineTo(x, y);

        break;
    }
  }
};

function _default(context) {
  return new Linear(context);
}
},{}],"aLIe":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.x = x;
exports.y = y;

function x(p) {
  return p[0];
}

function y(p) {
  return p[1];
}
},{}],"Ume/":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _d3Path = require("d3-path");

var _constant = _interopRequireDefault(require("./constant"));

var _linear = _interopRequireDefault(require("./curve/linear"));

var _point = require("./point");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default() {
  var x = _point.x,
      y = _point.y,
      defined = (0, _constant.default)(true),
      context = null,
      curve = _linear.default,
      output = null;

  function line(data) {
    var i,
        n = data.length,
        d,
        defined0 = false,
        buffer;
    if (context == null) output = curve(buffer = (0, _d3Path.path)());

    for (i = 0; i <= n; ++i) {
      if (!(i < n && defined(d = data[i], i, data)) === defined0) {
        if (defined0 = !defined0) output.lineStart();else output.lineEnd();
      }

      if (defined0) output.point(+x(d, i, data), +y(d, i, data));
    }

    if (buffer) return output = null, buffer + "" || null;
  }

  line.x = function (_) {
    return arguments.length ? (x = typeof _ === "function" ? _ : (0, _constant.default)(+_), line) : x;
  };

  line.y = function (_) {
    return arguments.length ? (y = typeof _ === "function" ? _ : (0, _constant.default)(+_), line) : y;
  };

  line.defined = function (_) {
    return arguments.length ? (defined = typeof _ === "function" ? _ : (0, _constant.default)(!!_), line) : defined;
  };

  line.curve = function (_) {
    return arguments.length ? (curve = _, context != null && (output = curve(context)), line) : curve;
  };

  line.context = function (_) {
    return arguments.length ? (_ == null ? context = output = null : output = curve(context = _), line) : context;
  };

  return line;
}
},{"d3-path":"dz42","./constant":"D3Ln","./curve/linear":"4VCF","./point":"aLIe"}],"UWil":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _d3Path = require("d3-path");

var _constant = _interopRequireDefault(require("./constant"));

var _linear = _interopRequireDefault(require("./curve/linear"));

var _line = _interopRequireDefault(require("./line"));

var _point = require("./point");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default() {
  var x0 = _point.x,
      x1 = null,
      y0 = (0, _constant.default)(0),
      y1 = _point.y,
      defined = (0, _constant.default)(true),
      context = null,
      curve = _linear.default,
      output = null;

  function area(data) {
    var i,
        j,
        k,
        n = data.length,
        d,
        defined0 = false,
        buffer,
        x0z = new Array(n),
        y0z = new Array(n);
    if (context == null) output = curve(buffer = (0, _d3Path.path)());

    for (i = 0; i <= n; ++i) {
      if (!(i < n && defined(d = data[i], i, data)) === defined0) {
        if (defined0 = !defined0) {
          j = i;
          output.areaStart();
          output.lineStart();
        } else {
          output.lineEnd();
          output.lineStart();

          for (k = i - 1; k >= j; --k) {
            output.point(x0z[k], y0z[k]);
          }

          output.lineEnd();
          output.areaEnd();
        }
      }

      if (defined0) {
        x0z[i] = +x0(d, i, data), y0z[i] = +y0(d, i, data);
        output.point(x1 ? +x1(d, i, data) : x0z[i], y1 ? +y1(d, i, data) : y0z[i]);
      }
    }

    if (buffer) return output = null, buffer + "" || null;
  }

  function arealine() {
    return (0, _line.default)().defined(defined).curve(curve).context(context);
  }

  area.x = function (_) {
    return arguments.length ? (x0 = typeof _ === "function" ? _ : (0, _constant.default)(+_), x1 = null, area) : x0;
  };

  area.x0 = function (_) {
    return arguments.length ? (x0 = typeof _ === "function" ? _ : (0, _constant.default)(+_), area) : x0;
  };

  area.x1 = function (_) {
    return arguments.length ? (x1 = _ == null ? null : typeof _ === "function" ? _ : (0, _constant.default)(+_), area) : x1;
  };

  area.y = function (_) {
    return arguments.length ? (y0 = typeof _ === "function" ? _ : (0, _constant.default)(+_), y1 = null, area) : y0;
  };

  area.y0 = function (_) {
    return arguments.length ? (y0 = typeof _ === "function" ? _ : (0, _constant.default)(+_), area) : y0;
  };

  area.y1 = function (_) {
    return arguments.length ? (y1 = _ == null ? null : typeof _ === "function" ? _ : (0, _constant.default)(+_), area) : y1;
  };

  area.lineX0 = area.lineY0 = function () {
    return arealine().x(x0).y(y0);
  };

  area.lineY1 = function () {
    return arealine().x(x0).y(y1);
  };

  area.lineX1 = function () {
    return arealine().x(x1).y(y0);
  };

  area.defined = function (_) {
    return arguments.length ? (defined = typeof _ === "function" ? _ : (0, _constant.default)(!!_), area) : defined;
  };

  area.curve = function (_) {
    return arguments.length ? (curve = _, context != null && (output = curve(context)), area) : curve;
  };

  area.context = function (_) {
    return arguments.length ? (_ == null ? context = output = null : output = curve(context = _), area) : context;
  };

  return area;
}
},{"d3-path":"dz42","./constant":"D3Ln","./curve/linear":"4VCF","./line":"Ume/","./point":"aLIe"}],"7Rov":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(d) {
  return d;
}
},{}],"5OJY":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _constant = _interopRequireDefault(require("./constant"));

var _descending = _interopRequireDefault(require("./descending"));

var _identity = _interopRequireDefault(require("./identity"));

var _math = require("./math");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default() {
  var value = _identity.default,
      sortValues = _descending.default,
      sort = null,
      startAngle = (0, _constant.default)(0),
      endAngle = (0, _constant.default)(_math.tau),
      padAngle = (0, _constant.default)(0);

  function pie(data) {
    var i,
        n = data.length,
        j,
        k,
        sum = 0,
        index = new Array(n),
        arcs = new Array(n),
        a0 = +startAngle.apply(this, arguments),
        da = Math.min(_math.tau, Math.max(-_math.tau, endAngle.apply(this, arguments) - a0)),
        a1,
        p = Math.min(Math.abs(da) / n, padAngle.apply(this, arguments)),
        pa = p * (da < 0 ? -1 : 1),
        v;

    for (i = 0; i < n; ++i) {
      if ((v = arcs[index[i] = i] = +value(data[i], i, data)) > 0) {
        sum += v;
      }
    } // Optionally sort the arcs by previously-computed values or by data.


    if (sortValues != null) index.sort(function (i, j) {
      return sortValues(arcs[i], arcs[j]);
    });else if (sort != null) index.sort(function (i, j) {
      return sort(data[i], data[j]);
    }); // Compute the arcs! They are stored in the original data's order.

    for (i = 0, k = sum ? (da - n * pa) / sum : 0; i < n; ++i, a0 = a1) {
      j = index[i], v = arcs[j], a1 = a0 + (v > 0 ? v * k : 0) + pa, arcs[j] = {
        data: data[j],
        index: i,
        value: v,
        startAngle: a0,
        endAngle: a1,
        padAngle: p
      };
    }

    return arcs;
  }

  pie.value = function (_) {
    return arguments.length ? (value = typeof _ === "function" ? _ : (0, _constant.default)(+_), pie) : value;
  };

  pie.sortValues = function (_) {
    return arguments.length ? (sortValues = _, sort = null, pie) : sortValues;
  };

  pie.sort = function (_) {
    return arguments.length ? (sort = _, sortValues = null, pie) : sort;
  };

  pie.startAngle = function (_) {
    return arguments.length ? (startAngle = typeof _ === "function" ? _ : (0, _constant.default)(+_), pie) : startAngle;
  };

  pie.endAngle = function (_) {
    return arguments.length ? (endAngle = typeof _ === "function" ? _ : (0, _constant.default)(+_), pie) : endAngle;
  };

  pie.padAngle = function (_) {
    return arguments.length ? (padAngle = typeof _ === "function" ? _ : (0, _constant.default)(+_), pie) : padAngle;
  };

  return pie;
}
},{"./constant":"D3Ln","./descending":"wjXp","./identity":"7Rov","./math":"9R8v"}],"m9TD":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = curveRadial;
exports.curveRadialLinear = void 0;

var _linear = _interopRequireDefault(require("./linear"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var curveRadialLinear = curveRadial(_linear.default);
exports.curveRadialLinear = curveRadialLinear;

function Radial(curve) {
  this._curve = curve;
}

Radial.prototype = {
  areaStart: function () {
    this._curve.areaStart();
  },
  areaEnd: function () {
    this._curve.areaEnd();
  },
  lineStart: function () {
    this._curve.lineStart();
  },
  lineEnd: function () {
    this._curve.lineEnd();
  },
  point: function (a, r) {
    this._curve.point(r * Math.sin(a), r * -Math.cos(a));
  }
};

function curveRadial(curve) {
  function radial(context) {
    return new Radial(curve(context));
  }

  radial._curve = curve;
  return radial;
}
},{"./linear":"4VCF"}],"p8dR":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.lineRadial = lineRadial;
exports.default = _default;

var _radial = _interopRequireWildcard(require("./curve/radial"));

var _line = _interopRequireDefault(require("./line"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function lineRadial(l) {
  var c = l.curve;
  l.angle = l.x, delete l.x;
  l.radius = l.y, delete l.y;

  l.curve = function (_) {
    return arguments.length ? c((0, _radial.default)(_)) : c()._curve;
  };

  return l;
}

function _default() {
  return lineRadial((0, _line.default)().curve(_radial.curveRadialLinear));
}
},{"./curve/radial":"m9TD","./line":"Ume/"}],"7HIq":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _radial = _interopRequireWildcard(require("./curve/radial"));

var _area = _interopRequireDefault(require("./area"));

var _lineRadial = require("./lineRadial");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _default() {
  var a = (0, _area.default)().curve(_radial.curveRadialLinear),
      c = a.curve,
      x0 = a.lineX0,
      x1 = a.lineX1,
      y0 = a.lineY0,
      y1 = a.lineY1;
  a.angle = a.x, delete a.x;
  a.startAngle = a.x0, delete a.x0;
  a.endAngle = a.x1, delete a.x1;
  a.radius = a.y, delete a.y;
  a.innerRadius = a.y0, delete a.y0;
  a.outerRadius = a.y1, delete a.y1;
  a.lineStartAngle = function () {
    return (0, _lineRadial.lineRadial)(x0());
  }, delete a.lineX0;
  a.lineEndAngle = function () {
    return (0, _lineRadial.lineRadial)(x1());
  }, delete a.lineX1;
  a.lineInnerRadius = function () {
    return (0, _lineRadial.lineRadial)(y0());
  }, delete a.lineY0;
  a.lineOuterRadius = function () {
    return (0, _lineRadial.lineRadial)(y1());
  }, delete a.lineY1;

  a.curve = function (_) {
    return arguments.length ? c((0, _radial.default)(_)) : c()._curve;
  };

  return a;
}
},{"./curve/radial":"m9TD","./area":"UWil","./lineRadial":"p8dR"}],"wQOf":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(x, y) {
  return [(y = +y) * Math.cos(x -= Math.PI / 2), y * Math.sin(x)];
}
},{}],"CMsX":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.linkHorizontal = linkHorizontal;
exports.linkVertical = linkVertical;
exports.linkRadial = linkRadial;

var _d3Path = require("d3-path");

var _array = require("../array");

var _constant = _interopRequireDefault(require("../constant"));

var _point = require("../point");

var _pointRadial = _interopRequireDefault(require("../pointRadial"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function linkSource(d) {
  return d.source;
}

function linkTarget(d) {
  return d.target;
}

function link(curve) {
  var source = linkSource,
      target = linkTarget,
      x = _point.x,
      y = _point.y,
      context = null;

  function link() {
    var buffer,
        argv = _array.slice.call(arguments),
        s = source.apply(this, argv),
        t = target.apply(this, argv);

    if (!context) context = buffer = (0, _d3Path.path)();
    curve(context, +x.apply(this, (argv[0] = s, argv)), +y.apply(this, argv), +x.apply(this, (argv[0] = t, argv)), +y.apply(this, argv));
    if (buffer) return context = null, buffer + "" || null;
  }

  link.source = function (_) {
    return arguments.length ? (source = _, link) : source;
  };

  link.target = function (_) {
    return arguments.length ? (target = _, link) : target;
  };

  link.x = function (_) {
    return arguments.length ? (x = typeof _ === "function" ? _ : (0, _constant.default)(+_), link) : x;
  };

  link.y = function (_) {
    return arguments.length ? (y = typeof _ === "function" ? _ : (0, _constant.default)(+_), link) : y;
  };

  link.context = function (_) {
    return arguments.length ? (context = _ == null ? null : _, link) : context;
  };

  return link;
}

function curveHorizontal(context, x0, y0, x1, y1) {
  context.moveTo(x0, y0);
  context.bezierCurveTo(x0 = (x0 + x1) / 2, y0, x0, y1, x1, y1);
}

function curveVertical(context, x0, y0, x1, y1) {
  context.moveTo(x0, y0);
  context.bezierCurveTo(x0, y0 = (y0 + y1) / 2, x1, y0, x1, y1);
}

function curveRadial(context, x0, y0, x1, y1) {
  var p0 = (0, _pointRadial.default)(x0, y0),
      p1 = (0, _pointRadial.default)(x0, y0 = (y0 + y1) / 2),
      p2 = (0, _pointRadial.default)(x1, y0),
      p3 = (0, _pointRadial.default)(x1, y1);
  context.moveTo(p0[0], p0[1]);
  context.bezierCurveTo(p1[0], p1[1], p2[0], p2[1], p3[0], p3[1]);
}

function linkHorizontal() {
  return link(curveHorizontal);
}

function linkVertical() {
  return link(curveVertical);
}

function linkRadial() {
  var l = link(curveRadial);
  l.angle = l.x, delete l.x;
  l.radius = l.y, delete l.y;
  return l;
}
},{"d3-path":"dz42","../array":"rv5q","../constant":"D3Ln","../point":"aLIe","../pointRadial":"wQOf"}],"NEs3":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _math = require("../math");

var _default = {
  draw: function (context, size) {
    var r = Math.sqrt(size / _math.pi);
    context.moveTo(r, 0);
    context.arc(0, 0, r, 0, _math.tau);
  }
};
exports.default = _default;
},{"../math":"9R8v"}],"57OD":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _default = {
  draw: function (context, size) {
    var r = Math.sqrt(size / 5) / 2;
    context.moveTo(-3 * r, -r);
    context.lineTo(-r, -r);
    context.lineTo(-r, -3 * r);
    context.lineTo(r, -3 * r);
    context.lineTo(r, -r);
    context.lineTo(3 * r, -r);
    context.lineTo(3 * r, r);
    context.lineTo(r, r);
    context.lineTo(r, 3 * r);
    context.lineTo(-r, 3 * r);
    context.lineTo(-r, r);
    context.lineTo(-3 * r, r);
    context.closePath();
  }
};
exports.default = _default;
},{}],"nSnU":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var tan30 = Math.sqrt(1 / 3),
    tan30_2 = tan30 * 2;
var _default = {
  draw: function (context, size) {
    var y = Math.sqrt(size / tan30_2),
        x = y * tan30;
    context.moveTo(0, -y);
    context.lineTo(x, 0);
    context.lineTo(0, y);
    context.lineTo(-x, 0);
    context.closePath();
  }
};
exports.default = _default;
},{}],"3SkC":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _math = require("../math");

var ka = 0.89081309152928522810,
    kr = Math.sin(_math.pi / 10) / Math.sin(7 * _math.pi / 10),
    kx = Math.sin(_math.tau / 10) * kr,
    ky = -Math.cos(_math.tau / 10) * kr;
var _default = {
  draw: function (context, size) {
    var r = Math.sqrt(size * ka),
        x = kx * r,
        y = ky * r;
    context.moveTo(0, -r);
    context.lineTo(x, y);

    for (var i = 1; i < 5; ++i) {
      var a = _math.tau * i / 5,
          c = Math.cos(a),
          s = Math.sin(a);
      context.lineTo(s * r, -c * r);
      context.lineTo(c * x - s * y, s * x + c * y);
    }

    context.closePath();
  }
};
exports.default = _default;
},{"../math":"9R8v"}],"lQ43":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _default = {
  draw: function (context, size) {
    var w = Math.sqrt(size),
        x = -w / 2;
    context.rect(x, x, w, w);
  }
};
exports.default = _default;
},{}],"Z5S+":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var sqrt3 = Math.sqrt(3);
var _default = {
  draw: function (context, size) {
    var y = -Math.sqrt(size / (sqrt3 * 3));
    context.moveTo(0, y * 2);
    context.lineTo(-sqrt3 * y, -y);
    context.lineTo(sqrt3 * y, -y);
    context.closePath();
  }
};
exports.default = _default;
},{}],"JWBh":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var c = -0.5,
    s = Math.sqrt(3) / 2,
    k = 1 / Math.sqrt(12),
    a = (k / 2 + 1) * 3;
var _default = {
  draw: function (context, size) {
    var r = Math.sqrt(size / a),
        x0 = r / 2,
        y0 = r * k,
        x1 = x0,
        y1 = r * k + r,
        x2 = -x1,
        y2 = y1;
    context.moveTo(x0, y0);
    context.lineTo(x1, y1);
    context.lineTo(x2, y2);
    context.lineTo(c * x0 - s * y0, s * x0 + c * y0);
    context.lineTo(c * x1 - s * y1, s * x1 + c * y1);
    context.lineTo(c * x2 - s * y2, s * x2 + c * y2);
    context.lineTo(c * x0 + s * y0, c * y0 - s * x0);
    context.lineTo(c * x1 + s * y1, c * y1 - s * x1);
    context.lineTo(c * x2 + s * y2, c * y2 - s * x2);
    context.closePath();
  }
};
exports.default = _default;
},{}],"XBPQ":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;
exports.symbols = void 0;

var _d3Path = require("d3-path");

var _circle = _interopRequireDefault(require("./symbol/circle"));

var _cross = _interopRequireDefault(require("./symbol/cross"));

var _diamond = _interopRequireDefault(require("./symbol/diamond"));

var _star = _interopRequireDefault(require("./symbol/star"));

var _square = _interopRequireDefault(require("./symbol/square"));

var _triangle = _interopRequireDefault(require("./symbol/triangle"));

var _wye = _interopRequireDefault(require("./symbol/wye"));

var _constant = _interopRequireDefault(require("./constant"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var symbols = [_circle.default, _cross.default, _diamond.default, _square.default, _star.default, _triangle.default, _wye.default];
exports.symbols = symbols;

function _default() {
  var type = (0, _constant.default)(_circle.default),
      size = (0, _constant.default)(64),
      context = null;

  function symbol() {
    var buffer;
    if (!context) context = buffer = (0, _d3Path.path)();
    type.apply(this, arguments).draw(context, +size.apply(this, arguments));
    if (buffer) return context = null, buffer + "" || null;
  }

  symbol.type = function (_) {
    return arguments.length ? (type = typeof _ === "function" ? _ : (0, _constant.default)(_), symbol) : type;
  };

  symbol.size = function (_) {
    return arguments.length ? (size = typeof _ === "function" ? _ : (0, _constant.default)(+_), symbol) : size;
  };

  symbol.context = function (_) {
    return arguments.length ? (context = _ == null ? null : _, symbol) : context;
  };

  return symbol;
}
},{"d3-path":"dz42","./symbol/circle":"NEs3","./symbol/cross":"57OD","./symbol/diamond":"nSnU","./symbol/star":"3SkC","./symbol/square":"lQ43","./symbol/triangle":"Z5S+","./symbol/wye":"JWBh","./constant":"D3Ln"}],"XakR":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.point = point;
exports.Basis = Basis;
exports.default = _default;

function point(that, x, y) {
  that._context.bezierCurveTo((2 * that._x0 + that._x1) / 3, (2 * that._y0 + that._y1) / 3, (that._x0 + 2 * that._x1) / 3, (that._y0 + 2 * that._y1) / 3, (that._x0 + 4 * that._x1 + x) / 6, (that._y0 + 4 * that._y1 + y) / 6);
}

function Basis(context) {
  this._context = context;
}

Basis.prototype = {
  areaStart: function () {
    this._line = 0;
  },
  areaEnd: function () {
    this._line = NaN;
  },
  lineStart: function () {
    this._x0 = this._x1 = this._y0 = this._y1 = NaN;
    this._point = 0;
  },
  lineEnd: function () {
    switch (this._point) {
      case 3:
        point(this, this._x1, this._y1);
      // proceed

      case 2:
        this._context.lineTo(this._x1, this._y1);

        break;
    }

    if (this._line || this._line !== 0 && this._point === 1) this._context.closePath();
    this._line = 1 - this._line;
  },
  point: function (x, y) {
    x = +x, y = +y;

    switch (this._point) {
      case 0:
        this._point = 1;
        this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y);
        break;

      case 1:
        this._point = 2;
        break;

      case 2:
        this._point = 3;

        this._context.lineTo((5 * this._x0 + this._x1) / 6, (5 * this._y0 + this._y1) / 6);

      // proceed

      default:
        point(this, x, y);
        break;
    }

    this._x0 = this._x1, this._x1 = x;
    this._y0 = this._y1, this._y1 = y;
  }
};

function _default(context) {
  return new Basis(context);
}
},{}],"WkDE":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _noop = _interopRequireDefault(require("../noop"));

var _basis = require("./basis");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function BasisClosed(context) {
  this._context = context;
}

BasisClosed.prototype = {
  areaStart: _noop.default,
  areaEnd: _noop.default,
  lineStart: function () {
    this._x0 = this._x1 = this._x2 = this._x3 = this._x4 = this._y0 = this._y1 = this._y2 = this._y3 = this._y4 = NaN;
    this._point = 0;
  },
  lineEnd: function () {
    switch (this._point) {
      case 1:
        {
          this._context.moveTo(this._x2, this._y2);

          this._context.closePath();

          break;
        }

      case 2:
        {
          this._context.moveTo((this._x2 + 2 * this._x3) / 3, (this._y2 + 2 * this._y3) / 3);

          this._context.lineTo((this._x3 + 2 * this._x2) / 3, (this._y3 + 2 * this._y2) / 3);

          this._context.closePath();

          break;
        }

      case 3:
        {
          this.point(this._x2, this._y2);
          this.point(this._x3, this._y3);
          this.point(this._x4, this._y4);
          break;
        }
    }
  },
  point: function (x, y) {
    x = +x, y = +y;

    switch (this._point) {
      case 0:
        this._point = 1;
        this._x2 = x, this._y2 = y;
        break;

      case 1:
        this._point = 2;
        this._x3 = x, this._y3 = y;
        break;

      case 2:
        this._point = 3;
        this._x4 = x, this._y4 = y;

        this._context.moveTo((this._x0 + 4 * this._x1 + x) / 6, (this._y0 + 4 * this._y1 + y) / 6);

        break;

      default:
        (0, _basis.point)(this, x, y);
        break;
    }

    this._x0 = this._x1, this._x1 = x;
    this._y0 = this._y1, this._y1 = y;
  }
};

function _default(context) {
  return new BasisClosed(context);
}
},{"../noop":"BhKh","./basis":"XakR"}],"+5Gg":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _basis = require("./basis");

function BasisOpen(context) {
  this._context = context;
}

BasisOpen.prototype = {
  areaStart: function () {
    this._line = 0;
  },
  areaEnd: function () {
    this._line = NaN;
  },
  lineStart: function () {
    this._x0 = this._x1 = this._y0 = this._y1 = NaN;
    this._point = 0;
  },
  lineEnd: function () {
    if (this._line || this._line !== 0 && this._point === 3) this._context.closePath();
    this._line = 1 - this._line;
  },
  point: function (x, y) {
    x = +x, y = +y;

    switch (this._point) {
      case 0:
        this._point = 1;
        break;

      case 1:
        this._point = 2;
        break;

      case 2:
        this._point = 3;
        var x0 = (this._x0 + 4 * this._x1 + x) / 6,
            y0 = (this._y0 + 4 * this._y1 + y) / 6;
        this._line ? this._context.lineTo(x0, y0) : this._context.moveTo(x0, y0);
        break;

      case 3:
        this._point = 4;
      // proceed

      default:
        (0, _basis.point)(this, x, y);
        break;
    }

    this._x0 = this._x1, this._x1 = x;
    this._y0 = this._y1, this._y1 = y;
  }
};

function _default(context) {
  return new BasisOpen(context);
}
},{"./basis":"XakR"}],"eh91":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _basis = require("./basis");

function Bundle(context, beta) {
  this._basis = new _basis.Basis(context);
  this._beta = beta;
}

Bundle.prototype = {
  lineStart: function () {
    this._x = [];
    this._y = [];

    this._basis.lineStart();
  },
  lineEnd: function () {
    var x = this._x,
        y = this._y,
        j = x.length - 1;

    if (j > 0) {
      var x0 = x[0],
          y0 = y[0],
          dx = x[j] - x0,
          dy = y[j] - y0,
          i = -1,
          t;

      while (++i <= j) {
        t = i / j;

        this._basis.point(this._beta * x[i] + (1 - this._beta) * (x0 + t * dx), this._beta * y[i] + (1 - this._beta) * (y0 + t * dy));
      }
    }

    this._x = this._y = null;

    this._basis.lineEnd();
  },
  point: function (x, y) {
    this._x.push(+x);

    this._y.push(+y);
  }
};

var _default = function custom(beta) {
  function bundle(context) {
    return beta === 1 ? new _basis.Basis(context) : new Bundle(context, beta);
  }

  bundle.beta = function (beta) {
    return custom(+beta);
  };

  return bundle;
}(0.85);

exports.default = _default;
},{"./basis":"XakR"}],"fNTp":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.point = point;
exports.Cardinal = Cardinal;
exports.default = void 0;

function point(that, x, y) {
  that._context.bezierCurveTo(that._x1 + that._k * (that._x2 - that._x0), that._y1 + that._k * (that._y2 - that._y0), that._x2 + that._k * (that._x1 - x), that._y2 + that._k * (that._y1 - y), that._x2, that._y2);
}

function Cardinal(context, tension) {
  this._context = context;
  this._k = (1 - tension) / 6;
}

Cardinal.prototype = {
  areaStart: function () {
    this._line = 0;
  },
  areaEnd: function () {
    this._line = NaN;
  },
  lineStart: function () {
    this._x0 = this._x1 = this._x2 = this._y0 = this._y1 = this._y2 = NaN;
    this._point = 0;
  },
  lineEnd: function () {
    switch (this._point) {
      case 2:
        this._context.lineTo(this._x2, this._y2);

        break;

      case 3:
        point(this, this._x1, this._y1);
        break;
    }

    if (this._line || this._line !== 0 && this._point === 1) this._context.closePath();
    this._line = 1 - this._line;
  },
  point: function (x, y) {
    x = +x, y = +y;

    switch (this._point) {
      case 0:
        this._point = 1;
        this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y);
        break;

      case 1:
        this._point = 2;
        this._x1 = x, this._y1 = y;
        break;

      case 2:
        this._point = 3;
      // proceed

      default:
        point(this, x, y);
        break;
    }

    this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;
    this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;
  }
};

var _default = function custom(tension) {
  function cardinal(context) {
    return new Cardinal(context, tension);
  }

  cardinal.tension = function (tension) {
    return custom(+tension);
  };

  return cardinal;
}(0);

exports.default = _default;
},{}],"euEz":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CardinalClosed = CardinalClosed;
exports.default = void 0;

var _noop = _interopRequireDefault(require("../noop"));

var _cardinal = require("./cardinal");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function CardinalClosed(context, tension) {
  this._context = context;
  this._k = (1 - tension) / 6;
}

CardinalClosed.prototype = {
  areaStart: _noop.default,
  areaEnd: _noop.default,
  lineStart: function () {
    this._x0 = this._x1 = this._x2 = this._x3 = this._x4 = this._x5 = this._y0 = this._y1 = this._y2 = this._y3 = this._y4 = this._y5 = NaN;
    this._point = 0;
  },
  lineEnd: function () {
    switch (this._point) {
      case 1:
        {
          this._context.moveTo(this._x3, this._y3);

          this._context.closePath();

          break;
        }

      case 2:
        {
          this._context.lineTo(this._x3, this._y3);

          this._context.closePath();

          break;
        }

      case 3:
        {
          this.point(this._x3, this._y3);
          this.point(this._x4, this._y4);
          this.point(this._x5, this._y5);
          break;
        }
    }
  },
  point: function (x, y) {
    x = +x, y = +y;

    switch (this._point) {
      case 0:
        this._point = 1;
        this._x3 = x, this._y3 = y;
        break;

      case 1:
        this._point = 2;

        this._context.moveTo(this._x4 = x, this._y4 = y);

        break;

      case 2:
        this._point = 3;
        this._x5 = x, this._y5 = y;
        break;

      default:
        (0, _cardinal.point)(this, x, y);
        break;
    }

    this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;
    this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;
  }
};

var _default = function custom(tension) {
  function cardinal(context) {
    return new CardinalClosed(context, tension);
  }

  cardinal.tension = function (tension) {
    return custom(+tension);
  };

  return cardinal;
}(0);

exports.default = _default;
},{"../noop":"BhKh","./cardinal":"fNTp"}],"it46":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CardinalOpen = CardinalOpen;
exports.default = void 0;

var _cardinal = require("./cardinal");

function CardinalOpen(context, tension) {
  this._context = context;
  this._k = (1 - tension) / 6;
}

CardinalOpen.prototype = {
  areaStart: function () {
    this._line = 0;
  },
  areaEnd: function () {
    this._line = NaN;
  },
  lineStart: function () {
    this._x0 = this._x1 = this._x2 = this._y0 = this._y1 = this._y2 = NaN;
    this._point = 0;
  },
  lineEnd: function () {
    if (this._line || this._line !== 0 && this._point === 3) this._context.closePath();
    this._line = 1 - this._line;
  },
  point: function (x, y) {
    x = +x, y = +y;

    switch (this._point) {
      case 0:
        this._point = 1;
        break;

      case 1:
        this._point = 2;
        break;

      case 2:
        this._point = 3;
        this._line ? this._context.lineTo(this._x2, this._y2) : this._context.moveTo(this._x2, this._y2);
        break;

      case 3:
        this._point = 4;
      // proceed

      default:
        (0, _cardinal.point)(this, x, y);
        break;
    }

    this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;
    this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;
  }
};

var _default = function custom(tension) {
  function cardinal(context) {
    return new CardinalOpen(context, tension);
  }

  cardinal.tension = function (tension) {
    return custom(+tension);
  };

  return cardinal;
}(0);

exports.default = _default;
},{"./cardinal":"fNTp"}],"oWDJ":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.point = point;
exports.default = void 0;

var _math = require("../math");

var _cardinal = require("./cardinal");

function point(that, x, y) {
  var x1 = that._x1,
      y1 = that._y1,
      x2 = that._x2,
      y2 = that._y2;

  if (that._l01_a > _math.epsilon) {
    var a = 2 * that._l01_2a + 3 * that._l01_a * that._l12_a + that._l12_2a,
        n = 3 * that._l01_a * (that._l01_a + that._l12_a);
    x1 = (x1 * a - that._x0 * that._l12_2a + that._x2 * that._l01_2a) / n;
    y1 = (y1 * a - that._y0 * that._l12_2a + that._y2 * that._l01_2a) / n;
  }

  if (that._l23_a > _math.epsilon) {
    var b = 2 * that._l23_2a + 3 * that._l23_a * that._l12_a + that._l12_2a,
        m = 3 * that._l23_a * (that._l23_a + that._l12_a);
    x2 = (x2 * b + that._x1 * that._l23_2a - x * that._l12_2a) / m;
    y2 = (y2 * b + that._y1 * that._l23_2a - y * that._l12_2a) / m;
  }

  that._context.bezierCurveTo(x1, y1, x2, y2, that._x2, that._y2);
}

function CatmullRom(context, alpha) {
  this._context = context;
  this._alpha = alpha;
}

CatmullRom.prototype = {
  areaStart: function () {
    this._line = 0;
  },
  areaEnd: function () {
    this._line = NaN;
  },
  lineStart: function () {
    this._x0 = this._x1 = this._x2 = this._y0 = this._y1 = this._y2 = NaN;
    this._l01_a = this._l12_a = this._l23_a = this._l01_2a = this._l12_2a = this._l23_2a = this._point = 0;
  },
  lineEnd: function () {
    switch (this._point) {
      case 2:
        this._context.lineTo(this._x2, this._y2);

        break;

      case 3:
        this.point(this._x2, this._y2);
        break;
    }

    if (this._line || this._line !== 0 && this._point === 1) this._context.closePath();
    this._line = 1 - this._line;
  },
  point: function (x, y) {
    x = +x, y = +y;

    if (this._point) {
      var x23 = this._x2 - x,
          y23 = this._y2 - y;
      this._l23_a = Math.sqrt(this._l23_2a = Math.pow(x23 * x23 + y23 * y23, this._alpha));
    }

    switch (this._point) {
      case 0:
        this._point = 1;
        this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y);
        break;

      case 1:
        this._point = 2;
        break;

      case 2:
        this._point = 3;
      // proceed

      default:
        point(this, x, y);
        break;
    }

    this._l01_a = this._l12_a, this._l12_a = this._l23_a;
    this._l01_2a = this._l12_2a, this._l12_2a = this._l23_2a;
    this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;
    this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;
  }
};

var _default = function custom(alpha) {
  function catmullRom(context) {
    return alpha ? new CatmullRom(context, alpha) : new _cardinal.Cardinal(context, 0);
  }

  catmullRom.alpha = function (alpha) {
    return custom(+alpha);
  };

  return catmullRom;
}(0.5);

exports.default = _default;
},{"../math":"9R8v","./cardinal":"fNTp"}],"41Cs":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _cardinalClosed = require("./cardinalClosed");

var _noop = _interopRequireDefault(require("../noop"));

var _catmullRom = require("./catmullRom");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function CatmullRomClosed(context, alpha) {
  this._context = context;
  this._alpha = alpha;
}

CatmullRomClosed.prototype = {
  areaStart: _noop.default,
  areaEnd: _noop.default,
  lineStart: function () {
    this._x0 = this._x1 = this._x2 = this._x3 = this._x4 = this._x5 = this._y0 = this._y1 = this._y2 = this._y3 = this._y4 = this._y5 = NaN;
    this._l01_a = this._l12_a = this._l23_a = this._l01_2a = this._l12_2a = this._l23_2a = this._point = 0;
  },
  lineEnd: function () {
    switch (this._point) {
      case 1:
        {
          this._context.moveTo(this._x3, this._y3);

          this._context.closePath();

          break;
        }

      case 2:
        {
          this._context.lineTo(this._x3, this._y3);

          this._context.closePath();

          break;
        }

      case 3:
        {
          this.point(this._x3, this._y3);
          this.point(this._x4, this._y4);
          this.point(this._x5, this._y5);
          break;
        }
    }
  },
  point: function (x, y) {
    x = +x, y = +y;

    if (this._point) {
      var x23 = this._x2 - x,
          y23 = this._y2 - y;
      this._l23_a = Math.sqrt(this._l23_2a = Math.pow(x23 * x23 + y23 * y23, this._alpha));
    }

    switch (this._point) {
      case 0:
        this._point = 1;
        this._x3 = x, this._y3 = y;
        break;

      case 1:
        this._point = 2;

        this._context.moveTo(this._x4 = x, this._y4 = y);

        break;

      case 2:
        this._point = 3;
        this._x5 = x, this._y5 = y;
        break;

      default:
        (0, _catmullRom.point)(this, x, y);
        break;
    }

    this._l01_a = this._l12_a, this._l12_a = this._l23_a;
    this._l01_2a = this._l12_2a, this._l12_2a = this._l23_2a;
    this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;
    this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;
  }
};

var _default = function custom(alpha) {
  function catmullRom(context) {
    return alpha ? new CatmullRomClosed(context, alpha) : new _cardinalClosed.CardinalClosed(context, 0);
  }

  catmullRom.alpha = function (alpha) {
    return custom(+alpha);
  };

  return catmullRom;
}(0.5);

exports.default = _default;
},{"./cardinalClosed":"euEz","../noop":"BhKh","./catmullRom":"oWDJ"}],"Vf6b":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _cardinalOpen = require("./cardinalOpen");

var _catmullRom = require("./catmullRom");

function CatmullRomOpen(context, alpha) {
  this._context = context;
  this._alpha = alpha;
}

CatmullRomOpen.prototype = {
  areaStart: function () {
    this._line = 0;
  },
  areaEnd: function () {
    this._line = NaN;
  },
  lineStart: function () {
    this._x0 = this._x1 = this._x2 = this._y0 = this._y1 = this._y2 = NaN;
    this._l01_a = this._l12_a = this._l23_a = this._l01_2a = this._l12_2a = this._l23_2a = this._point = 0;
  },
  lineEnd: function () {
    if (this._line || this._line !== 0 && this._point === 3) this._context.closePath();
    this._line = 1 - this._line;
  },
  point: function (x, y) {
    x = +x, y = +y;

    if (this._point) {
      var x23 = this._x2 - x,
          y23 = this._y2 - y;
      this._l23_a = Math.sqrt(this._l23_2a = Math.pow(x23 * x23 + y23 * y23, this._alpha));
    }

    switch (this._point) {
      case 0:
        this._point = 1;
        break;

      case 1:
        this._point = 2;
        break;

      case 2:
        this._point = 3;
        this._line ? this._context.lineTo(this._x2, this._y2) : this._context.moveTo(this._x2, this._y2);
        break;

      case 3:
        this._point = 4;
      // proceed

      default:
        (0, _catmullRom.point)(this, x, y);
        break;
    }

    this._l01_a = this._l12_a, this._l12_a = this._l23_a;
    this._l01_2a = this._l12_2a, this._l12_2a = this._l23_2a;
    this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;
    this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;
  }
};

var _default = function custom(alpha) {
  function catmullRom(context) {
    return alpha ? new CatmullRomOpen(context, alpha) : new _cardinalOpen.CardinalOpen(context, 0);
  }

  catmullRom.alpha = function (alpha) {
    return custom(+alpha);
  };

  return catmullRom;
}(0.5);

exports.default = _default;
},{"./cardinalOpen":"it46","./catmullRom":"oWDJ"}],"QDqS":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _noop = _interopRequireDefault(require("../noop"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function LinearClosed(context) {
  this._context = context;
}

LinearClosed.prototype = {
  areaStart: _noop.default,
  areaEnd: _noop.default,
  lineStart: function () {
    this._point = 0;
  },
  lineEnd: function () {
    if (this._point) this._context.closePath();
  },
  point: function (x, y) {
    x = +x, y = +y;
    if (this._point) this._context.lineTo(x, y);else this._point = 1, this._context.moveTo(x, y);
  }
};

function _default(context) {
  return new LinearClosed(context);
}
},{"../noop":"BhKh"}],"7Vae":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.monotoneX = monotoneX;
exports.monotoneY = monotoneY;

function sign(x) {
  return x < 0 ? -1 : 1;
} // Calculate the slopes of the tangents (Hermite-type interpolation) based on
// the following paper: Steffen, M. 1990. A Simple Method for Monotonic
// Interpolation in One Dimension. Astronomy and Astrophysics, Vol. 239, NO.
// NOV(II), P. 443, 1990.


function slope3(that, x2, y2) {
  var h0 = that._x1 - that._x0,
      h1 = x2 - that._x1,
      s0 = (that._y1 - that._y0) / (h0 || h1 < 0 && -0),
      s1 = (y2 - that._y1) / (h1 || h0 < 0 && -0),
      p = (s0 * h1 + s1 * h0) / (h0 + h1);
  return (sign(s0) + sign(s1)) * Math.min(Math.abs(s0), Math.abs(s1), 0.5 * Math.abs(p)) || 0;
} // Calculate a one-sided slope.


function slope2(that, t) {
  var h = that._x1 - that._x0;
  return h ? (3 * (that._y1 - that._y0) / h - t) / 2 : t;
} // According to https://en.wikipedia.org/wiki/Cubic_Hermite_spline#Representations
// "you can express cubic Hermite interpolation in terms of cubic Bézier curves
// with respect to the four values p0, p0 + m0 / 3, p1 - m1 / 3, p1".


function point(that, t0, t1) {
  var x0 = that._x0,
      y0 = that._y0,
      x1 = that._x1,
      y1 = that._y1,
      dx = (x1 - x0) / 3;

  that._context.bezierCurveTo(x0 + dx, y0 + dx * t0, x1 - dx, y1 - dx * t1, x1, y1);
}

function MonotoneX(context) {
  this._context = context;
}

MonotoneX.prototype = {
  areaStart: function () {
    this._line = 0;
  },
  areaEnd: function () {
    this._line = NaN;
  },
  lineStart: function () {
    this._x0 = this._x1 = this._y0 = this._y1 = this._t0 = NaN;
    this._point = 0;
  },
  lineEnd: function () {
    switch (this._point) {
      case 2:
        this._context.lineTo(this._x1, this._y1);

        break;

      case 3:
        point(this, this._t0, slope2(this, this._t0));
        break;
    }

    if (this._line || this._line !== 0 && this._point === 1) this._context.closePath();
    this._line = 1 - this._line;
  },
  point: function (x, y) {
    var t1 = NaN;
    x = +x, y = +y;
    if (x === this._x1 && y === this._y1) return; // Ignore coincident points.

    switch (this._point) {
      case 0:
        this._point = 1;
        this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y);
        break;

      case 1:
        this._point = 2;
        break;

      case 2:
        this._point = 3;
        point(this, slope2(this, t1 = slope3(this, x, y)), t1);
        break;

      default:
        point(this, this._t0, t1 = slope3(this, x, y));
        break;
    }

    this._x0 = this._x1, this._x1 = x;
    this._y0 = this._y1, this._y1 = y;
    this._t0 = t1;
  }
};

function MonotoneY(context) {
  this._context = new ReflectContext(context);
}

(MonotoneY.prototype = Object.create(MonotoneX.prototype)).point = function (x, y) {
  MonotoneX.prototype.point.call(this, y, x);
};

function ReflectContext(context) {
  this._context = context;
}

ReflectContext.prototype = {
  moveTo: function (x, y) {
    this._context.moveTo(y, x);
  },
  closePath: function () {
    this._context.closePath();
  },
  lineTo: function (x, y) {
    this._context.lineTo(y, x);
  },
  bezierCurveTo: function (x1, y1, x2, y2, x, y) {
    this._context.bezierCurveTo(y1, x1, y2, x2, y, x);
  }
};

function monotoneX(context) {
  return new MonotoneX(context);
}

function monotoneY(context) {
  return new MonotoneY(context);
}
},{}],"0T3B":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function Natural(context) {
  this._context = context;
}

Natural.prototype = {
  areaStart: function () {
    this._line = 0;
  },
  areaEnd: function () {
    this._line = NaN;
  },
  lineStart: function () {
    this._x = [];
    this._y = [];
  },
  lineEnd: function () {
    var x = this._x,
        y = this._y,
        n = x.length;

    if (n) {
      this._line ? this._context.lineTo(x[0], y[0]) : this._context.moveTo(x[0], y[0]);

      if (n === 2) {
        this._context.lineTo(x[1], y[1]);
      } else {
        var px = controlPoints(x),
            py = controlPoints(y);

        for (var i0 = 0, i1 = 1; i1 < n; ++i0, ++i1) {
          this._context.bezierCurveTo(px[0][i0], py[0][i0], px[1][i0], py[1][i0], x[i1], y[i1]);
        }
      }
    }

    if (this._line || this._line !== 0 && n === 1) this._context.closePath();
    this._line = 1 - this._line;
    this._x = this._y = null;
  },
  point: function (x, y) {
    this._x.push(+x);

    this._y.push(+y);
  }
}; // See https://www.particleincell.com/2012/bezier-splines/ for derivation.

function controlPoints(x) {
  var i,
      n = x.length - 1,
      m,
      a = new Array(n),
      b = new Array(n),
      r = new Array(n);
  a[0] = 0, b[0] = 2, r[0] = x[0] + 2 * x[1];

  for (i = 1; i < n - 1; ++i) a[i] = 1, b[i] = 4, r[i] = 4 * x[i] + 2 * x[i + 1];

  a[n - 1] = 2, b[n - 1] = 7, r[n - 1] = 8 * x[n - 1] + x[n];

  for (i = 1; i < n; ++i) m = a[i] / b[i - 1], b[i] -= m, r[i] -= m * r[i - 1];

  a[n - 1] = r[n - 1] / b[n - 1];

  for (i = n - 2; i >= 0; --i) a[i] = (r[i] - a[i + 1]) / b[i];

  b[n - 1] = (x[n] + a[n - 1]) / 2;

  for (i = 0; i < n - 1; ++i) b[i] = 2 * x[i + 1] - a[i + 1];

  return [a, b];
}

function _default(context) {
  return new Natural(context);
}
},{}],"UYn4":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;
exports.stepBefore = stepBefore;
exports.stepAfter = stepAfter;

function Step(context, t) {
  this._context = context;
  this._t = t;
}

Step.prototype = {
  areaStart: function () {
    this._line = 0;
  },
  areaEnd: function () {
    this._line = NaN;
  },
  lineStart: function () {
    this._x = this._y = NaN;
    this._point = 0;
  },
  lineEnd: function () {
    if (0 < this._t && this._t < 1 && this._point === 2) this._context.lineTo(this._x, this._y);
    if (this._line || this._line !== 0 && this._point === 1) this._context.closePath();
    if (this._line >= 0) this._t = 1 - this._t, this._line = 1 - this._line;
  },
  point: function (x, y) {
    x = +x, y = +y;

    switch (this._point) {
      case 0:
        this._point = 1;
        this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y);
        break;

      case 1:
        this._point = 2;
      // proceed

      default:
        {
          if (this._t <= 0) {
            this._context.lineTo(this._x, y);

            this._context.lineTo(x, y);
          } else {
            var x1 = this._x * (1 - this._t) + x * this._t;

            this._context.lineTo(x1, this._y);

            this._context.lineTo(x1, y);
          }

          break;
        }
    }

    this._x = x, this._y = y;
  }
};

function _default(context) {
  return new Step(context, 0.5);
}

function stepBefore(context) {
  return new Step(context, 0);
}

function stepAfter(context) {
  return new Step(context, 1);
}
},{}],"x5Mk":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(series, order) {
  if (!((n = series.length) > 1)) return;

  for (var i = 1, j, s0, s1 = series[order[0]], n, m = s1.length; i < n; ++i) {
    s0 = s1, s1 = series[order[i]];

    for (j = 0; j < m; ++j) {
      s1[j][1] += s1[j][0] = isNaN(s0[j][1]) ? s0[j][0] : s0[j][1];
    }
  }
}
},{}],"0IgC":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(series) {
  var n = series.length,
      o = new Array(n);

  while (--n >= 0) o[n] = n;

  return o;
}
},{}],"S7q8":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _array = require("./array");

var _constant = _interopRequireDefault(require("./constant"));

var _none = _interopRequireDefault(require("./offset/none"));

var _none2 = _interopRequireDefault(require("./order/none"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function stackValue(d, key) {
  return d[key];
}

function _default() {
  var keys = (0, _constant.default)([]),
      order = _none2.default,
      offset = _none.default,
      value = stackValue;

  function stack(data) {
    var kz = keys.apply(this, arguments),
        i,
        m = data.length,
        n = kz.length,
        sz = new Array(n),
        oz;

    for (i = 0; i < n; ++i) {
      for (var ki = kz[i], si = sz[i] = new Array(m), j = 0, sij; j < m; ++j) {
        si[j] = sij = [0, +value(data[j], ki, j, data)];
        sij.data = data[j];
      }

      si.key = ki;
    }

    for (i = 0, oz = order(sz); i < n; ++i) {
      sz[oz[i]].index = i;
    }

    offset(sz, oz);
    return sz;
  }

  stack.keys = function (_) {
    return arguments.length ? (keys = typeof _ === "function" ? _ : (0, _constant.default)(_array.slice.call(_)), stack) : keys;
  };

  stack.value = function (_) {
    return arguments.length ? (value = typeof _ === "function" ? _ : (0, _constant.default)(+_), stack) : value;
  };

  stack.order = function (_) {
    return arguments.length ? (order = _ == null ? _none2.default : typeof _ === "function" ? _ : (0, _constant.default)(_array.slice.call(_)), stack) : order;
  };

  stack.offset = function (_) {
    return arguments.length ? (offset = _ == null ? _none.default : _, stack) : offset;
  };

  return stack;
}
},{"./array":"rv5q","./constant":"D3Ln","./offset/none":"x5Mk","./order/none":"0IgC"}],"2jY6":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _none = _interopRequireDefault(require("./none"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(series, order) {
  if (!((n = series.length) > 0)) return;

  for (var i, n, j = 0, m = series[0].length, y; j < m; ++j) {
    for (y = i = 0; i < n; ++i) y += series[i][j][1] || 0;

    if (y) for (i = 0; i < n; ++i) series[i][j][1] /= y;
  }

  (0, _none.default)(series, order);
}
},{"./none":"x5Mk"}],"P+6Q":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(series, order) {
  if (!((n = series.length) > 1)) return;

  for (var i, j = 0, d, dy, yp, yn, n, m = series[order[0]].length; j < m; ++j) {
    for (yp = yn = 0, i = 0; i < n; ++i) {
      if ((dy = (d = series[order[i]][j])[1] - d[0]) >= 0) {
        d[0] = yp, d[1] = yp += dy;
      } else if (dy < 0) {
        d[1] = yn, d[0] = yn += dy;
      } else {
        d[0] = yp;
      }
    }
  }
}
},{}],"sf4d":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _none = _interopRequireDefault(require("./none"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(series, order) {
  if (!((n = series.length) > 0)) return;

  for (var j = 0, s0 = series[order[0]], n, m = s0.length; j < m; ++j) {
    for (var i = 0, y = 0; i < n; ++i) y += series[i][j][1] || 0;

    s0[j][1] += s0[j][0] = -y / 2;
  }

  (0, _none.default)(series, order);
}
},{"./none":"x5Mk"}],"EH71":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _none = _interopRequireDefault(require("./none"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(series, order) {
  if (!((n = series.length) > 0) || !((m = (s0 = series[order[0]]).length) > 0)) return;

  for (var y = 0, j = 1, s0, m, n; j < m; ++j) {
    for (var i = 0, s1 = 0, s2 = 0; i < n; ++i) {
      var si = series[order[i]],
          sij0 = si[j][1] || 0,
          sij1 = si[j - 1][1] || 0,
          s3 = (sij0 - sij1) / 2;

      for (var k = 0; k < i; ++k) {
        var sk = series[order[k]],
            skj0 = sk[j][1] || 0,
            skj1 = sk[j - 1][1] || 0;
        s3 += skj0 - skj1;
      }

      s1 += sij0, s2 += s3 * sij0;
    }

    s0[j - 1][1] += s0[j - 1][0] = y;
    if (s1) y -= s2 / s1;
  }

  s0[j - 1][1] += s0[j - 1][0] = y;
  (0, _none.default)(series, order);
}
},{"./none":"x5Mk"}],"4koe":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;
exports.sum = sum;

var _none = _interopRequireDefault(require("./none"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(series) {
  var sums = series.map(sum);
  return (0, _none.default)(series).sort(function (a, b) {
    return sums[a] - sums[b];
  });
}

function sum(series) {
  var s = 0,
      i = -1,
      n = series.length,
      v;

  while (++i < n) if (v = +series[i][1]) s += v;

  return s;
}
},{"./none":"0IgC"}],"i2th":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _ascending = _interopRequireDefault(require("./ascending"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(series) {
  return (0, _ascending.default)(series).reverse();
}
},{"./ascending":"4koe"}],"msEL":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _none = _interopRequireDefault(require("./none"));

var _ascending = require("./ascending");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(series) {
  var n = series.length,
      i,
      j,
      sums = series.map(_ascending.sum),
      order = (0, _none.default)(series).sort(function (a, b) {
    return sums[b] - sums[a];
  }),
      top = 0,
      bottom = 0,
      tops = [],
      bottoms = [];

  for (i = 0; i < n; ++i) {
    j = order[i];

    if (top < bottom) {
      top += sums[j];
      tops.push(j);
    } else {
      bottom += sums[j];
      bottoms.push(j);
    }
  }

  return bottoms.reverse().concat(tops);
}
},{"./none":"0IgC","./ascending":"4koe"}],"w5Iz":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _none = _interopRequireDefault(require("./none"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(series) {
  return (0, _none.default)(series).reverse();
}
},{"./none":"0IgC"}],"pW+U":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "arc", {
  enumerable: true,
  get: function () {
    return _arc.default;
  }
});
Object.defineProperty(exports, "area", {
  enumerable: true,
  get: function () {
    return _area.default;
  }
});
Object.defineProperty(exports, "line", {
  enumerable: true,
  get: function () {
    return _line.default;
  }
});
Object.defineProperty(exports, "pie", {
  enumerable: true,
  get: function () {
    return _pie.default;
  }
});
Object.defineProperty(exports, "areaRadial", {
  enumerable: true,
  get: function () {
    return _areaRadial.default;
  }
});
Object.defineProperty(exports, "radialArea", {
  enumerable: true,
  get: function () {
    return _areaRadial.default;
  }
});
Object.defineProperty(exports, "lineRadial", {
  enumerable: true,
  get: function () {
    return _lineRadial.default;
  }
});
Object.defineProperty(exports, "radialLine", {
  enumerable: true,
  get: function () {
    return _lineRadial.default;
  }
});
Object.defineProperty(exports, "pointRadial", {
  enumerable: true,
  get: function () {
    return _pointRadial.default;
  }
});
Object.defineProperty(exports, "linkHorizontal", {
  enumerable: true,
  get: function () {
    return _index.linkHorizontal;
  }
});
Object.defineProperty(exports, "linkVertical", {
  enumerable: true,
  get: function () {
    return _index.linkVertical;
  }
});
Object.defineProperty(exports, "linkRadial", {
  enumerable: true,
  get: function () {
    return _index.linkRadial;
  }
});
Object.defineProperty(exports, "symbol", {
  enumerable: true,
  get: function () {
    return _symbol.default;
  }
});
Object.defineProperty(exports, "symbols", {
  enumerable: true,
  get: function () {
    return _symbol.symbols;
  }
});
Object.defineProperty(exports, "symbolCircle", {
  enumerable: true,
  get: function () {
    return _circle.default;
  }
});
Object.defineProperty(exports, "symbolCross", {
  enumerable: true,
  get: function () {
    return _cross.default;
  }
});
Object.defineProperty(exports, "symbolDiamond", {
  enumerable: true,
  get: function () {
    return _diamond.default;
  }
});
Object.defineProperty(exports, "symbolSquare", {
  enumerable: true,
  get: function () {
    return _square.default;
  }
});
Object.defineProperty(exports, "symbolStar", {
  enumerable: true,
  get: function () {
    return _star.default;
  }
});
Object.defineProperty(exports, "symbolTriangle", {
  enumerable: true,
  get: function () {
    return _triangle.default;
  }
});
Object.defineProperty(exports, "symbolWye", {
  enumerable: true,
  get: function () {
    return _wye.default;
  }
});
Object.defineProperty(exports, "curveBasisClosed", {
  enumerable: true,
  get: function () {
    return _basisClosed.default;
  }
});
Object.defineProperty(exports, "curveBasisOpen", {
  enumerable: true,
  get: function () {
    return _basisOpen.default;
  }
});
Object.defineProperty(exports, "curveBasis", {
  enumerable: true,
  get: function () {
    return _basis.default;
  }
});
Object.defineProperty(exports, "curveBundle", {
  enumerable: true,
  get: function () {
    return _bundle.default;
  }
});
Object.defineProperty(exports, "curveCardinalClosed", {
  enumerable: true,
  get: function () {
    return _cardinalClosed.default;
  }
});
Object.defineProperty(exports, "curveCardinalOpen", {
  enumerable: true,
  get: function () {
    return _cardinalOpen.default;
  }
});
Object.defineProperty(exports, "curveCardinal", {
  enumerable: true,
  get: function () {
    return _cardinal.default;
  }
});
Object.defineProperty(exports, "curveCatmullRomClosed", {
  enumerable: true,
  get: function () {
    return _catmullRomClosed.default;
  }
});
Object.defineProperty(exports, "curveCatmullRomOpen", {
  enumerable: true,
  get: function () {
    return _catmullRomOpen.default;
  }
});
Object.defineProperty(exports, "curveCatmullRom", {
  enumerable: true,
  get: function () {
    return _catmullRom.default;
  }
});
Object.defineProperty(exports, "curveLinearClosed", {
  enumerable: true,
  get: function () {
    return _linearClosed.default;
  }
});
Object.defineProperty(exports, "curveLinear", {
  enumerable: true,
  get: function () {
    return _linear.default;
  }
});
Object.defineProperty(exports, "curveMonotoneX", {
  enumerable: true,
  get: function () {
    return _monotone.monotoneX;
  }
});
Object.defineProperty(exports, "curveMonotoneY", {
  enumerable: true,
  get: function () {
    return _monotone.monotoneY;
  }
});
Object.defineProperty(exports, "curveNatural", {
  enumerable: true,
  get: function () {
    return _natural.default;
  }
});
Object.defineProperty(exports, "curveStep", {
  enumerable: true,
  get: function () {
    return _step.default;
  }
});
Object.defineProperty(exports, "curveStepAfter", {
  enumerable: true,
  get: function () {
    return _step.stepAfter;
  }
});
Object.defineProperty(exports, "curveStepBefore", {
  enumerable: true,
  get: function () {
    return _step.stepBefore;
  }
});
Object.defineProperty(exports, "stack", {
  enumerable: true,
  get: function () {
    return _stack.default;
  }
});
Object.defineProperty(exports, "stackOffsetExpand", {
  enumerable: true,
  get: function () {
    return _expand.default;
  }
});
Object.defineProperty(exports, "stackOffsetDiverging", {
  enumerable: true,
  get: function () {
    return _diverging.default;
  }
});
Object.defineProperty(exports, "stackOffsetNone", {
  enumerable: true,
  get: function () {
    return _none.default;
  }
});
Object.defineProperty(exports, "stackOffsetSilhouette", {
  enumerable: true,
  get: function () {
    return _silhouette.default;
  }
});
Object.defineProperty(exports, "stackOffsetWiggle", {
  enumerable: true,
  get: function () {
    return _wiggle.default;
  }
});
Object.defineProperty(exports, "stackOrderAscending", {
  enumerable: true,
  get: function () {
    return _ascending.default;
  }
});
Object.defineProperty(exports, "stackOrderDescending", {
  enumerable: true,
  get: function () {
    return _descending.default;
  }
});
Object.defineProperty(exports, "stackOrderInsideOut", {
  enumerable: true,
  get: function () {
    return _insideOut.default;
  }
});
Object.defineProperty(exports, "stackOrderNone", {
  enumerable: true,
  get: function () {
    return _none2.default;
  }
});
Object.defineProperty(exports, "stackOrderReverse", {
  enumerable: true,
  get: function () {
    return _reverse.default;
  }
});

var _arc = _interopRequireDefault(require("./arc"));

var _area = _interopRequireDefault(require("./area"));

var _line = _interopRequireDefault(require("./line"));

var _pie = _interopRequireDefault(require("./pie"));

var _areaRadial = _interopRequireDefault(require("./areaRadial"));

var _lineRadial = _interopRequireDefault(require("./lineRadial"));

var _pointRadial = _interopRequireDefault(require("./pointRadial"));

var _index = require("./link/index");

var _symbol = _interopRequireWildcard(require("./symbol"));

var _circle = _interopRequireDefault(require("./symbol/circle"));

var _cross = _interopRequireDefault(require("./symbol/cross"));

var _diamond = _interopRequireDefault(require("./symbol/diamond"));

var _square = _interopRequireDefault(require("./symbol/square"));

var _star = _interopRequireDefault(require("./symbol/star"));

var _triangle = _interopRequireDefault(require("./symbol/triangle"));

var _wye = _interopRequireDefault(require("./symbol/wye"));

var _basisClosed = _interopRequireDefault(require("./curve/basisClosed"));

var _basisOpen = _interopRequireDefault(require("./curve/basisOpen"));

var _basis = _interopRequireDefault(require("./curve/basis"));

var _bundle = _interopRequireDefault(require("./curve/bundle"));

var _cardinalClosed = _interopRequireDefault(require("./curve/cardinalClosed"));

var _cardinalOpen = _interopRequireDefault(require("./curve/cardinalOpen"));

var _cardinal = _interopRequireDefault(require("./curve/cardinal"));

var _catmullRomClosed = _interopRequireDefault(require("./curve/catmullRomClosed"));

var _catmullRomOpen = _interopRequireDefault(require("./curve/catmullRomOpen"));

var _catmullRom = _interopRequireDefault(require("./curve/catmullRom"));

var _linearClosed = _interopRequireDefault(require("./curve/linearClosed"));

var _linear = _interopRequireDefault(require("./curve/linear"));

var _monotone = require("./curve/monotone");

var _natural = _interopRequireDefault(require("./curve/natural"));

var _step = _interopRequireWildcard(require("./curve/step"));

var _stack = _interopRequireDefault(require("./stack"));

var _expand = _interopRequireDefault(require("./offset/expand"));

var _diverging = _interopRequireDefault(require("./offset/diverging"));

var _none = _interopRequireDefault(require("./offset/none"));

var _silhouette = _interopRequireDefault(require("./offset/silhouette"));

var _wiggle = _interopRequireDefault(require("./offset/wiggle"));

var _ascending = _interopRequireDefault(require("./order/ascending"));

var _descending = _interopRequireDefault(require("./order/descending"));

var _insideOut = _interopRequireDefault(require("./order/insideOut"));

var _none2 = _interopRequireDefault(require("./order/none"));

var _reverse = _interopRequireDefault(require("./order/reverse"));

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
},{"./arc":"TV07","./area":"UWil","./line":"Ume/","./pie":"5OJY","./areaRadial":"7HIq","./lineRadial":"p8dR","./pointRadial":"wQOf","./link/index":"CMsX","./symbol":"XBPQ","./symbol/circle":"NEs3","./symbol/cross":"57OD","./symbol/diamond":"nSnU","./symbol/square":"lQ43","./symbol/star":"3SkC","./symbol/triangle":"Z5S+","./symbol/wye":"JWBh","./curve/basisClosed":"WkDE","./curve/basisOpen":"+5Gg","./curve/basis":"XakR","./curve/bundle":"eh91","./curve/cardinalClosed":"euEz","./curve/cardinalOpen":"it46","./curve/cardinal":"fNTp","./curve/catmullRomClosed":"41Cs","./curve/catmullRomOpen":"Vf6b","./curve/catmullRom":"oWDJ","./curve/linearClosed":"QDqS","./curve/linear":"4VCF","./curve/monotone":"7Vae","./curve/natural":"0T3B","./curve/step":"UYn4","./stack":"S7q8","./offset/expand":"2jY6","./offset/diverging":"P+6Q","./offset/none":"x5Mk","./offset/silhouette":"sf4d","./offset/wiggle":"EH71","./order/ascending":"4koe","./order/descending":"i2th","./order/insideOut":"msEL","./order/none":"0IgC","./order/reverse":"w5Iz"}],"mmRi":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.x = x;
exports.y = y;

function x(d) {
  return d[0];
}

function y(d) {
  return d[1];
}
},{}],"cyhV":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.RedBlackNode = RedBlackNode;
exports.default = void 0;

function RedBlackTree() {
  this._ = null; // root node
}

function RedBlackNode(node) {
  node.U = // parent node
  node.C = // color - true for red, false for black
  node.L = // left node
  node.R = // right node
  node.P = // previous node
  node.N = null; // next node
}

RedBlackTree.prototype = {
  constructor: RedBlackTree,
  insert: function (after, node) {
    var parent, grandpa, uncle;

    if (after) {
      node.P = after;
      node.N = after.N;
      if (after.N) after.N.P = node;
      after.N = node;

      if (after.R) {
        after = after.R;

        while (after.L) after = after.L;

        after.L = node;
      } else {
        after.R = node;
      }

      parent = after;
    } else if (this._) {
      after = RedBlackFirst(this._);
      node.P = null;
      node.N = after;
      after.P = after.L = node;
      parent = after;
    } else {
      node.P = node.N = null;
      this._ = node;
      parent = null;
    }

    node.L = node.R = null;
    node.U = parent;
    node.C = true;
    after = node;

    while (parent && parent.C) {
      grandpa = parent.U;

      if (parent === grandpa.L) {
        uncle = grandpa.R;

        if (uncle && uncle.C) {
          parent.C = uncle.C = false;
          grandpa.C = true;
          after = grandpa;
        } else {
          if (after === parent.R) {
            RedBlackRotateLeft(this, parent);
            after = parent;
            parent = after.U;
          }

          parent.C = false;
          grandpa.C = true;
          RedBlackRotateRight(this, grandpa);
        }
      } else {
        uncle = grandpa.L;

        if (uncle && uncle.C) {
          parent.C = uncle.C = false;
          grandpa.C = true;
          after = grandpa;
        } else {
          if (after === parent.L) {
            RedBlackRotateRight(this, parent);
            after = parent;
            parent = after.U;
          }

          parent.C = false;
          grandpa.C = true;
          RedBlackRotateLeft(this, grandpa);
        }
      }

      parent = after.U;
    }

    this._.C = false;
  },
  remove: function (node) {
    if (node.N) node.N.P = node.P;
    if (node.P) node.P.N = node.N;
    node.N = node.P = null;
    var parent = node.U,
        sibling,
        left = node.L,
        right = node.R,
        next,
        red;
    if (!left) next = right;else if (!right) next = left;else next = RedBlackFirst(right);

    if (parent) {
      if (parent.L === node) parent.L = next;else parent.R = next;
    } else {
      this._ = next;
    }

    if (left && right) {
      red = next.C;
      next.C = node.C;
      next.L = left;
      left.U = next;

      if (next !== right) {
        parent = next.U;
        next.U = node.U;
        node = next.R;
        parent.L = node;
        next.R = right;
        right.U = next;
      } else {
        next.U = parent;
        parent = next;
        node = next.R;
      }
    } else {
      red = node.C;
      node = next;
    }

    if (node) node.U = parent;
    if (red) return;

    if (node && node.C) {
      node.C = false;
      return;
    }

    do {
      if (node === this._) break;

      if (node === parent.L) {
        sibling = parent.R;

        if (sibling.C) {
          sibling.C = false;
          parent.C = true;
          RedBlackRotateLeft(this, parent);
          sibling = parent.R;
        }

        if (sibling.L && sibling.L.C || sibling.R && sibling.R.C) {
          if (!sibling.R || !sibling.R.C) {
            sibling.L.C = false;
            sibling.C = true;
            RedBlackRotateRight(this, sibling);
            sibling = parent.R;
          }

          sibling.C = parent.C;
          parent.C = sibling.R.C = false;
          RedBlackRotateLeft(this, parent);
          node = this._;
          break;
        }
      } else {
        sibling = parent.L;

        if (sibling.C) {
          sibling.C = false;
          parent.C = true;
          RedBlackRotateRight(this, parent);
          sibling = parent.L;
        }

        if (sibling.L && sibling.L.C || sibling.R && sibling.R.C) {
          if (!sibling.L || !sibling.L.C) {
            sibling.R.C = false;
            sibling.C = true;
            RedBlackRotateLeft(this, sibling);
            sibling = parent.L;
          }

          sibling.C = parent.C;
          parent.C = sibling.L.C = false;
          RedBlackRotateRight(this, parent);
          node = this._;
          break;
        }
      }

      sibling.C = true;
      node = parent;
      parent = parent.U;
    } while (!node.C);

    if (node) node.C = false;
  }
};

function RedBlackRotateLeft(tree, node) {
  var p = node,
      q = node.R,
      parent = p.U;

  if (parent) {
    if (parent.L === p) parent.L = q;else parent.R = q;
  } else {
    tree._ = q;
  }

  q.U = parent;
  p.U = q;
  p.R = q.L;
  if (p.R) p.R.U = p;
  q.L = p;
}

function RedBlackRotateRight(tree, node) {
  var p = node,
      q = node.L,
      parent = p.U;

  if (parent) {
    if (parent.L === p) parent.L = q;else parent.R = q;
  } else {
    tree._ = q;
  }

  q.U = parent;
  p.U = q;
  p.L = q.R;
  if (p.L) p.L.U = p;
  q.R = p;
}

function RedBlackFirst(node) {
  while (node.L) node = node.L;

  return node;
}

var _default = RedBlackTree;
exports.default = _default;
},{}],"7Tkp":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createEdge = createEdge;
exports.createBorderEdge = createBorderEdge;
exports.setEdgeEnd = setEdgeEnd;
exports.clipEdges = clipEdges;

var _Diagram = require("./Diagram");

function createEdge(left, right, v0, v1) {
  var edge = [null, null],
      index = _Diagram.edges.push(edge) - 1;
  edge.left = left;
  edge.right = right;
  if (v0) setEdgeEnd(edge, left, right, v0);
  if (v1) setEdgeEnd(edge, right, left, v1);

  _Diagram.cells[left.index].halfedges.push(index);

  _Diagram.cells[right.index].halfedges.push(index);

  return edge;
}

function createBorderEdge(left, v0, v1) {
  var edge = [v0, v1];
  edge.left = left;
  return edge;
}

function setEdgeEnd(edge, left, right, vertex) {
  if (!edge[0] && !edge[1]) {
    edge[0] = vertex;
    edge.left = left;
    edge.right = right;
  } else if (edge.left === right) {
    edge[1] = vertex;
  } else {
    edge[0] = vertex;
  }
} // Liang–Barsky line clipping.


function clipEdge(edge, x0, y0, x1, y1) {
  var a = edge[0],
      b = edge[1],
      ax = a[0],
      ay = a[1],
      bx = b[0],
      by = b[1],
      t0 = 0,
      t1 = 1,
      dx = bx - ax,
      dy = by - ay,
      r;
  r = x0 - ax;
  if (!dx && r > 0) return;
  r /= dx;

  if (dx < 0) {
    if (r < t0) return;
    if (r < t1) t1 = r;
  } else if (dx > 0) {
    if (r > t1) return;
    if (r > t0) t0 = r;
  }

  r = x1 - ax;
  if (!dx && r < 0) return;
  r /= dx;

  if (dx < 0) {
    if (r > t1) return;
    if (r > t0) t0 = r;
  } else if (dx > 0) {
    if (r < t0) return;
    if (r < t1) t1 = r;
  }

  r = y0 - ay;
  if (!dy && r > 0) return;
  r /= dy;

  if (dy < 0) {
    if (r < t0) return;
    if (r < t1) t1 = r;
  } else if (dy > 0) {
    if (r > t1) return;
    if (r > t0) t0 = r;
  }

  r = y1 - ay;
  if (!dy && r < 0) return;
  r /= dy;

  if (dy < 0) {
    if (r > t1) return;
    if (r > t0) t0 = r;
  } else if (dy > 0) {
    if (r < t0) return;
    if (r < t1) t1 = r;
  }

  if (!(t0 > 0) && !(t1 < 1)) return true; // TODO Better check?

  if (t0 > 0) edge[0] = [ax + t0 * dx, ay + t0 * dy];
  if (t1 < 1) edge[1] = [ax + t1 * dx, ay + t1 * dy];
  return true;
}

function connectEdge(edge, x0, y0, x1, y1) {
  var v1 = edge[1];
  if (v1) return true;
  var v0 = edge[0],
      left = edge.left,
      right = edge.right,
      lx = left[0],
      ly = left[1],
      rx = right[0],
      ry = right[1],
      fx = (lx + rx) / 2,
      fy = (ly + ry) / 2,
      fm,
      fb;

  if (ry === ly) {
    if (fx < x0 || fx >= x1) return;

    if (lx > rx) {
      if (!v0) v0 = [fx, y0];else if (v0[1] >= y1) return;
      v1 = [fx, y1];
    } else {
      if (!v0) v0 = [fx, y1];else if (v0[1] < y0) return;
      v1 = [fx, y0];
    }
  } else {
    fm = (lx - rx) / (ry - ly);
    fb = fy - fm * fx;

    if (fm < -1 || fm > 1) {
      if (lx > rx) {
        if (!v0) v0 = [(y0 - fb) / fm, y0];else if (v0[1] >= y1) return;
        v1 = [(y1 - fb) / fm, y1];
      } else {
        if (!v0) v0 = [(y1 - fb) / fm, y1];else if (v0[1] < y0) return;
        v1 = [(y0 - fb) / fm, y0];
      }
    } else {
      if (ly < ry) {
        if (!v0) v0 = [x0, fm * x0 + fb];else if (v0[0] >= x1) return;
        v1 = [x1, fm * x1 + fb];
      } else {
        if (!v0) v0 = [x1, fm * x1 + fb];else if (v0[0] < x0) return;
        v1 = [x0, fm * x0 + fb];
      }
    }
  }

  edge[0] = v0;
  edge[1] = v1;
  return true;
}

function clipEdges(x0, y0, x1, y1) {
  var i = _Diagram.edges.length,
      edge;

  while (i--) {
    if (!connectEdge(edge = _Diagram.edges[i], x0, y0, x1, y1) || !clipEdge(edge, x0, y0, x1, y1) || !(Math.abs(edge[0][0] - edge[1][0]) > _Diagram.epsilon || Math.abs(edge[0][1] - edge[1][1]) > _Diagram.epsilon)) {
      delete _Diagram.edges[i];
    }
  }
}
},{"./Diagram":"Jn8D"}],"8zWB":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createCell = createCell;
exports.cellHalfedgeStart = cellHalfedgeStart;
exports.cellHalfedgeEnd = cellHalfedgeEnd;
exports.sortCellHalfedges = sortCellHalfedges;
exports.clipCells = clipCells;

var _Edge = require("./Edge");

var _Diagram = require("./Diagram");

function createCell(site) {
  return _Diagram.cells[site.index] = {
    site: site,
    halfedges: []
  };
}

function cellHalfedgeAngle(cell, edge) {
  var site = cell.site,
      va = edge.left,
      vb = edge.right;
  if (site === vb) vb = va, va = site;
  if (vb) return Math.atan2(vb[1] - va[1], vb[0] - va[0]);
  if (site === va) va = edge[1], vb = edge[0];else va = edge[0], vb = edge[1];
  return Math.atan2(va[0] - vb[0], vb[1] - va[1]);
}

function cellHalfedgeStart(cell, edge) {
  return edge[+(edge.left !== cell.site)];
}

function cellHalfedgeEnd(cell, edge) {
  return edge[+(edge.left === cell.site)];
}

function sortCellHalfedges() {
  for (var i = 0, n = _Diagram.cells.length, cell, halfedges, j, m; i < n; ++i) {
    if ((cell = _Diagram.cells[i]) && (m = (halfedges = cell.halfedges).length)) {
      var index = new Array(m),
          array = new Array(m);

      for (j = 0; j < m; ++j) index[j] = j, array[j] = cellHalfedgeAngle(cell, _Diagram.edges[halfedges[j]]);

      index.sort(function (i, j) {
        return array[j] - array[i];
      });

      for (j = 0; j < m; ++j) array[j] = halfedges[index[j]];

      for (j = 0; j < m; ++j) halfedges[j] = array[j];
    }
  }
}

function clipCells(x0, y0, x1, y1) {
  var nCells = _Diagram.cells.length,
      iCell,
      cell,
      site,
      iHalfedge,
      halfedges,
      nHalfedges,
      start,
      startX,
      startY,
      end,
      endX,
      endY,
      cover = true;

  for (iCell = 0; iCell < nCells; ++iCell) {
    if (cell = _Diagram.cells[iCell]) {
      site = cell.site;
      halfedges = cell.halfedges;
      iHalfedge = halfedges.length; // Remove any dangling clipped edges.

      while (iHalfedge--) {
        if (!_Diagram.edges[halfedges[iHalfedge]]) {
          halfedges.splice(iHalfedge, 1);
        }
      } // Insert any border edges as necessary.


      iHalfedge = 0, nHalfedges = halfedges.length;

      while (iHalfedge < nHalfedges) {
        end = cellHalfedgeEnd(cell, _Diagram.edges[halfedges[iHalfedge]]), endX = end[0], endY = end[1];
        start = cellHalfedgeStart(cell, _Diagram.edges[halfedges[++iHalfedge % nHalfedges]]), startX = start[0], startY = start[1];

        if (Math.abs(endX - startX) > _Diagram.epsilon || Math.abs(endY - startY) > _Diagram.epsilon) {
          halfedges.splice(iHalfedge, 0, _Diagram.edges.push((0, _Edge.createBorderEdge)(site, end, Math.abs(endX - x0) < _Diagram.epsilon && y1 - endY > _Diagram.epsilon ? [x0, Math.abs(startX - x0) < _Diagram.epsilon ? startY : y1] : Math.abs(endY - y1) < _Diagram.epsilon && x1 - endX > _Diagram.epsilon ? [Math.abs(startY - y1) < _Diagram.epsilon ? startX : x1, y1] : Math.abs(endX - x1) < _Diagram.epsilon && endY - y0 > _Diagram.epsilon ? [x1, Math.abs(startX - x1) < _Diagram.epsilon ? startY : y0] : Math.abs(endY - y0) < _Diagram.epsilon && endX - x0 > _Diagram.epsilon ? [Math.abs(startY - y0) < _Diagram.epsilon ? startX : x0, y0] : null)) - 1);
          ++nHalfedges;
        }
      }

      if (nHalfedges) cover = false;
    }
  } // If there weren’t any edges, have the closest site cover the extent.
  // It doesn’t matter which corner of the extent we measure!


  if (cover) {
    var dx,
        dy,
        d2,
        dc = Infinity;

    for (iCell = 0, cover = null; iCell < nCells; ++iCell) {
      if (cell = _Diagram.cells[iCell]) {
        site = cell.site;
        dx = site[0] - x0;
        dy = site[1] - y0;
        d2 = dx * dx + dy * dy;
        if (d2 < dc) dc = d2, cover = cell;
      }
    }

    if (cover) {
      var v00 = [x0, y0],
          v01 = [x0, y1],
          v11 = [x1, y1],
          v10 = [x1, y0];
      cover.halfedges.push(_Diagram.edges.push((0, _Edge.createBorderEdge)(site = cover.site, v00, v01)) - 1, _Diagram.edges.push((0, _Edge.createBorderEdge)(site, v01, v11)) - 1, _Diagram.edges.push((0, _Edge.createBorderEdge)(site, v11, v10)) - 1, _Diagram.edges.push((0, _Edge.createBorderEdge)(site, v10, v00)) - 1);
    }
  } // Lastly delete any cells with no edges; these were entirely clipped.


  for (iCell = 0; iCell < nCells; ++iCell) {
    if (cell = _Diagram.cells[iCell]) {
      if (!cell.halfedges.length) {
        delete _Diagram.cells[iCell];
      }
    }
  }
}
},{"./Edge":"7Tkp","./Diagram":"Jn8D"}],"Hzn+":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.attachCircle = attachCircle;
exports.detachCircle = detachCircle;
exports.firstCircle = void 0;

var _RedBlackTree = require("./RedBlackTree");

var _Diagram = require("./Diagram");

var circlePool = [];
var firstCircle;
exports.firstCircle = firstCircle;

function Circle() {
  (0, _RedBlackTree.RedBlackNode)(this);
  this.x = this.y = this.arc = this.site = this.cy = null;
}

function attachCircle(arc) {
  var lArc = arc.P,
      rArc = arc.N;
  if (!lArc || !rArc) return;
  var lSite = lArc.site,
      cSite = arc.site,
      rSite = rArc.site;
  if (lSite === rSite) return;
  var bx = cSite[0],
      by = cSite[1],
      ax = lSite[0] - bx,
      ay = lSite[1] - by,
      cx = rSite[0] - bx,
      cy = rSite[1] - by;
  var d = 2 * (ax * cy - ay * cx);
  if (d >= -_Diagram.epsilon2) return;
  var ha = ax * ax + ay * ay,
      hc = cx * cx + cy * cy,
      x = (cy * ha - ay * hc) / d,
      y = (ax * hc - cx * ha) / d;
  var circle = circlePool.pop() || new Circle();
  circle.arc = arc;
  circle.site = cSite;
  circle.x = x + bx;
  circle.y = (circle.cy = y + by) + Math.sqrt(x * x + y * y); // y bottom

  arc.circle = circle;
  var before = null,
      node = _Diagram.circles._;

  while (node) {
    if (circle.y < node.y || circle.y === node.y && circle.x <= node.x) {
      if (node.L) node = node.L;else {
        before = node.P;
        break;
      }
    } else {
      if (node.R) node = node.R;else {
        before = node;
        break;
      }
    }
  }

  _Diagram.circles.insert(before, circle);

  if (!before) exports.firstCircle = firstCircle = circle;
}

function detachCircle(arc) {
  var circle = arc.circle;

  if (circle) {
    if (!circle.P) exports.firstCircle = firstCircle = circle.N;

    _Diagram.circles.remove(circle);

    circlePool.push(circle);
    (0, _RedBlackTree.RedBlackNode)(circle);
    arc.circle = null;
  }
}
},{"./RedBlackTree":"cyhV","./Diagram":"Jn8D"}],"vrdo":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.removeBeach = removeBeach;
exports.addBeach = addBeach;

var _RedBlackTree = require("./RedBlackTree");

var _Cell = require("./Cell");

var _Circle = require("./Circle");

var _Edge = require("./Edge");

var _Diagram = require("./Diagram");

var beachPool = [];

function Beach() {
  (0, _RedBlackTree.RedBlackNode)(this);
  this.edge = this.site = this.circle = null;
}

function createBeach(site) {
  var beach = beachPool.pop() || new Beach();
  beach.site = site;
  return beach;
}

function detachBeach(beach) {
  (0, _Circle.detachCircle)(beach);

  _Diagram.beaches.remove(beach);

  beachPool.push(beach);
  (0, _RedBlackTree.RedBlackNode)(beach);
}

function removeBeach(beach) {
  var circle = beach.circle,
      x = circle.x,
      y = circle.cy,
      vertex = [x, y],
      previous = beach.P,
      next = beach.N,
      disappearing = [beach];
  detachBeach(beach);
  var lArc = previous;

  while (lArc.circle && Math.abs(x - lArc.circle.x) < _Diagram.epsilon && Math.abs(y - lArc.circle.cy) < _Diagram.epsilon) {
    previous = lArc.P;
    disappearing.unshift(lArc);
    detachBeach(lArc);
    lArc = previous;
  }

  disappearing.unshift(lArc);
  (0, _Circle.detachCircle)(lArc);
  var rArc = next;

  while (rArc.circle && Math.abs(x - rArc.circle.x) < _Diagram.epsilon && Math.abs(y - rArc.circle.cy) < _Diagram.epsilon) {
    next = rArc.N;
    disappearing.push(rArc);
    detachBeach(rArc);
    rArc = next;
  }

  disappearing.push(rArc);
  (0, _Circle.detachCircle)(rArc);
  var nArcs = disappearing.length,
      iArc;

  for (iArc = 1; iArc < nArcs; ++iArc) {
    rArc = disappearing[iArc];
    lArc = disappearing[iArc - 1];
    (0, _Edge.setEdgeEnd)(rArc.edge, lArc.site, rArc.site, vertex);
  }

  lArc = disappearing[0];
  rArc = disappearing[nArcs - 1];
  rArc.edge = (0, _Edge.createEdge)(lArc.site, rArc.site, null, vertex);
  (0, _Circle.attachCircle)(lArc);
  (0, _Circle.attachCircle)(rArc);
}

function addBeach(site) {
  var x = site[0],
      directrix = site[1],
      lArc,
      rArc,
      dxl,
      dxr,
      node = _Diagram.beaches._;

  while (node) {
    dxl = leftBreakPoint(node, directrix) - x;
    if (dxl > _Diagram.epsilon) node = node.L;else {
      dxr = x - rightBreakPoint(node, directrix);

      if (dxr > _Diagram.epsilon) {
        if (!node.R) {
          lArc = node;
          break;
        }

        node = node.R;
      } else {
        if (dxl > -_Diagram.epsilon) {
          lArc = node.P;
          rArc = node;
        } else if (dxr > -_Diagram.epsilon) {
          lArc = node;
          rArc = node.N;
        } else {
          lArc = rArc = node;
        }

        break;
      }
    }
  }

  (0, _Cell.createCell)(site);
  var newArc = createBeach(site);

  _Diagram.beaches.insert(lArc, newArc);

  if (!lArc && !rArc) return;

  if (lArc === rArc) {
    (0, _Circle.detachCircle)(lArc);
    rArc = createBeach(lArc.site);

    _Diagram.beaches.insert(newArc, rArc);

    newArc.edge = rArc.edge = (0, _Edge.createEdge)(lArc.site, newArc.site);
    (0, _Circle.attachCircle)(lArc);
    (0, _Circle.attachCircle)(rArc);
    return;
  }

  if (!rArc) {
    // && lArc
    newArc.edge = (0, _Edge.createEdge)(lArc.site, newArc.site);
    return;
  } // else lArc !== rArc


  (0, _Circle.detachCircle)(lArc);
  (0, _Circle.detachCircle)(rArc);
  var lSite = lArc.site,
      ax = lSite[0],
      ay = lSite[1],
      bx = site[0] - ax,
      by = site[1] - ay,
      rSite = rArc.site,
      cx = rSite[0] - ax,
      cy = rSite[1] - ay,
      d = 2 * (bx * cy - by * cx),
      hb = bx * bx + by * by,
      hc = cx * cx + cy * cy,
      vertex = [(cy * hb - by * hc) / d + ax, (bx * hc - cx * hb) / d + ay];
  (0, _Edge.setEdgeEnd)(rArc.edge, lSite, rSite, vertex);
  newArc.edge = (0, _Edge.createEdge)(lSite, site, null, vertex);
  rArc.edge = (0, _Edge.createEdge)(site, rSite, null, vertex);
  (0, _Circle.attachCircle)(lArc);
  (0, _Circle.attachCircle)(rArc);
}

function leftBreakPoint(arc, directrix) {
  var site = arc.site,
      rfocx = site[0],
      rfocy = site[1],
      pby2 = rfocy - directrix;
  if (!pby2) return rfocx;
  var lArc = arc.P;
  if (!lArc) return -Infinity;
  site = lArc.site;
  var lfocx = site[0],
      lfocy = site[1],
      plby2 = lfocy - directrix;
  if (!plby2) return lfocx;
  var hl = lfocx - rfocx,
      aby2 = 1 / pby2 - 1 / plby2,
      b = hl / plby2;
  if (aby2) return (-b + Math.sqrt(b * b - 2 * aby2 * (hl * hl / (-2 * plby2) - lfocy + plby2 / 2 + rfocy - pby2 / 2))) / aby2 + rfocx;
  return (rfocx + lfocx) / 2;
}

function rightBreakPoint(arc, directrix) {
  var rArc = arc.N;
  if (rArc) return leftBreakPoint(rArc, directrix);
  var site = arc.site;
  return site[1] === directrix ? site[0] : Infinity;
}
},{"./RedBlackTree":"cyhV","./Cell":"8zWB","./Circle":"Hzn+","./Edge":"7Tkp","./Diagram":"Jn8D"}],"Jn8D":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = Diagram;
exports.edges = exports.circles = exports.cells = exports.beaches = exports.epsilon2 = exports.epsilon = void 0;

var _Beach = require("./Beach");

var _Cell = require("./Cell");

var _Circle = require("./Circle");

var _Edge = require("./Edge");

var _RedBlackTree = _interopRequireDefault(require("./RedBlackTree"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var epsilon = 1e-6;
exports.epsilon = epsilon;
var epsilon2 = 1e-12;
exports.epsilon2 = epsilon2;
var beaches;
exports.beaches = beaches;
var cells;
exports.cells = cells;
var circles;
exports.circles = circles;
var edges;
exports.edges = edges;

function triangleArea(a, b, c) {
  return (a[0] - c[0]) * (b[1] - a[1]) - (a[0] - b[0]) * (c[1] - a[1]);
}

function lexicographic(a, b) {
  return b[1] - a[1] || b[0] - a[0];
}

function Diagram(sites, extent) {
  var site = sites.sort(lexicographic).pop(),
      x,
      y,
      circle;
  exports.edges = edges = [];
  exports.cells = cells = new Array(sites.length);
  exports.beaches = beaches = new _RedBlackTree.default();
  exports.circles = circles = new _RedBlackTree.default();

  while (true) {
    circle = _Circle.firstCircle;

    if (site && (!circle || site[1] < circle.y || site[1] === circle.y && site[0] < circle.x)) {
      if (site[0] !== x || site[1] !== y) {
        (0, _Beach.addBeach)(site);
        x = site[0], y = site[1];
      }

      site = sites.pop();
    } else if (circle) {
      (0, _Beach.removeBeach)(circle.arc);
    } else {
      break;
    }
  }

  (0, _Cell.sortCellHalfedges)();

  if (extent) {
    var x0 = +extent[0][0],
        y0 = +extent[0][1],
        x1 = +extent[1][0],
        y1 = +extent[1][1];
    (0, _Edge.clipEdges)(x0, y0, x1, y1);
    (0, _Cell.clipCells)(x0, y0, x1, y1);
  }

  this.edges = edges;
  this.cells = cells;
  exports.beaches = beaches = exports.circles = circles = exports.edges = edges = exports.cells = cells = null;
}

Diagram.prototype = {
  constructor: Diagram,
  polygons: function () {
    var edges = this.edges;
    return this.cells.map(function (cell) {
      var polygon = cell.halfedges.map(function (i) {
        return (0, _Cell.cellHalfedgeStart)(cell, edges[i]);
      });
      polygon.data = cell.site.data;
      return polygon;
    });
  },
  triangles: function () {
    var triangles = [],
        edges = this.edges;
    this.cells.forEach(function (cell, i) {
      if (!(m = (halfedges = cell.halfedges).length)) return;
      var site = cell.site,
          halfedges,
          j = -1,
          m,
          s0,
          e1 = edges[halfedges[m - 1]],
          s1 = e1.left === site ? e1.right : e1.left;

      while (++j < m) {
        s0 = s1;
        e1 = edges[halfedges[j]];
        s1 = e1.left === site ? e1.right : e1.left;

        if (s0 && s1 && i < s0.index && i < s1.index && triangleArea(site, s0, s1) < 0) {
          triangles.push([site.data, s0.data, s1.data]);
        }
      }
    });
    return triangles;
  },
  links: function () {
    return this.edges.filter(function (edge) {
      return edge.right;
    }).map(function (edge) {
      return {
        source: edge.left.data,
        target: edge.right.data
      };
    });
  },
  find: function (x, y, radius) {
    var that = this,
        i0,
        i1 = that._found || 0,
        n = that.cells.length,
        cell; // Use the previously-found cell, or start with an arbitrary one.

    while (!(cell = that.cells[i1])) if (++i1 >= n) return null;

    var dx = x - cell.site[0],
        dy = y - cell.site[1],
        d2 = dx * dx + dy * dy; // Traverse the half-edges to find a closer cell, if any.

    do {
      cell = that.cells[i0 = i1], i1 = null;
      cell.halfedges.forEach(function (e) {
        var edge = that.edges[e],
            v = edge.left;
        if ((v === cell.site || !v) && !(v = edge.right)) return;
        var vx = x - v[0],
            vy = y - v[1],
            v2 = vx * vx + vy * vy;
        if (v2 < d2) d2 = v2, i1 = v.index;
      });
    } while (i1 !== null);

    that._found = i0;
    return radius == null || d2 <= radius * radius ? cell.site : null;
  }
};
},{"./Beach":"vrdo","./Cell":"8zWB","./Circle":"Hzn+","./Edge":"7Tkp","./RedBlackTree":"cyhV"}],"rzeD":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _constant = _interopRequireDefault(require("./constant"));

var _point = require("./point");

var _Diagram = _interopRequireWildcard(require("./Diagram"));

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default() {
  var x = _point.x,
      y = _point.y,
      extent = null;

  function voronoi(data) {
    return new _Diagram.default(data.map(function (d, i) {
      var s = [Math.round(x(d, i, data) / _Diagram.epsilon) * _Diagram.epsilon, Math.round(y(d, i, data) / _Diagram.epsilon) * _Diagram.epsilon];
      s.index = i;
      s.data = d;
      return s;
    }), extent);
  }

  voronoi.polygons = function (data) {
    return voronoi(data).polygons();
  };

  voronoi.links = function (data) {
    return voronoi(data).links();
  };

  voronoi.triangles = function (data) {
    return voronoi(data).triangles();
  };

  voronoi.x = function (_) {
    return arguments.length ? (x = typeof _ === "function" ? _ : (0, _constant.default)(+_), voronoi) : x;
  };

  voronoi.y = function (_) {
    return arguments.length ? (y = typeof _ === "function" ? _ : (0, _constant.default)(+_), voronoi) : y;
  };

  voronoi.extent = function (_) {
    return arguments.length ? (extent = _ == null ? null : [[+_[0][0], +_[0][1]], [+_[1][0], +_[1][1]]], voronoi) : extent && [[extent[0][0], extent[0][1]], [extent[1][0], extent[1][1]]];
  };

  voronoi.size = function (_) {
    return arguments.length ? (extent = _ == null ? null : [[0, 0], [+_[0], +_[1]]], voronoi) : extent && [extent[1][0] - extent[0][0], extent[1][1] - extent[0][1]];
  };

  return voronoi;
}
},{"./constant":"5O/Y","./point":"mmRi","./Diagram":"Jn8D"}],"AKDj":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "voronoi", {
  enumerable: true,
  get: function () {
    return _voronoi.default;
  }
});

var _voronoi = _interopRequireDefault(require("./voronoi"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
},{"./voronoi":"rzeD"}],"pmu8":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = ZoomEvent;

function ZoomEvent(target, type, transform) {
  this.target = target;
  this.type = type;
  this.transform = transform;
}
},{}],"RGu5":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Transform = Transform;
exports.default = transform;
exports.identity = void 0;

function Transform(k, x, y) {
  this.k = k;
  this.x = x;
  this.y = y;
}

Transform.prototype = {
  constructor: Transform,
  scale: function (k) {
    return k === 1 ? this : new Transform(this.k * k, this.x, this.y);
  },
  translate: function (x, y) {
    return x === 0 & y === 0 ? this : new Transform(this.k, this.x + this.k * x, this.y + this.k * y);
  },
  apply: function (point) {
    return [point[0] * this.k + this.x, point[1] * this.k + this.y];
  },
  applyX: function (x) {
    return x * this.k + this.x;
  },
  applyY: function (y) {
    return y * this.k + this.y;
  },
  invert: function (location) {
    return [(location[0] - this.x) / this.k, (location[1] - this.y) / this.k];
  },
  invertX: function (x) {
    return (x - this.x) / this.k;
  },
  invertY: function (y) {
    return (y - this.y) / this.k;
  },
  rescaleX: function (x) {
    return x.copy().domain(x.range().map(this.invertX, this).map(x.invert, x));
  },
  rescaleY: function (y) {
    return y.copy().domain(y.range().map(this.invertY, this).map(y.invert, y));
  },
  toString: function () {
    return "translate(" + this.x + "," + this.y + ") scale(" + this.k + ")";
  }
};
var identity = new Transform(1, 0, 0);
exports.identity = identity;
transform.prototype = Transform.prototype;

function transform(node) {
  return node.__zoom || identity;
}
},{}],"T0tZ":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _d3Dispatch = require("d3-dispatch");

var _d3Drag = require("d3-drag");

var _d3Interpolate = require("d3-interpolate");

var _d3Selection = require("d3-selection");

var _d3Transition = require("d3-transition");

var _constant = _interopRequireDefault(require("./constant"));

var _event = _interopRequireDefault(require("./event"));

var _transform = require("./transform");

var _noevent = _interopRequireWildcard(require("./noevent"));

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Ignore right-click, since that should open the context menu.
function defaultFilter() {
  return !_d3Selection.event.button;
}

function defaultExtent() {
  var e = this,
      w,
      h;

  if (e instanceof SVGElement) {
    e = e.ownerSVGElement || e;
    w = e.width.baseVal.value;
    h = e.height.baseVal.value;
  } else {
    w = e.clientWidth;
    h = e.clientHeight;
  }

  return [[0, 0], [w, h]];
}

function defaultTransform() {
  return this.__zoom || _transform.identity;
}

function defaultWheelDelta() {
  return -_d3Selection.event.deltaY * (_d3Selection.event.deltaMode ? 120 : 1) / 500;
}

function defaultTouchable() {
  return "ontouchstart" in this;
}

function defaultConstrain(transform, extent, translateExtent) {
  var dx0 = transform.invertX(extent[0][0]) - translateExtent[0][0],
      dx1 = transform.invertX(extent[1][0]) - translateExtent[1][0],
      dy0 = transform.invertY(extent[0][1]) - translateExtent[0][1],
      dy1 = transform.invertY(extent[1][1]) - translateExtent[1][1];
  return transform.translate(dx1 > dx0 ? (dx0 + dx1) / 2 : Math.min(0, dx0) || Math.max(0, dx1), dy1 > dy0 ? (dy0 + dy1) / 2 : Math.min(0, dy0) || Math.max(0, dy1));
}

function _default() {
  var filter = defaultFilter,
      extent = defaultExtent,
      constrain = defaultConstrain,
      wheelDelta = defaultWheelDelta,
      touchable = defaultTouchable,
      scaleExtent = [0, Infinity],
      translateExtent = [[-Infinity, -Infinity], [Infinity, Infinity]],
      duration = 250,
      interpolate = _d3Interpolate.interpolateZoom,
      gestures = [],
      listeners = (0, _d3Dispatch.dispatch)("start", "zoom", "end"),
      touchstarting,
      touchending,
      touchDelay = 500,
      wheelDelay = 150,
      clickDistance2 = 0;

  function zoom(selection) {
    selection.property("__zoom", defaultTransform).on("wheel.zoom", wheeled).on("mousedown.zoom", mousedowned).on("dblclick.zoom", dblclicked).filter(touchable).on("touchstart.zoom", touchstarted).on("touchmove.zoom", touchmoved).on("touchend.zoom touchcancel.zoom", touchended).style("touch-action", "none").style("-webkit-tap-highlight-color", "rgba(0,0,0,0)");
  }

  zoom.transform = function (collection, transform) {
    var selection = collection.selection ? collection.selection() : collection;
    selection.property("__zoom", defaultTransform);

    if (collection !== selection) {
      schedule(collection, transform);
    } else {
      selection.interrupt().each(function () {
        gesture(this, arguments).start().zoom(null, typeof transform === "function" ? transform.apply(this, arguments) : transform).end();
      });
    }
  };

  zoom.scaleBy = function (selection, k) {
    zoom.scaleTo(selection, function () {
      var k0 = this.__zoom.k,
          k1 = typeof k === "function" ? k.apply(this, arguments) : k;
      return k0 * k1;
    });
  };

  zoom.scaleTo = function (selection, k) {
    zoom.transform(selection, function () {
      var e = extent.apply(this, arguments),
          t0 = this.__zoom,
          p0 = centroid(e),
          p1 = t0.invert(p0),
          k1 = typeof k === "function" ? k.apply(this, arguments) : k;
      return constrain(translate(scale(t0, k1), p0, p1), e, translateExtent);
    });
  };

  zoom.translateBy = function (selection, x, y) {
    zoom.transform(selection, function () {
      return constrain(this.__zoom.translate(typeof x === "function" ? x.apply(this, arguments) : x, typeof y === "function" ? y.apply(this, arguments) : y), extent.apply(this, arguments), translateExtent);
    });
  };

  zoom.translateTo = function (selection, x, y) {
    zoom.transform(selection, function () {
      var e = extent.apply(this, arguments),
          t = this.__zoom,
          p = centroid(e);
      return constrain(_transform.identity.translate(p[0], p[1]).scale(t.k).translate(typeof x === "function" ? -x.apply(this, arguments) : -x, typeof y === "function" ? -y.apply(this, arguments) : -y), e, translateExtent);
    });
  };

  function scale(transform, k) {
    k = Math.max(scaleExtent[0], Math.min(scaleExtent[1], k));
    return k === transform.k ? transform : new _transform.Transform(k, transform.x, transform.y);
  }

  function translate(transform, p0, p1) {
    var x = p0[0] - p1[0] * transform.k,
        y = p0[1] - p1[1] * transform.k;
    return x === transform.x && y === transform.y ? transform : new _transform.Transform(transform.k, x, y);
  }

  function centroid(extent) {
    return [(+extent[0][0] + +extent[1][0]) / 2, (+extent[0][1] + +extent[1][1]) / 2];
  }

  function schedule(transition, transform, center) {
    transition.on("start.zoom", function () {
      gesture(this, arguments).start();
    }).on("interrupt.zoom end.zoom", function () {
      gesture(this, arguments).end();
    }).tween("zoom", function () {
      var that = this,
          args = arguments,
          g = gesture(that, args),
          e = extent.apply(that, args),
          p = center || centroid(e),
          w = Math.max(e[1][0] - e[0][0], e[1][1] - e[0][1]),
          a = that.__zoom,
          b = typeof transform === "function" ? transform.apply(that, args) : transform,
          i = interpolate(a.invert(p).concat(w / a.k), b.invert(p).concat(w / b.k));
      return function (t) {
        if (t === 1) t = b; // Avoid rounding error on end.
        else {
            var l = i(t),
                k = w / l[2];
            t = new _transform.Transform(k, p[0] - l[0] * k, p[1] - l[1] * k);
          }
        g.zoom(null, t);
      };
    });
  }

  function gesture(that, args) {
    for (var i = 0, n = gestures.length, g; i < n; ++i) {
      if ((g = gestures[i]).that === that) {
        return g;
      }
    }

    return new Gesture(that, args);
  }

  function Gesture(that, args) {
    this.that = that;
    this.args = args;
    this.index = -1;
    this.active = 0;
    this.extent = extent.apply(that, args);
  }

  Gesture.prototype = {
    start: function () {
      if (++this.active === 1) {
        this.index = gestures.push(this) - 1;
        this.emit("start");
      }

      return this;
    },
    zoom: function (key, transform) {
      if (this.mouse && key !== "mouse") this.mouse[1] = transform.invert(this.mouse[0]);
      if (this.touch0 && key !== "touch") this.touch0[1] = transform.invert(this.touch0[0]);
      if (this.touch1 && key !== "touch") this.touch1[1] = transform.invert(this.touch1[0]);
      this.that.__zoom = transform;
      this.emit("zoom");
      return this;
    },
    end: function () {
      if (--this.active === 0) {
        gestures.splice(this.index, 1);
        this.index = -1;
        this.emit("end");
      }

      return this;
    },
    emit: function (type) {
      (0, _d3Selection.customEvent)(new _event.default(zoom, type, this.that.__zoom), listeners.apply, listeners, [type, this.that, this.args]);
    }
  };

  function wheeled() {
    if (!filter.apply(this, arguments)) return;
    var g = gesture(this, arguments),
        t = this.__zoom,
        k = Math.max(scaleExtent[0], Math.min(scaleExtent[1], t.k * Math.pow(2, wheelDelta.apply(this, arguments)))),
        p = (0, _d3Selection.mouse)(this); // If the mouse is in the same location as before, reuse it.
    // If there were recent wheel events, reset the wheel idle timeout.

    if (g.wheel) {
      if (g.mouse[0][0] !== p[0] || g.mouse[0][1] !== p[1]) {
        g.mouse[1] = t.invert(g.mouse[0] = p);
      }

      clearTimeout(g.wheel);
    } // If this wheel event won’t trigger a transform change, ignore it.
    else if (t.k === k) return; // Otherwise, capture the mouse point and location at the start.
      else {
          g.mouse = [p, t.invert(p)];
          (0, _d3Transition.interrupt)(this);
          g.start();
        }

    (0, _noevent.default)();
    g.wheel = setTimeout(wheelidled, wheelDelay);
    g.zoom("mouse", constrain(translate(scale(t, k), g.mouse[0], g.mouse[1]), g.extent, translateExtent));

    function wheelidled() {
      g.wheel = null;
      g.end();
    }
  }

  function mousedowned() {
    if (touchending || !filter.apply(this, arguments)) return;
    var g = gesture(this, arguments),
        v = (0, _d3Selection.select)(_d3Selection.event.view).on("mousemove.zoom", mousemoved, true).on("mouseup.zoom", mouseupped, true),
        p = (0, _d3Selection.mouse)(this),
        x0 = _d3Selection.event.clientX,
        y0 = _d3Selection.event.clientY;
    (0, _d3Drag.dragDisable)(_d3Selection.event.view);
    (0, _noevent.nopropagation)();
    g.mouse = [p, this.__zoom.invert(p)];
    (0, _d3Transition.interrupt)(this);
    g.start();

    function mousemoved() {
      (0, _noevent.default)();

      if (!g.moved) {
        var dx = _d3Selection.event.clientX - x0,
            dy = _d3Selection.event.clientY - y0;
        g.moved = dx * dx + dy * dy > clickDistance2;
      }

      g.zoom("mouse", constrain(translate(g.that.__zoom, g.mouse[0] = (0, _d3Selection.mouse)(g.that), g.mouse[1]), g.extent, translateExtent));
    }

    function mouseupped() {
      v.on("mousemove.zoom mouseup.zoom", null);
      (0, _d3Drag.dragEnable)(_d3Selection.event.view, g.moved);
      (0, _noevent.default)();
      g.end();
    }
  }

  function dblclicked() {
    if (!filter.apply(this, arguments)) return;
    var t0 = this.__zoom,
        p0 = (0, _d3Selection.mouse)(this),
        p1 = t0.invert(p0),
        k1 = t0.k * (_d3Selection.event.shiftKey ? 0.5 : 2),
        t1 = constrain(translate(scale(t0, k1), p0, p1), extent.apply(this, arguments), translateExtent);
    (0, _noevent.default)();
    if (duration > 0) (0, _d3Selection.select)(this).transition().duration(duration).call(schedule, t1, p0);else (0, _d3Selection.select)(this).call(zoom.transform, t1);
  }

  function touchstarted() {
    if (!filter.apply(this, arguments)) return;
    var g = gesture(this, arguments),
        touches = _d3Selection.event.changedTouches,
        started,
        n = touches.length,
        i,
        t,
        p;
    (0, _noevent.nopropagation)();

    for (i = 0; i < n; ++i) {
      t = touches[i], p = (0, _d3Selection.touch)(this, touches, t.identifier);
      p = [p, this.__zoom.invert(p), t.identifier];
      if (!g.touch0) g.touch0 = p, started = true;else if (!g.touch1) g.touch1 = p;
    } // If this is a dbltap, reroute to the (optional) dblclick.zoom handler.


    if (touchstarting) {
      touchstarting = clearTimeout(touchstarting);

      if (!g.touch1) {
        g.end();
        p = (0, _d3Selection.select)(this).on("dblclick.zoom");
        if (p) p.apply(this, arguments);
        return;
      }
    }

    if (started) {
      touchstarting = setTimeout(function () {
        touchstarting = null;
      }, touchDelay);
      (0, _d3Transition.interrupt)(this);
      g.start();
    }
  }

  function touchmoved() {
    var g = gesture(this, arguments),
        touches = _d3Selection.event.changedTouches,
        n = touches.length,
        i,
        t,
        p,
        l;
    (0, _noevent.default)();
    if (touchstarting) touchstarting = clearTimeout(touchstarting);

    for (i = 0; i < n; ++i) {
      t = touches[i], p = (0, _d3Selection.touch)(this, touches, t.identifier);
      if (g.touch0 && g.touch0[2] === t.identifier) g.touch0[0] = p;else if (g.touch1 && g.touch1[2] === t.identifier) g.touch1[0] = p;
    }

    t = g.that.__zoom;

    if (g.touch1) {
      var p0 = g.touch0[0],
          l0 = g.touch0[1],
          p1 = g.touch1[0],
          l1 = g.touch1[1],
          dp = (dp = p1[0] - p0[0]) * dp + (dp = p1[1] - p0[1]) * dp,
          dl = (dl = l1[0] - l0[0]) * dl + (dl = l1[1] - l0[1]) * dl;
      t = scale(t, Math.sqrt(dp / dl));
      p = [(p0[0] + p1[0]) / 2, (p0[1] + p1[1]) / 2];
      l = [(l0[0] + l1[0]) / 2, (l0[1] + l1[1]) / 2];
    } else if (g.touch0) p = g.touch0[0], l = g.touch0[1];else return;

    g.zoom("touch", constrain(translate(t, p, l), g.extent, translateExtent));
  }

  function touchended() {
    var g = gesture(this, arguments),
        touches = _d3Selection.event.changedTouches,
        n = touches.length,
        i,
        t;
    (0, _noevent.nopropagation)();
    if (touchending) clearTimeout(touchending);
    touchending = setTimeout(function () {
      touchending = null;
    }, touchDelay);

    for (i = 0; i < n; ++i) {
      t = touches[i];
      if (g.touch0 && g.touch0[2] === t.identifier) delete g.touch0;else if (g.touch1 && g.touch1[2] === t.identifier) delete g.touch1;
    }

    if (g.touch1 && !g.touch0) g.touch0 = g.touch1, delete g.touch1;
    if (g.touch0) g.touch0[1] = this.__zoom.invert(g.touch0[0]);else g.end();
  }

  zoom.wheelDelta = function (_) {
    return arguments.length ? (wheelDelta = typeof _ === "function" ? _ : (0, _constant.default)(+_), zoom) : wheelDelta;
  };

  zoom.filter = function (_) {
    return arguments.length ? (filter = typeof _ === "function" ? _ : (0, _constant.default)(!!_), zoom) : filter;
  };

  zoom.touchable = function (_) {
    return arguments.length ? (touchable = typeof _ === "function" ? _ : (0, _constant.default)(!!_), zoom) : touchable;
  };

  zoom.extent = function (_) {
    return arguments.length ? (extent = typeof _ === "function" ? _ : (0, _constant.default)([[+_[0][0], +_[0][1]], [+_[1][0], +_[1][1]]]), zoom) : extent;
  };

  zoom.scaleExtent = function (_) {
    return arguments.length ? (scaleExtent[0] = +_[0], scaleExtent[1] = +_[1], zoom) : [scaleExtent[0], scaleExtent[1]];
  };

  zoom.translateExtent = function (_) {
    return arguments.length ? (translateExtent[0][0] = +_[0][0], translateExtent[1][0] = +_[1][0], translateExtent[0][1] = +_[0][1], translateExtent[1][1] = +_[1][1], zoom) : [[translateExtent[0][0], translateExtent[0][1]], [translateExtent[1][0], translateExtent[1][1]]];
  };

  zoom.constrain = function (_) {
    return arguments.length ? (constrain = _, zoom) : constrain;
  };

  zoom.duration = function (_) {
    return arguments.length ? (duration = +_, zoom) : duration;
  };

  zoom.interpolate = function (_) {
    return arguments.length ? (interpolate = _, zoom) : interpolate;
  };

  zoom.on = function () {
    var value = listeners.on.apply(listeners, arguments);
    return value === listeners ? zoom : value;
  };

  zoom.clickDistance = function (_) {
    return arguments.length ? (clickDistance2 = (_ = +_) * _, zoom) : Math.sqrt(clickDistance2);
  };

  return zoom;
}
},{"d3-dispatch":"UU/c","d3-drag":"LrBi","d3-interpolate":"mkGF","d3-selection":"lm1C","d3-transition":"Fcbi","./constant":"5O/Y","./event":"pmu8","./transform":"RGu5","./noevent":"DCEg"}],"uzwd":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "zoom", {
  enumerable: true,
  get: function () {
    return _zoom.default;
  }
});
Object.defineProperty(exports, "zoomTransform", {
  enumerable: true,
  get: function () {
    return _transform.default;
  }
});
Object.defineProperty(exports, "zoomIdentity", {
  enumerable: true,
  get: function () {
    return _transform.identity;
  }
});

var _zoom = _interopRequireDefault(require("./zoom"));

var _transform = _interopRequireWildcard(require("./transform"));

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
},{"./zoom":"T0tZ","./transform":"RGu5"}],"BG5c":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
var _exportNames = {
  version: true
};
Object.defineProperty(exports, "version", {
  enumerable: true,
  get: function () {
    return _package.version;
  }
});

var _package = require("./dist/package");

var _d3Array = require("d3-array");

Object.keys(_d3Array).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _d3Array[key];
    }
  });
});

var _d3Axis = require("d3-axis");

Object.keys(_d3Axis).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _d3Axis[key];
    }
  });
});

var _d3Brush = require("d3-brush");

Object.keys(_d3Brush).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _d3Brush[key];
    }
  });
});

var _d3Chord = require("d3-chord");

Object.keys(_d3Chord).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _d3Chord[key];
    }
  });
});

var _d3Collection = require("d3-collection");

Object.keys(_d3Collection).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _d3Collection[key];
    }
  });
});

var _d3Color = require("d3-color");

Object.keys(_d3Color).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _d3Color[key];
    }
  });
});

var _d3Contour = require("d3-contour");

Object.keys(_d3Contour).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _d3Contour[key];
    }
  });
});

var _d3Dispatch = require("d3-dispatch");

Object.keys(_d3Dispatch).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _d3Dispatch[key];
    }
  });
});

var _d3Drag = require("d3-drag");

Object.keys(_d3Drag).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _d3Drag[key];
    }
  });
});

var _d3Dsv = require("d3-dsv");

Object.keys(_d3Dsv).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _d3Dsv[key];
    }
  });
});

var _d3Ease = require("d3-ease");

Object.keys(_d3Ease).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _d3Ease[key];
    }
  });
});

var _d3Fetch = require("d3-fetch");

Object.keys(_d3Fetch).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _d3Fetch[key];
    }
  });
});

var _d3Force = require("d3-force");

Object.keys(_d3Force).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _d3Force[key];
    }
  });
});

var _d3Format = require("d3-format");

Object.keys(_d3Format).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _d3Format[key];
    }
  });
});

var _d3Geo = require("d3-geo");

Object.keys(_d3Geo).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _d3Geo[key];
    }
  });
});

var _d3Hierarchy = require("d3-hierarchy");

Object.keys(_d3Hierarchy).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _d3Hierarchy[key];
    }
  });
});

var _d3Interpolate = require("d3-interpolate");

Object.keys(_d3Interpolate).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _d3Interpolate[key];
    }
  });
});

var _d3Path = require("d3-path");

Object.keys(_d3Path).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _d3Path[key];
    }
  });
});

var _d3Polygon = require("d3-polygon");

Object.keys(_d3Polygon).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _d3Polygon[key];
    }
  });
});

var _d3Quadtree = require("d3-quadtree");

Object.keys(_d3Quadtree).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _d3Quadtree[key];
    }
  });
});

var _d3Random = require("d3-random");

Object.keys(_d3Random).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _d3Random[key];
    }
  });
});

var _d3Scale = require("d3-scale");

Object.keys(_d3Scale).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _d3Scale[key];
    }
  });
});

var _d3ScaleChromatic = require("d3-scale-chromatic");

Object.keys(_d3ScaleChromatic).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _d3ScaleChromatic[key];
    }
  });
});

var _d3Selection = require("d3-selection");

Object.keys(_d3Selection).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _d3Selection[key];
    }
  });
});

var _d3Shape = require("d3-shape");

Object.keys(_d3Shape).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _d3Shape[key];
    }
  });
});

var _d3Time = require("d3-time");

Object.keys(_d3Time).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _d3Time[key];
    }
  });
});

var _d3TimeFormat = require("d3-time-format");

Object.keys(_d3TimeFormat).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _d3TimeFormat[key];
    }
  });
});

var _d3Timer = require("d3-timer");

Object.keys(_d3Timer).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _d3Timer[key];
    }
  });
});

var _d3Transition = require("d3-transition");

Object.keys(_d3Transition).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _d3Transition[key];
    }
  });
});

var _d3Voronoi = require("d3-voronoi");

Object.keys(_d3Voronoi).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _d3Voronoi[key];
    }
  });
});

var _d3Zoom = require("d3-zoom");

Object.keys(_d3Zoom).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _d3Zoom[key];
    }
  });
});
},{"./dist/package":"hADF","d3-array":"cBuZ","d3-axis":"y9Kr","d3-brush":"TNt0","d3-chord":"cf1+","d3-collection":"qqV1","d3-color":"4TJ2","d3-contour":"cfrl","d3-dispatch":"UU/c","d3-drag":"LrBi","d3-dsv":"mQVF","d3-ease":"CFyW","d3-fetch":"hNko","d3-force":"YpA1","d3-format":"4gWe","d3-geo":"LMxt","d3-hierarchy":"wNQE","d3-interpolate":"mkGF","d3-path":"dz42","d3-polygon":"QnuL","d3-quadtree":"oxc3","d3-random":"4WQ4","d3-scale":"zt+a","d3-scale-chromatic":"zd6o","d3-selection":"lm1C","d3-shape":"pW+U","d3-time":"F00f","d3-time-format":"+7zs","d3-timer":"CBES","d3-transition":"Fcbi","d3-voronoi":"AKDj","d3-zoom":"uzwd"}],"ep6D":[function(require,module,exports) {
module.exports = {
  "type": "FeatureCollection",
  "crs": {
    "type": "name",
    "properties": {
      "name": "urn:ogc:def:crs:OGC:1.3:CRS84"
    }
  },
  "features": [{
    "type": "Feature",
    "properties": {
      "areaCode": 3,
      "areaName": "Appingedam"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[6.81436, 53.29758], [6.80334, 53.31592], [6.80736, 53.32595], [6.83815, 53.32943], [6.8362, 53.34515], [6.8854, 53.34513], [6.88738, 53.29788], [6.85116, 53.29704], [6.84581, 53.29013], [6.81436, 53.29758]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 5,
      "areaName": "Bedum"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[6.58757, 53.25564], [6.58869, 53.26255], [6.54955, 53.26441], [6.56706, 53.34108], [6.5762, 53.34742], [6.58816, 53.34223], [6.59583, 53.34714], [6.60469, 53.3408], [6.59262, 53.33572], [6.61019, 53.33011], [6.61986, 53.31443], [6.65405, 53.30864], [6.62585, 53.2662], [6.63602, 53.2514], [6.58757, 53.25564]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 7,
      "areaName": "Bellingwedde"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[7.18008, 53.13132], [7.1829, 53.12177], [7.20279, 53.11341], [7.20424, 53.05557], [7.13037, 53.03897], [7.10233, 53.06118], [7.08716, 53.05664], [7.06979, 53.06667], [7.03425, 53.06464], [7.01545, 53.07177], [7.04266, 53.10175], [7.0259, 53.11246], [7.08124, 53.14401], [7.10565, 53.14394], [7.14531, 53.16077], [7.17396, 53.14793], [7.18924, 53.15488], [7.18008, 53.13132]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 9,
      "areaName": "Ten Boer"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[6.74647, 53.30854], [6.75308, 53.29885], [6.77236, 53.29181], [6.77253, 53.28309], [6.64362, 53.23506], [6.62585, 53.2662], [6.65405, 53.30864], [6.68959, 53.29745], [6.70923, 53.31003], [6.72649, 53.30489], [6.73784, 53.31296], [6.74647, 53.30854]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 10,
      "areaName": "Delfzijl"
    },
    "geometry": {
      "type": "MultiPolygon",
      "coordinates": [[[[7.10094, 53.32249], [7.10094, 53.32241], [7.09794, 53.32288], [7.09799, 53.32296], [7.10094, 53.32249]]], [[[7.09757, 53.32569], [7.10109, 53.32628], [7.08093, 53.32264], [7.10098, 53.32354], [7.07128, 53.32192], [7.09757, 53.32569]]], [[[6.86973, 53.40906], [6.88514, 53.40347], [6.90213, 53.34746], [6.93733, 53.33479], [6.94688, 53.32604], [6.97047, 53.32196], [6.99066, 53.31687], [7.00463, 53.3171], [7.00493, 53.31673], [7.00443, 53.31637], [7.00334, 53.31606], [6.99903, 53.31562], [6.9947, 53.3156], [6.99047, 53.31594], [6.98695, 53.31655], [6.9809, 53.31799], [6.97037, 53.3208], [6.95188, 53.32336], [6.94706, 53.32453], [6.94609, 53.32486], [6.93992, 53.32794], [6.93431, 53.33307], [6.92876, 53.3256], [7.00059, 53.30942], [7.01014, 53.31582], [7.01275, 53.31102], [7.00987, 53.30622], [7.03019, 53.30247], [7.03908, 53.30886], [7.03653, 53.30371], [7.03892, 53.30256], [7.03831, 53.30381], [7.03968, 53.30881], [7.0475, 53.29957], [7.07637, 53.30021], [7.08168, 53.3056], [7.08261, 53.30167], [7.08231, 53.30396], [7.08663, 53.30687], [7.08473, 53.30412], [7.09401, 53.30904], [7.10006, 53.30782], [7.08417, 53.29756], [7.07823, 53.27033], [7.08079, 53.25814], [7.08541, 53.26178], [7.09138, 53.25661], [7.06752, 53.24238], [7.04031, 53.25984], [7.02185, 53.25324], [7.01323, 53.26684], [6.99762, 53.26714], [6.95223, 53.2565], [6.94499, 53.24361], [6.92844, 53.23695], [6.90926, 53.24352], [6.9091, 53.27898], [6.88641, 53.27992], [6.8956, 53.28592], [6.88301, 53.31641], [6.8854, 53.34513], [6.87543, 53.34735], [6.8668, 53.34181], [6.82497, 53.34705], [6.82516, 53.35813], [6.80084, 53.36609], [6.77717, 53.39797], [6.84372, 53.42242], [6.86973, 53.40906]], [[6.92804, 53.32941], [6.92578, 53.32923], [6.92615, 53.32709], [6.92799, 53.32772], [6.92804, 53.32941]], [[7.09099, 53.30513], [7.09234, 53.30553], [7.09319, 53.30646], [7.08877, 53.30523], [7.09099, 53.30513]], [[7.0111, 53.3135], [7.00862, 53.31261], [7.01221, 53.31178], [7.01214, 53.31191], [7.0111, 53.3135]], [[6.95261, 53.32331], [6.96994, 53.32096], [6.98082, 53.31826], [6.96982, 53.32133], [6.94433, 53.32587], [6.95261, 53.32331]], [[6.98114, 53.31825], [6.98724, 53.31655], [6.99326, 53.31573], [7.00093, 53.31584], [7.0048, 53.31676], [6.99372, 53.31615], [6.98114, 53.31825]]], [[[6.99254, 53.31254], [6.96618, 53.31922], [6.96931, 53.31926], [6.99599, 53.31239], [6.99254, 53.31254]]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 14,
      "areaName": "Groningen"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[6.51126, 53.25693], [6.55026, 53.26495], [6.58869, 53.26255], [6.58633, 53.25585], [6.60641, 53.25142], [6.63504, 53.25129], [6.64071, 53.22885], [6.66687, 53.20202], [6.63892, 53.18578], [6.60447, 53.19659], [6.58064, 53.18323], [6.54174, 53.17861], [6.53049, 53.19556], [6.49423, 53.19822], [6.48572, 53.20382], [6.46346, 53.20006], [6.48092, 53.25018], [6.49599, 53.24561], [6.51126, 53.25693]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 15,
      "areaName": "Grootegast"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[6.22893, 53.21681], [6.22479, 53.22991], [6.21426, 53.23416], [6.22497, 53.23859], [6.21888, 53.24258], [6.23124, 53.24526], [6.23273, 53.25595], [6.27648, 53.25577], [6.27849, 53.24507], [6.35892, 53.25155], [6.35814, 53.2446], [6.3721, 53.24243], [6.37711, 53.2345], [6.3913, 53.23459], [6.40621, 53.21701], [6.31818, 53.20382], [6.31518, 53.1957], [6.28217, 53.19071], [6.28676, 53.18307], [6.24403, 53.17342], [6.23116, 53.15561], [6.17568, 53.13508], [6.17778, 53.16793], [6.19962, 53.19836], [6.22893, 53.21681]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 17,
      "areaName": "Haren"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[6.60327, 53.14198], [6.58796, 53.14544], [6.58151, 53.16358], [6.56369, 53.15764], [6.54838, 53.18089], [6.58064, 53.18323], [6.60447, 53.19659], [6.65724, 53.18077], [6.6835, 53.16047], [6.69537, 53.12118], [6.63483, 53.1062], [6.6366, 53.11284], [6.60327, 53.14198]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 18,
      "areaName": "Hoogezand-Sappemeer"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[6.72887, 53.17137], [6.77452, 53.16846], [6.76523, 53.17006], [6.76509, 53.17921], [6.827, 53.18478], [6.81586, 53.16394], [6.81904, 53.14633], [6.80791, 53.14693], [6.81111, 53.14254], [6.79403, 53.13651], [6.80599, 53.12033], [6.81395, 53.07097], [6.73745, 53.11946], [6.69537, 53.12118], [6.68871, 53.15461], [6.63981, 53.1903], [6.66687, 53.20202], [6.68262, 53.20051], [6.72887, 53.17137]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 22,
      "areaName": "Leek"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[6.43982, 53.21026], [6.4669, 53.2043], [6.44287, 53.18774], [6.40699, 53.17765], [6.38141, 53.15351], [6.36356, 53.10755], [6.34443, 53.08714], [6.29643, 53.09844], [6.28823, 53.11924], [6.30938, 53.12143], [6.30701, 53.12977], [6.34696, 53.13464], [6.33342, 53.16848], [6.34342, 53.1729], [6.34188, 53.1933], [6.34, 53.19761], [6.33152, 53.19388], [6.32907, 53.20418], [6.42852, 53.22473], [6.43982, 53.21026]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 24,
      "areaName": "Loppersum"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[6.7493, 53.30997], [6.73784, 53.31296], [6.72649, 53.30489], [6.70923, 53.31003], [6.68959, 53.29745], [6.64295, 53.30789], [6.63768, 53.31464], [6.61986, 53.31443], [6.61019, 53.33011], [6.59262, 53.33572], [6.60537, 53.33752], [6.59583, 53.34714], [6.62589, 53.35071], [6.62581, 53.36099], [6.64445, 53.36635], [6.69703, 53.3629], [6.78151, 53.41074], [6.79246, 53.4036], [6.77717, 53.39797], [6.78055, 53.39249], [6.80084, 53.36609], [6.82516, 53.35813], [6.83892, 53.33053], [6.80448, 53.32393], [6.81434, 53.29759], [6.77253, 53.28309], [6.77236, 53.29181], [6.75308, 53.29885], [6.7493, 53.30997]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 25,
      "areaName": "Marum"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[6.25438, 53.11413], [6.20505, 53.11548], [6.17568, 53.13508], [6.23116, 53.15561], [6.24403, 53.17342], [6.28676, 53.18307], [6.28216, 53.1907], [6.31518, 53.1957], [6.31818, 53.20382], [6.32907, 53.20418], [6.33152, 53.19388], [6.34, 53.19761], [6.34188, 53.1933], [6.34342, 53.1729], [6.33342, 53.16848], [6.34696, 53.13464], [6.30701, 53.12977], [6.30938, 53.12143], [6.28823, 53.11924], [6.29643, 53.09844], [6.2739, 53.11125], [6.25438, 53.11413]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 34,
      "areaName": "Almere"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[5.22353, 52.33207], [5.2134, 52.32936], [5.19137, 52.33638], [5.13851, 52.32576], [5.14493, 52.33172], [5.12917, 52.33866], [5.13175, 52.36379], [5.12235, 52.37796], [5.16187, 52.39953], [5.12119, 52.38473], [5.22707, 52.42365], [5.20826, 52.41637], [5.22292, 52.41726], [5.25842, 52.43543], [5.27581, 52.42332], [5.35077, 52.40021], [5.30124, 52.38199], [5.37921, 52.31399], [5.34862, 52.30916], [5.3335, 52.31427], [5.31717, 52.30356], [5.27337, 52.32097], [5.22353, 52.33207]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 37,
      "areaName": "Stadskanaal"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[6.95512, 53.01403], [7.01013, 53.0737], [7.03377, 53.06472], [7.06595, 53.06728], [7.0801, 53.06144], [7.06801, 53.04356], [7.08612, 53.04235], [7.08095, 53.02783], [7.10008, 53.01668], [7.07206, 53.00379], [7.06354, 52.93098], [7.0363, 52.92927], [7.02685, 52.91904], [7.01943, 52.92258], [6.93661, 52.99276], [6.86129, 53.04087], [6.88144, 53.04662], [6.89893, 53.03241], [6.9077, 53.03888], [6.95512, 53.01403]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 40,
      "areaName": "Slochteren"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[6.81434, 53.29759], [6.84581, 53.29013], [6.85116, 53.29704], [6.88717, 53.29833], [6.8956, 53.28592], [6.88641, 53.27992], [6.9091, 53.27898], [6.91272, 53.22512], [6.8846, 53.22591], [6.85558, 53.2167], [6.81747, 53.19847], [6.81998, 53.19119], [6.81014, 53.18471], [6.76509, 53.17921], [6.76523, 53.17006], [6.77452, 53.16846], [6.71781, 53.17339], [6.68262, 53.20051], [6.66242, 53.20513], [6.64071, 53.22885], [6.64358, 53.23504], [6.81434, 53.29759]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 47,
      "areaName": "Veendam"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[6.86549, 53.0429], [6.81395, 53.07097], [6.80324, 53.12409], [6.82116, 53.12884], [6.87412, 53.12355], [6.89699, 53.12851], [6.95934, 53.12018], [6.9606, 53.0958], [6.92907, 53.07266], [6.92444, 53.05778], [6.93334, 53.04961], [6.9055, 53.04384], [6.89893, 53.03241], [6.88144, 53.04662], [6.86549, 53.0429]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 48,
      "areaName": "Vlagtwedde"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[7.08668, 53.04049], [7.06801, 53.04356], [7.0801, 53.06144], [7.08884, 53.05646], [7.10233, 53.06118], [7.13037, 53.03897], [7.20424, 53.05557], [7.21745, 53.00704], [7.18151, 52.94158], [7.08726, 52.84989], [7.09274, 52.8382], [7.07215, 52.83841], [7.07626, 52.85003], [7.06275, 52.85145], [7.04024, 52.8729], [7.0148, 52.87299], [7.04557, 52.91591], [7.02685, 52.91904], [7.02918, 52.92349], [7.0363, 52.92927], [7.06354, 52.93098], [7.07206, 53.00379], [7.10008, 53.01668], [7.08095, 53.02783], [7.08668, 53.04049]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 50,
      "areaName": "Zeewolde"
    },
    "geometry": {
      "type": "MultiPolygon",
      "coordinates": [[[[5.55916, 52.33262], [5.56225, 52.33133], [5.56184, 52.33045], [5.55701, 52.33243], [5.55916, 52.33262]]], [[[5.56588, 52.36336], [5.56644, 52.36162], [5.56427, 52.36176], [5.56371, 52.3626], [5.56588, 52.36336]]], [[[5.61452, 52.36418], [5.61403, 52.36225], [5.61141, 52.36364], [5.61383, 52.36455], [5.61452, 52.36418]]], [[[5.61755, 52.36498], [5.61793, 52.36368], [5.61427, 52.36474], [5.61758, 52.36627], [5.61755, 52.36498]]], [[[5.61532, 52.3707], [5.61643, 52.36928], [5.61626, 52.36879], [5.61572, 52.36844], [5.61629, 52.36931], [5.61532, 52.3707]]], [[[5.44603, 52.4371], [5.53301, 52.38438], [5.58051, 52.41088], [5.62302, 52.40887], [5.61074, 52.36615], [5.61509, 52.3677], [5.61045, 52.36418], [5.58486, 52.36293], [5.56382, 52.36757], [5.53868, 52.35048], [5.54218, 52.33661], [5.55284, 52.33415], [5.55283, 52.3209], [5.52635, 52.27349], [5.40947, 52.25262], [5.31717, 52.30356], [5.3335, 52.31427], [5.34862, 52.30916], [5.37921, 52.31399], [5.30124, 52.38199], [5.34637, 52.39611], [5.43863, 52.44265], [5.44603, 52.4371]], [[5.60135, 52.3656], [5.60689, 52.36466], [5.60779, 52.36522], [5.60601, 52.36632], [5.60135, 52.3656]]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 51,
      "areaName": "Skarsterlan"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[5.69704, 52.98621], [5.70654, 52.98448], [5.71686, 52.99568], [5.74883, 53.00758], [5.73327, 53.01564], [5.73671, 53.03015], [5.75543, 53.04684], [5.75939, 53.02703], [5.77895, 53.02468], [5.80942, 53.02653], [5.82319, 53.03843], [5.83601, 53.03097], [5.85136, 53.03871], [5.86663, 53.02352], [5.89534, 53.01985], [5.88281, 53.01903], [5.89107, 53.0156], [5.8869, 52.9758], [5.93771, 52.91157], [5.8835, 52.88896], [5.84258, 52.9028], [5.76047, 52.88803], [5.69947, 52.90029], [5.69838, 52.89367], [5.66389, 52.8884], [5.63998, 52.92247], [5.64165, 52.93435], [5.68933, 52.93297], [5.68747, 52.98249], [5.69123, 52.98865], [5.69704, 52.98621]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 53,
      "areaName": "Winsum"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[6.43814, 53.3175], [6.48482, 53.34421], [6.48386, 53.35361], [6.47167, 53.35949], [6.48049, 53.36543], [6.46906, 53.39083], [6.48485, 53.39842], [6.50718, 53.39948], [6.51549, 53.42559], [6.54775, 53.42635], [6.54413, 53.40641], [6.53572, 53.40612], [6.53497, 53.3966], [6.52186, 53.39764], [6.5204, 53.39488], [6.52577, 53.38303], [6.5563, 53.3721], [6.55253, 53.35895], [6.56881, 53.35787], [6.57612, 53.34919], [6.56706, 53.34108], [6.55037, 53.26502], [6.51083, 53.25679], [6.50646, 53.26891], [6.47536, 53.27114], [6.46023, 53.28292], [6.43071, 53.27816], [6.42306, 53.28186], [6.43447, 53.2922], [6.42071, 53.30141], [6.42793, 53.3169], [6.43814, 53.3175]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 55,
      "areaName": "Boarnsterhim"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[5.70501, 53.06651], [5.69843, 53.07362], [5.70887, 53.0894], [5.75669, 53.11585], [5.75456, 53.12466], [5.79705, 53.12189], [5.81316, 53.12756], [5.83342, 53.15086], [5.82419, 53.16447], [5.86194, 53.17152], [5.93272, 53.17036], [5.93061, 53.15955], [5.90863, 53.14478], [5.94346, 53.12161], [5.94966, 53.10489], [5.93159, 53.11061], [5.88201, 53.10694], [5.88598, 53.09444], [5.87188, 53.08395], [5.8715, 53.07421], [5.93339, 53.07811], [5.93087, 53.07041], [5.94733, 53.06248], [5.94264, 53.05349], [5.95762, 53.05355], [5.9277, 53.03436], [5.92027, 53.03831], [5.9238, 53.03362], [5.91501, 53.02971], [5.90248, 53.02671], [5.89576, 53.03198], [5.90222, 53.02053], [5.86663, 53.02352], [5.85136, 53.03871], [5.83601, 53.03097], [5.82319, 53.03843], [5.80942, 53.02653], [5.75939, 53.02703], [5.75984, 53.04669], [5.70501, 53.06651]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 56,
      "areaName": "Zuidhorn"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[6.25494, 53.26852], [6.25323, 53.28793], [6.26872, 53.28977], [6.27843, 53.30283], [6.29436, 53.30817], [6.2805, 53.31258], [6.2869, 53.34103], [6.32691, 53.31529], [6.34474, 53.31906], [6.35713, 53.31388], [6.36759, 53.32162], [6.40114, 53.31913], [6.41512, 53.32822], [6.4311, 53.32821], [6.43814, 53.3175], [6.42793, 53.3169], [6.42058, 53.29968], [6.43513, 53.28968], [6.42306, 53.28186], [6.4308, 53.27813], [6.45817, 53.28341], [6.47536, 53.27114], [6.50315, 53.27032], [6.51144, 53.25411], [6.49599, 53.24561], [6.48092, 53.25018], [6.46246, 53.20764], [6.43989, 53.21014], [6.42852, 53.22473], [6.40621, 53.21701], [6.3913, 53.23459], [6.37711, 53.2345], [6.3721, 53.24243], [6.35814, 53.2446], [6.35892, 53.25155], [6.27849, 53.24507], [6.27648, 53.25577], [6.23175, 53.25595], [6.25494, 53.26852]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 58,
      "areaName": "Dongeradeel"
    },
    "geometry": {
      "type": "MultiPolygon",
      "coordinates": [[[[6.17674, 53.34454], [6.17828, 53.34254], [6.17754, 53.34199], [6.17512, 53.34587], [6.17674, 53.34454]]], [[[6.16851, 53.35946], [6.16511, 53.35955], [6.16527, 53.36476], [6.16875, 53.36076], [6.16851, 53.35946]]], [[[5.84994, 53.37533], [5.85012, 53.37521], [5.84806, 53.37664], [5.8481, 53.37666], [5.84994, 53.37533]]], [[[6.18438, 53.41405], [6.19115, 53.41081], [6.18569, 53.40982], [6.17839, 53.41377], [6.15881, 53.40822], [6.15755, 53.4074], [6.16341, 53.40857], [6.15461, 53.39283], [6.16481, 53.36], [6.14845, 53.35895], [6.15152, 53.35505], [6.1677, 53.35876], [6.16386, 53.34519], [6.16842, 53.3496], [6.17077, 53.34434], [6.17896, 53.33971], [6.17898, 53.32148], [6.15812, 53.31849], [6.13619, 53.30068], [6.1355, 53.31182], [6.1217, 53.32023], [6.0874, 53.3249], [6.02344, 53.32453], [6.02015, 53.30822], [5.97585, 53.30693], [5.96748, 53.32265], [5.93448, 53.31578], [5.93663, 53.32387], [5.91051, 53.3345], [5.91631, 53.33686], [5.90754, 53.34316], [5.88594, 53.34753], [5.88336, 53.35666], [5.8482, 53.37669], [5.88048, 53.38818], [5.88566, 53.38534], [5.87825, 53.39565], [5.89292, 53.38694], [5.93341, 53.38804], [5.96913, 53.39469], [5.97451, 53.40144], [5.97448, 53.39585], [6.0684, 53.4073], [6.08572, 53.40434], [6.09149, 53.41037], [6.09949, 53.41457], [6.08797, 53.40534], [6.13868, 53.40342], [6.17571, 53.41431], [6.18438, 53.41405]], [[6.18178, 53.41302], [6.1806, 53.41326], [6.18144, 53.41251], [6.18503, 53.41141], [6.18339, 53.41274], [6.18178, 53.41302]]], [[[6.0567, 53.45553], [6.06317, 53.45215], [6.04998, 53.44695], [6.048, 53.45393], [6.0567, 53.45553]]], [[[6.00643, 53.46076], [6.0045, 53.46293], [6.00451, 53.46359], [6.00796, 53.46276], [6.00643, 53.46076]]], [[[6.0591, 53.47291], [6.06007, 53.47082], [6.05218, 53.47208], [6.0542, 53.47333], [6.0591, 53.47291]]], [[[6.04926, 53.47723], [6.0372, 53.4713], [6.02891, 53.47129], [6.0435, 53.48008], [6.04926, 53.47723]]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 59,
      "areaName": "Achtkarspelen"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[6.11342, 53.17295], [6.08232, 53.19832], [6.07872, 53.21068], [6.08629, 53.21503], [6.02724, 53.23013], [6.02113, 53.24236], [6.14106, 53.26438], [6.17937, 53.25905], [6.19038, 53.26338], [6.18922, 53.26989], [6.21709, 53.26527], [6.2351, 53.2534], [6.21426, 53.23416], [6.22998, 53.21779], [6.1996, 53.19834], [6.17675, 53.1595], [6.15199, 53.15083], [6.14812, 53.15783], [6.12163, 53.14499], [6.10501, 53.1518], [6.11342, 53.17295]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 60,
      "areaName": "Ameland"
    },
    "geometry": {
      "type": "MultiPolygon",
      "coordinates": [[[[5.66855, 53.4211], [5.66358, 53.42125], [5.67465, 53.4228], [5.67353, 53.42224], [5.66855, 53.4211]]], [[[6.00451, 53.46359], [6.0045, 53.46293], [6.00384, 53.46322], [6.00451, 53.46359]]], [[[5.66964, 53.47017], [5.69385, 53.4677], [5.66432, 53.46503], [5.69663, 53.45972], [5.92964, 53.46838], [5.97291, 53.46309], [5.95897, 53.45636], [5.91104, 53.45759], [5.88719, 53.45074], [5.88427, 53.45384], [5.87577, 53.45696], [5.88691, 53.45061], [5.80497, 53.43754], [5.77634, 53.43846], [5.77426, 53.43275], [5.77248, 53.43955], [5.72722, 53.44294], [5.71671, 53.43642], [5.72747, 53.43185], [5.73159, 53.43125], [5.73172, 53.43073], [5.72757, 53.43148], [5.71893, 53.43534], [5.71567, 53.43571], [5.66181, 53.42142], [5.6257, 53.43173], [5.61205, 53.45167], [5.63449, 53.46642], [5.66964, 53.47017]]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 63,
      "areaName": "het Bildt"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[5.6524, 53.24966], [5.61784, 53.25576], [5.61416, 53.24862], [5.62858, 53.2399], [5.5926, 53.22547], [5.55104, 53.26218], [5.53804, 53.26592], [5.55594, 53.27651], [5.56102, 53.28452], [5.5547, 53.28698], [5.56108, 53.2846], [5.58712, 53.30051], [5.71891, 53.33486], [5.72142, 53.31603], [5.7493, 53.31356], [5.72085, 53.27907], [5.73539, 53.26471], [5.73607, 53.24867], [5.68941, 53.24583], [5.68891, 53.24079], [5.6524, 53.24966]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 70,
      "areaName": "Franekeradeel"
    },
    "geometry": {
      "type": "MultiPolygon",
      "coordinates": [[[[5.43771, 53.20966], [5.43693, 53.21022], [5.43702, 53.2108], [5.43708, 53.21026], [5.43771, 53.20966]]], [[[5.53942, 53.2637], [5.55104, 53.26218], [5.5926, 53.22547], [5.60056, 53.22976], [5.62083, 53.20802], [5.60465, 53.20435], [5.61826, 53.19141], [5.57968, 53.16764], [5.60473, 53.14434], [5.58673, 53.13868], [5.58764, 53.13033], [5.57532, 53.13431], [5.5626, 53.13023], [5.53121, 53.14789], [5.51153, 53.14574], [5.50498, 53.13473], [5.49252, 53.14201], [5.48432, 53.13699], [5.48105, 53.13857], [5.4871, 53.141], [5.47238, 53.14784], [5.49639, 53.17785], [5.47935, 53.1766], [5.48956, 53.20074], [5.45812, 53.20002], [5.43756, 53.21027], [5.48206, 53.24114], [5.53942, 53.2637]]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 72,
      "areaName": "Harlingen"
    },
    "geometry": {
      "type": "MultiPolygon",
      "coordinates": [[[[5.33526, 53.07716], [5.33631, 53.07729], [5.33653, 53.07729], [5.33662, 53.07727], [5.33723, 53.07652], [5.33526, 53.07716]]], [[[5.32491, 53.07461], [5.32318, 53.07858], [5.32317, 53.07884], [5.32325, 53.07896], [5.32344, 53.07908], [5.32351, 53.07911], [5.32491, 53.07461]]], [[[5.33296, 53.08025], [5.33417, 53.07972], [5.33421, 53.07967], [5.33422, 53.0796], [5.33296, 53.08025]]], [[[5.41144, 53.15188], [5.41128, 53.15182], [5.41084, 53.15188], [5.41089, 53.15191], [5.41144, 53.15188]]], [[[5.38054, 53.18149], [5.33957, 53.19103], [5.33947, 53.19114], [5.35876, 53.18682], [5.38054, 53.18149]]], [[[5.45801, 53.20007], [5.48956, 53.20074], [5.47935, 53.1766], [5.49637, 53.17838], [5.46834, 53.14333], [5.43551, 53.15353], [5.4116, 53.15194], [5.41415, 53.16918], [5.41083, 53.16997], [5.40754, 53.17272], [5.40444, 53.17334], [5.4027, 53.1759], [5.4077, 53.17355], [5.41108, 53.17014], [5.41513, 53.16942], [5.40956, 53.17477], [5.4194, 53.17873], [5.43898, 53.19383], [5.43552, 53.19527], [5.42781, 53.18603], [5.40885, 53.17558], [5.40595, 53.17517], [5.40519, 53.17663], [5.422, 53.18504], [5.43791, 53.20987], [5.45801, 53.20007]]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 74,
      "areaName": "Heerenveen"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[5.88406, 52.9932], [5.89107, 53.0156], [5.88281, 53.01903], [5.90222, 53.02053], [5.89576, 53.03198], [5.9069, 53.02727], [5.9238, 53.03362], [5.92035, 53.03835], [5.9277, 53.03436], [5.94286, 53.04128], [5.98452, 53.02554], [5.97194, 53.00967], [5.97967, 52.99785], [5.9581, 52.97294], [6.04434, 52.96624], [6.09425, 52.98496], [6.09644, 52.9929], [6.13119, 53.01188], [6.17681, 53.02105], [6.20542, 53.03793], [6.20087, 52.98849], [6.1573, 52.97533], [6.12726, 52.95307], [6.04182, 52.91779], [6.00207, 52.934], [5.957, 52.92688], [5.93785, 52.91174], [5.88744, 52.97476], [5.88406, 52.9932]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 79,
      "areaName": "Kollumerland en Nieuwkruisland"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[6.20075, 53.33393], [6.19191, 53.3339], [6.17501, 53.34981], [6.18079, 53.35729], [6.19674, 53.3528], [6.19652, 53.34119], [6.19925, 53.33845], [6.20036, 53.33811], [6.20457, 53.35398], [6.21772, 53.35365], [6.2181, 53.346], [6.22833, 53.33916], [6.22974, 53.33089], [6.23027, 53.32972], [6.23203, 53.32797], [6.23321, 53.33673], [6.25657, 53.3317], [6.23602, 53.3366], [6.22298, 53.34584], [6.22273, 53.35152], [6.23426, 53.34169], [6.25364, 53.34798], [6.2869, 53.34103], [6.2805, 53.31258], [6.29436, 53.30817], [6.27843, 53.30283], [6.26872, 53.28977], [6.25323, 53.28793], [6.25565, 53.26919], [6.2375, 53.25749], [6.18922, 53.26989], [6.19038, 53.26338], [6.17951, 53.25906], [6.14106, 53.26438], [6.04397, 53.2435], [6.05438, 53.29087], [6.0737, 53.2924], [6.07415, 53.32148], [6.08701, 53.32493], [6.12128, 53.3204], [6.1355, 53.31182], [6.13573, 53.30064], [6.15618, 53.31602], [6.18261, 53.32188], [6.17523, 53.33209], [6.18106, 53.33848], [6.1875, 53.33052], [6.20075, 53.33393]], [[6.23203, 53.32797], [6.232, 53.32726], [6.23287, 53.32739], [6.23233, 53.32792], [6.23203, 53.32797]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 80,
      "areaName": "Leeuwarden"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[5.8181, 53.22875], [5.8319, 53.24285], [5.85924, 53.24329], [5.85255, 53.23048], [5.87989, 53.23334], [5.88066, 53.22498], [5.89693, 53.22296], [5.88902, 53.21768], [5.9071, 53.21105], [5.85773, 53.20406], [5.86206, 53.19356], [5.85096, 53.19171], [5.86194, 53.17152], [5.82056, 53.16256], [5.83342, 53.15086], [5.81305, 53.12749], [5.79705, 53.12189], [5.75456, 53.12466], [5.76563, 53.17434], [5.73779, 53.17255], [5.74457, 53.19782], [5.73474, 53.21122], [5.74711, 53.21514], [5.73416, 53.2158], [5.73815, 53.23128], [5.72977, 53.23525], [5.74392, 53.2411], [5.76144, 53.23986], [5.7751, 53.22637], [5.80808, 53.224], [5.8181, 53.22875]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 81,
      "areaName": "Leeuwarderadeel"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[5.77499, 53.23029], [5.73362, 53.24851], [5.73539, 53.26471], [5.72012, 53.275], [5.73086, 53.29457], [5.76328, 53.29449], [5.81141, 53.27673], [5.83865, 53.27495], [5.83216, 53.24286], [5.81594, 53.22601], [5.7751, 53.22637], [5.77499, 53.23029]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 82,
      "areaName": "Lemsterland"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[5.85162, 52.863], [5.81974, 52.81728], [5.78981, 52.80369], [5.78438, 52.81748], [5.74881, 52.83968], [5.72468, 52.84398], [5.72866, 52.8334], [5.70887, 52.83845], [5.71663, 52.84257], [5.71102, 52.84399], [5.70799, 52.83653], [5.69855, 52.84423], [5.67362, 52.84506], [5.67697, 52.85256], [5.67095, 52.8398], [5.6575, 52.84373], [5.64183, 52.86883], [5.65199, 52.88634], [5.69838, 52.89367], [5.69947, 52.90029], [5.76047, 52.88803], [5.84258, 52.9028], [5.88324, 52.88905], [5.85162, 52.863]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 85,
      "areaName": "Ooststellingwerf"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[6.28073, 53.05956], [6.28143, 53.06419], [6.33206, 53.07528], [6.36781, 53.06736], [6.36252, 53.03397], [6.42762, 52.97182], [6.39344, 52.93284], [6.33328, 52.90636], [6.30299, 52.92497], [6.21363, 52.92579], [6.20056, 52.94301], [6.11054, 52.91324], [6.08485, 52.93627], [6.12752, 52.9532], [6.1573, 52.97533], [6.20087, 52.98849], [6.20542, 53.03793], [6.28073, 53.05956]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 86,
      "areaName": "Opsterland"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[6.20716, 53.11542], [6.27386, 53.11127], [6.29057, 53.09983], [6.31516, 53.09405], [6.30527, 53.08119], [6.33206, 53.07528], [6.28143, 53.06419], [6.28053, 53.05821], [6.21285, 53.03624], [6.2004, 53.03679], [6.17506, 53.02045], [6.13124, 53.0119], [6.09644, 52.9929], [6.09425, 52.98496], [6.04879, 52.96744], [6.02685, 52.96436], [5.9581, 52.97294], [5.97967, 52.99785], [5.97194, 53.00967], [5.98452, 53.02554], [5.938, 53.04426], [5.95761, 53.05362], [5.94264, 53.05349], [5.94733, 53.06248], [5.93087, 53.07041], [5.92992, 53.0808], [5.9828, 53.07731], [5.99856, 53.08095], [6.0244, 53.07336], [6.08856, 53.07079], [6.1049, 53.07774], [6.12496, 53.10121], [6.18353, 53.12844], [6.20716, 53.11542]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 88,
      "areaName": "Schiermonnikoog"
    },
    "geometry": {
      "type": "MultiPolygon",
      "coordinates": [[[[6.06372, 53.4651], [6.06325, 53.46753], [6.0591, 53.47291], [6.06421, 53.47062], [6.06372, 53.4651]]], [[[6.12592, 53.48625], [6.12658, 53.47432], [6.1196, 53.46174], [6.11311, 53.46955], [6.11897, 53.48682], [6.13717, 53.4971], [6.12592, 53.48625]]], [[[6.35763, 53.51387], [6.3708, 53.51124], [6.35643, 53.50408], [6.32562, 53.50278], [6.30052, 53.49407], [6.29767, 53.49409], [6.29471, 53.4966], [6.29285, 53.49666], [6.29224, 53.49743], [6.29011, 53.49789], [6.29272, 53.49662], [6.29461, 53.49654], [6.29635, 53.49464], [6.29771, 53.49396], [6.29904, 53.49354], [6.2748, 53.48799], [6.27484, 53.49427], [6.27282, 53.49707], [6.26987, 53.49864], [6.26987, 53.48447], [6.26739, 53.48414], [6.26424, 53.49298], [6.26046, 53.49611], [6.26594, 53.48342], [6.25236, 53.47772], [6.25168, 53.47951], [6.25068, 53.47957], [6.25092, 53.48032], [6.25025, 53.48127], [6.2496, 53.48152], [6.25183, 53.47742], [6.24804, 53.47713], [6.24679, 53.48005], [6.24513, 53.48065], [6.23929, 53.47637], [6.23724, 53.48192], [6.23118, 53.48605], [6.23236, 53.48736], [6.23169, 53.48762], [6.232, 53.48804], [6.23142, 53.48857], [6.22924, 53.48561], [6.2373, 53.47628], [6.22931, 53.47674], [6.22532, 53.48219], [6.22001, 53.48444], [6.21605, 53.48493], [6.21205, 53.48693], [6.2113, 53.487], [6.22756, 53.47702], [6.22445, 53.47672], [6.22165, 53.47926], [6.21772, 53.48102], [6.21627, 53.48137], [6.21594, 53.48132], [6.22331, 53.47682], [6.19737, 53.47284], [6.20301, 53.46846], [6.16938, 53.47256], [6.1665, 53.46785], [6.16046, 53.47198], [6.1425, 53.44813], [6.12339, 53.46109], [6.13442, 53.46653], [6.12891, 53.47553], [6.13594, 53.48938], [6.15715, 53.49935], [6.13974, 53.49459], [6.14176, 53.50194], [6.35763, 53.51387]]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 90,
      "areaName": "Smallingerland"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[6.00125, 53.14962], [6.01977, 53.15537], [6.08521, 53.15899], [6.12163, 53.14499], [6.14812, 53.15783], [6.15199, 53.15083], [6.17675, 53.1595], [6.17532, 53.13548], [6.18572, 53.12921], [6.12496, 53.10121], [6.1049, 53.07774], [6.08856, 53.07079], [6.0244, 53.07336], [5.99823, 53.08097], [5.9828, 53.07731], [5.93221, 53.08121], [5.8715, 53.07421], [5.87188, 53.08395], [5.88598, 53.09444], [5.88201, 53.10694], [5.93159, 53.11061], [5.9472, 53.10394], [5.94328, 53.12444], [6.00125, 53.14962]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 93,
      "areaName": "Terschelling"
    },
    "geometry": {
      "type": "MultiPolygon",
      "coordinates": [[[[5.25098, 53.25559], [5.2673, 53.25324], [5.26992, 53.25212], [5.25274, 53.24909], [5.24563, 53.25348], [5.24453, 53.2478], [5.2431, 53.2532], [5.25098, 53.25559]]], [[[5.16096, 53.29277], [5.15935, 53.29465], [5.15964, 53.29574], [5.16141, 53.29405], [5.16096, 53.29277]]], [[[5.4801, 53.41042], [5.47487, 53.40728], [5.47096, 53.40721], [5.47496, 53.40923], [5.47603, 53.41053], [5.4801, 53.41042]]], [[[5.55418, 53.44081], [5.55546, 53.42883], [5.55066, 53.43991], [5.54448, 53.4341], [5.53538, 53.43955], [5.52938, 53.43965], [5.52547, 53.43884], [5.54305, 53.43365], [5.51991, 53.42904], [5.51135, 53.43167], [5.51546, 53.43732], [5.51041, 53.43267], [5.50414, 53.43649], [5.49925, 53.43706], [5.51103, 53.42755], [5.49673, 53.42273], [5.48775, 53.43358], [5.48236, 53.43296], [5.48455, 53.42845], [5.48287, 53.42877], [5.48197, 53.42832], [5.47948, 53.42983], [5.47822, 53.42999], [5.47743, 53.42969], [5.47664, 53.43058], [5.47633, 53.43054], [5.4773, 53.42962], [5.48176, 53.42818], [5.48494, 53.42822], [5.49322, 53.42212], [5.48285, 53.41822], [5.4662, 53.42197], [5.46427, 53.42881], [5.46163, 53.42899], [5.46418, 53.424], [5.4616, 53.42469], [5.46029, 53.42432], [5.45957, 53.42491], [5.45886, 53.42488], [5.45883, 53.42513], [5.45854, 53.42487], [5.45774, 53.42531], [5.45677, 53.42558], [5.45648, 53.42559], [5.45609, 53.42549], [5.45591, 53.4256], [5.45576, 53.42555], [5.47714, 53.41762], [5.474, 53.41373], [5.45141, 53.41803], [5.44942, 53.41954], [5.44801, 53.4199], [5.44902, 53.42041], [5.44901, 53.42095], [5.44466, 53.42556], [5.44328, 53.42561], [5.44347, 53.42613], [5.44317, 53.42557], [5.44882, 53.42096], [5.44784, 53.41991], [5.44916, 53.41879], [5.44697, 53.42037], [5.44244, 53.42193], [5.44953, 53.41821], [5.44754, 53.41793], [5.44304, 53.42106], [5.44116, 53.42151], [5.4412, 53.42128], [5.45428, 53.41101], [5.47576, 53.41089], [5.46342, 53.40855], [5.47076, 53.4064], [5.38355, 53.40183], [5.3268, 53.37636], [5.31321, 53.38032], [5.29091, 53.3699], [5.25684, 53.37274], [5.23377, 53.35813], [5.21984, 53.35439], [5.21855, 53.35701], [5.21822, 53.35939], [5.21918, 53.36125], [5.21973, 53.36184], [5.22122, 53.36284], [5.22232, 53.3631], [5.21992, 53.35449], [5.23816, 53.36719], [5.2211, 53.36425], [5.21268, 53.35591], [5.21826, 53.35429], [5.20936, 53.35683], [5.18995, 53.34644], [5.15195, 53.35399], [5.20073, 53.39582], [5.5115, 53.44805], [5.55418, 53.44081]]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 96,
      "areaName": "Vlieland"
    },
    "geometry": {
      "type": "MultiPolygon",
      "coordinates": [[[[5.15964, 53.29574], [5.11975, 53.28105], [5.11408, 53.28485], [5.13025, 53.29843], [5.15964, 53.29574]]], [[[5.1343, 53.30129], [5.13553, 53.30056], [5.12756, 53.30036], [5.13047, 53.30174], [5.1343, 53.30129]]], [[[5.06654, 53.30794], [5.0962, 53.30663], [5.10063, 53.30067], [4.97494, 53.2662], [4.98022, 53.2546], [4.94969, 53.24804], [4.95596, 53.24476], [4.93255, 53.23684], [4.93436, 53.22752], [4.91339, 53.21531], [4.87981, 53.21505], [4.86105, 53.20722], [4.86852, 53.20565], [4.85599, 53.20521], [4.85433, 53.22334], [4.99771, 53.28937], [5.06654, 53.30794]]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 98,
      "areaName": "Weststellingwerf"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[5.8401, 52.8458], [5.85677, 52.87079], [5.88612, 52.89432], [5.93282, 52.9072], [5.95916, 52.92746], [6.00269, 52.93398], [6.04113, 52.91772], [6.0863, 52.93645], [6.11054, 52.91324], [6.20056, 52.94301], [6.21363, 52.92579], [6.24726, 52.92335], [6.2069, 52.89074], [6.08261, 52.83915], [6.05261, 52.83734], [6.05995, 52.82612], [6.03117, 52.81499], [6.02456, 52.82254], [5.99651, 52.81656], [5.96998, 52.84237], [5.95571, 52.83322], [5.94593, 52.83745], [5.92716, 52.83387], [5.92408, 52.82349], [5.87876, 52.80085], [5.85703, 52.80723], [5.83657, 52.80577], [5.81811, 52.82159], [5.8401, 52.8458]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 106,
      "areaName": "Assen"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[6.60809, 53.04842], [6.60301, 53.03309], [6.63122, 53.02611], [6.63224, 53.01711], [6.61139, 53.00508], [6.59604, 52.97266], [6.58127, 52.96745], [6.56283, 52.94715], [6.543, 52.95534], [6.5346, 52.93252], [6.49697, 52.95157], [6.48395, 52.95017], [6.49574, 52.96899], [6.4855, 52.97298], [6.499, 52.99022], [6.48821, 53.0054], [6.51304, 53.01056], [6.49553, 53.0309], [6.50289, 53.03221], [6.49995, 53.03843], [6.50513, 53.04635], [6.52514, 53.04627], [6.54731, 53.03507], [6.55521, 53.05861], [6.56973, 53.05986], [6.57487, 53.05458], [6.5758, 53.05919], [6.6011, 53.06192], [6.60809, 53.04842]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 109,
      "areaName": "Coevorden"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[6.76742, 52.84906], [6.84981, 52.80463], [6.83105, 52.77816], [6.83969, 52.761], [6.83057, 52.74229], [6.83748, 52.73451], [6.82636, 52.73089], [6.84087, 52.69957], [6.84953, 52.69935], [6.86188, 52.64969], [6.77772, 52.65171], [6.74198, 52.64533], [6.7264, 52.63322], [6.702, 52.62727], [6.70855, 52.64872], [6.62945, 52.66969], [6.62994, 52.71273], [6.5958, 52.71322], [6.59678, 52.72355], [6.5765, 52.72525], [6.66088, 52.80123], [6.67514, 52.79713], [6.68118, 52.80773], [6.69195, 52.81], [6.68896, 52.82297], [6.7076, 52.83639], [6.70405, 52.84698], [6.72863, 52.85397], [6.71456, 52.86816], [6.73634, 52.87869], [6.76742, 52.84906]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 114,
      "areaName": "Emmen"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[6.85885, 52.66106], [6.84953, 52.69935], [6.84087, 52.69957], [6.82636, 52.73089], [6.83747, 52.73444], [6.83057, 52.74229], [6.83969, 52.761], [6.831, 52.77797], [6.84871, 52.80381], [6.86902, 52.81931], [6.94991, 52.8488], [6.96157, 52.86433], [7.00759, 52.87301], [7.04024, 52.8729], [7.06275, 52.85145], [7.07626, 52.85003], [7.07215, 52.83841], [7.09274, 52.8382], [7.07155, 52.81042], [7.05573, 52.64342], [7.04173, 52.63271], [6.97599, 52.64625], [6.9386, 52.63789], [6.91897, 52.63991], [6.89718, 52.65137], [6.86188, 52.64969], [6.85885, 52.66106]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 118,
      "areaName": "Hoogeveen"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[6.48597, 52.69357], [6.44868, 52.69379], [6.45114, 52.70698], [6.42037, 52.70135], [6.40362, 52.70584], [6.41437, 52.71726], [6.4068, 52.72841], [6.42132, 52.73142], [6.41539, 52.74086], [6.42629, 52.75142], [6.41013, 52.76489], [6.44615, 52.7761], [6.45545, 52.80056], [6.49181, 52.79312], [6.49067, 52.77089], [6.50761, 52.7691], [6.51273, 52.76208], [6.53537, 52.7681], [6.56639, 52.76558], [6.5574, 52.74537], [6.58747, 52.73569], [6.57643, 52.72427], [6.59678, 52.72355], [6.5958, 52.71322], [6.62994, 52.71273], [6.63177, 52.67387], [6.62945, 52.66969], [6.61453, 52.67405], [6.55282, 52.66559], [6.52938, 52.65451], [6.53056, 52.67247], [6.49257, 52.67597], [6.48597, 52.69357]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 119,
      "areaName": "Meppel"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[6.16945, 52.68596], [6.15661, 52.69196], [6.12006, 52.75088], [6.17291, 52.77305], [6.20184, 52.72931], [6.21856, 52.7483], [6.23458, 52.7406], [6.21694, 52.71994], [6.2169, 52.70316], [6.24898, 52.70822], [6.2743, 52.70619], [6.27581, 52.69546], [6.2867, 52.69907], [6.28501, 52.6897], [6.27587, 52.69022], [6.28348, 52.68225], [6.26981, 52.68223], [6.2655, 52.66799], [6.21673, 52.68639], [6.20168, 52.68462], [6.19423, 52.67663], [6.18055, 52.68159], [6.18315, 52.67506], [6.163, 52.68006], [6.16945, 52.68596]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 140,
      "areaName": "Littenseradiel"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[5.60468, 53.14435], [5.57897, 53.1626], [5.58867, 53.1771], [5.6047, 53.18387], [5.6235, 53.1683], [5.63973, 53.17133], [5.65284, 53.16626], [5.68494, 53.18189], [5.69915, 53.17374], [5.71324, 53.17523], [5.72493, 53.16608], [5.73689, 53.17257], [5.76563, 53.17434], [5.75676, 53.11592], [5.71177, 53.09172], [5.70229, 53.07879], [5.68053, 53.0712], [5.67729, 53.07711], [5.65538, 53.06663], [5.6393, 53.06685], [5.62396, 53.07522], [5.59905, 53.06841], [5.58797, 53.08439], [5.56618, 53.08426], [5.55875, 53.08984], [5.55651, 53.10143], [5.52708, 53.10445], [5.52799, 53.11482], [5.55366, 53.12967], [5.54727, 53.13075], [5.54732, 53.13736], [5.56557, 53.12957], [5.57532, 53.13431], [5.58764, 53.13033], [5.58673, 53.13868], [5.60468, 53.14435]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 141,
      "areaName": "Almelo"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[6.67181, 52.38887], [6.67612, 52.39615], [6.68439, 52.3909], [6.69863, 52.39374], [6.71969, 52.36129], [6.70974, 52.34343], [6.72101, 52.34013], [6.70945, 52.3306], [6.69695, 52.32981], [6.70701, 52.321], [6.69023, 52.31479], [6.69094, 52.30839], [6.65752, 52.29485], [6.62607, 52.28997], [6.63178, 52.30178], [6.60476, 52.31223], [6.61902, 52.32615], [6.5977, 52.3429], [6.61557, 52.36183], [6.59885, 52.38366], [6.6402, 52.39912], [6.67181, 52.38887]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 147,
      "areaName": "Borne"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[6.80135, 52.30866], [6.78789, 52.30498], [6.79255, 52.30039], [6.74289, 52.28311], [6.71123, 52.30412], [6.68948, 52.30959], [6.69023, 52.31479], [6.7059, 52.31796], [6.69695, 52.32981], [6.70945, 52.3306], [6.72085, 52.34121], [6.75068, 52.32967], [6.75904, 52.33206], [6.77384, 52.31891], [6.80213, 52.31454], [6.80135, 52.30866]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 148,
      "areaName": "Dalfsen"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[6.33488, 52.57195], [6.36158, 52.52469], [6.33152, 52.52208], [6.34262, 52.45691], [6.37849, 52.45642], [6.37106, 52.44971], [6.38415, 52.43944], [6.3804, 52.4278], [6.33442, 52.42444], [6.31894, 52.43207], [6.29183, 52.43472], [6.27824, 52.45704], [6.23891, 52.46541], [6.17129, 52.46874], [6.1625, 52.47439], [6.19255, 52.48163], [6.201, 52.49099], [6.17332, 52.51883], [6.18785, 52.52352], [6.21081, 52.5678], [6.20214, 52.58495], [6.31968, 52.59917], [6.33488, 52.57195]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 150,
      "areaName": "Deventer"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[6.37703, 52.24465], [6.35089, 52.24168], [6.33802, 52.23622], [6.33871, 52.22715], [6.32043, 52.22567], [6.29794, 52.22553], [6.29273, 52.23087], [6.27129, 52.22641], [6.21511, 52.23155], [6.21722, 52.2264], [6.17867, 52.23356], [6.16303, 52.22852], [6.16844, 52.22728], [6.1625, 52.22792], [6.16867, 52.2207], [6.16407, 52.21744], [6.14194, 52.23344], [6.15375, 52.24679], [6.12387, 52.25148], [6.13007, 52.26069], [6.10132, 52.30122], [6.11015, 52.29772], [6.18218, 52.30891], [6.18155, 52.31486], [6.20649, 52.32112], [6.23535, 52.31982], [6.23513, 52.31446], [6.26724, 52.30081], [6.32653, 52.30163], [6.32884, 52.2811], [6.37719, 52.25894], [6.37703, 52.24465]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 153,
      "areaName": "Enschede"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[6.97029, 52.22774], [6.97961, 52.21441], [6.95124, 52.18106], [6.90955, 52.17647], [6.88975, 52.16121], [6.82799, 52.17101], [6.80558, 52.1666], [6.7668, 52.19106], [6.75589, 52.2174], [6.77443, 52.23846], [6.81375, 52.22948], [6.81954, 52.24366], [6.84256, 52.25391], [6.84351, 52.26659], [6.83175, 52.27351], [6.83785, 52.27663], [6.86833, 52.27296], [6.88321, 52.28317], [6.90698, 52.28544], [6.94099, 52.2839], [6.96901, 52.2674], [6.97029, 52.22774]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 158,
      "areaName": "Haaksbergen"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[6.64921, 52.17288], [6.62436, 52.18892], [6.67205, 52.19819], [6.69749, 52.19625], [6.71239, 52.20633], [6.7668, 52.19106], [6.80558, 52.1666], [6.82799, 52.17101], [6.88975, 52.16121], [6.88046, 52.15601], [6.87346, 52.13028], [6.85547, 52.12046], [6.71627, 52.11827], [6.6624, 52.13017], [6.67388, 52.1412], [6.67406, 52.16127], [6.64921, 52.17288]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 160,
      "areaName": "Hardenberg"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[6.56526, 52.51851], [6.55406, 52.51246], [6.54125, 52.51904], [6.52183, 52.56059], [6.50494, 52.57589], [6.48836, 52.569], [6.41501, 52.57001], [6.40264, 52.5914], [6.30306, 52.59714], [6.3278, 52.65869], [6.36444, 52.64317], [6.3839, 52.6122], [6.4095, 52.62173], [6.41881, 52.61902], [6.43124, 52.62838], [6.44188, 52.61564], [6.45979, 52.61576], [6.47007, 52.62501], [6.47802, 52.61863], [6.5186, 52.61409], [6.51386, 52.64629], [6.55282, 52.66559], [6.61453, 52.67405], [6.70855, 52.64872], [6.70079, 52.62841], [6.71421, 52.62681], [6.72729, 52.61493], [6.71877, 52.58864], [6.76669, 52.56164], [6.72597, 52.56325], [6.71626, 52.54853], [6.68088, 52.55332], [6.70533, 52.52101], [6.69758, 52.4863], [6.6693, 52.49498], [6.65366, 52.48783], [6.64956, 52.47309], [6.62682, 52.47383], [6.613, 52.4656], [6.59519, 52.4803], [6.60964, 52.4925], [6.56128, 52.51293], [6.56526, 52.51851]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 163,
      "areaName": "Hellendoorn"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[6.4501, 52.46126], [6.4756, 52.44086], [6.51628, 52.43745], [6.54055, 52.45088], [6.56289, 52.44576], [6.59639, 52.45481], [6.59815, 52.43903], [6.57247, 52.42331], [6.57595, 52.41751], [6.51598, 52.40612], [6.50854, 52.39215], [6.51411, 52.38166], [6.49552, 52.37618], [6.49906, 52.36356], [6.52079, 52.36142], [6.51887, 52.35516], [6.4908, 52.34935], [6.46092, 52.32006], [6.4219, 52.32569], [6.35602, 52.31822], [6.3335, 52.3514], [6.34308, 52.37003], [6.35697, 52.37698], [6.38841, 52.37978], [6.40517, 52.41554], [6.39031, 52.42814], [6.43835, 52.44397], [6.4501, 52.46126]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 164,
      "areaName": "Hengelo"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[6.80135, 52.30866], [6.80204, 52.31359], [6.82334, 52.30876], [6.82052, 52.29843], [6.84637, 52.2914], [6.85205, 52.28212], [6.83175, 52.27351], [6.84351, 52.26659], [6.84256, 52.25391], [6.81954, 52.24366], [6.81375, 52.22948], [6.77443, 52.23846], [6.76519, 52.23314], [6.76906, 52.22701], [6.75589, 52.2174], [6.7668, 52.19106], [6.71239, 52.20633], [6.70204, 52.21682], [6.72419, 52.25271], [6.75296, 52.25237], [6.74289, 52.28311], [6.79255, 52.30039], [6.78789, 52.30498], [6.80135, 52.30866]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 166,
      "areaName": "Kampen"
    },
    "geometry": {
      "type": "MultiPolygon",
      "coordinates": [[[[5.86219, 52.52197], [5.86263, 52.52335], [5.86164, 52.52533], [5.86319, 52.52353], [5.86219, 52.52197]]], [[[5.83863, 52.56519], [5.83877, 52.56408], [5.83683, 52.56523], [5.83847, 52.56656], [5.83863, 52.56519]]], [[[5.83435, 52.56788], [5.83531, 52.56692], [5.83358, 52.56632], [5.83263, 52.56745], [5.83435, 52.56788]]], [[[5.82852, 52.5716], [5.8357, 52.57208], [5.82722, 52.57123], [5.82679, 52.5728], [5.82867, 52.5746], [5.82844, 52.57679], [5.82957, 52.5772], [5.82852, 52.5716]]], [[[5.82771, 52.57799], [5.82769, 52.57479], [5.82595, 52.57284], [5.82453, 52.57252], [5.82771, 52.57799]]], [[[5.81684, 52.57882], [5.82338, 52.57626], [5.82318, 52.57541], [5.81845, 52.57691], [5.81431, 52.58007], [5.8147, 52.58154], [5.81684, 52.57882]]], [[[5.7963, 52.59229], [5.80323, 52.58957], [5.80357, 52.58847], [5.8022, 52.58719], [5.7852, 52.59191], [5.7963, 52.59229]]], [[[5.81088, 52.59371], [5.80883, 52.5902], [5.8115, 52.59375], [5.81793, 52.59172], [5.80808, 52.5889], [5.80067, 52.59684], [5.81088, 52.59371]]], [[[5.81737, 52.60462], [5.82028, 52.60032], [5.82549, 52.60011], [5.82917, 52.59327], [5.82217, 52.59418], [5.81737, 52.60462]]], [[[5.81922, 52.6068], [5.8254, 52.60147], [5.82403, 52.60064], [5.81658, 52.60526], [5.81922, 52.6068]]], [[[5.81075, 52.60685], [5.81236, 52.59938], [5.81497, 52.60459], [5.82046, 52.59563], [5.80208, 52.60313], [5.81075, 52.60685]]], [[[5.83397, 52.60722], [5.8341, 52.60551], [5.83174, 52.60469], [5.83331, 52.60709], [5.82788, 52.6047], [5.82637, 52.60594], [5.82416, 52.60564], [5.82374, 52.60545], [5.82707, 52.60131], [5.82078, 52.607], [5.83397, 52.60722]]], [[[5.98574, 52.625], [5.99117, 52.61397], [5.97156, 52.59337], [5.98294, 52.57751], [6.01289, 52.58611], [6.03304, 52.5594], [6.00362, 52.55039], [6.03045, 52.53806], [6.03017, 52.52675], [6.01474, 52.52026], [6.02786, 52.50961], [6.00712, 52.50403], [5.96536, 52.47646], [5.95299, 52.48445], [5.92556, 52.47406], [5.88728, 52.51691], [5.86292, 52.52163], [5.86413, 52.52746], [5.85721, 52.55287], [5.83542, 52.57488], [5.82546, 52.57973], [5.81448, 52.58254], [5.78239, 52.58267], [5.778, 52.58304], [5.83979, 52.58271], [5.77805, 52.58397], [5.77806, 52.58816], [5.80681, 52.58418], [5.81511, 52.58836], [5.82016, 52.58899], [5.81438, 52.58494], [5.83987, 52.58276], [5.83189, 52.60019], [5.84065, 52.61043], [5.89914, 52.61836], [5.92185, 52.61128], [5.95716, 52.62456], [5.98574, 52.625]]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 168,
      "areaName": "Losser"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[7.03924, 52.2609], [7.06579, 52.24123], [7.06128, 52.23471], [7.0264, 52.22571], [6.98996, 52.227], [6.9811, 52.22074], [6.96589, 52.23042], [6.96901, 52.2674], [6.93914, 52.28392], [6.95014, 52.31936], [6.93432, 52.32272], [6.93753, 52.33284], [6.95358, 52.33397], [6.95284, 52.34035], [6.97026, 52.34877], [6.96267, 52.36339], [6.97093, 52.37986], [7.00783, 52.36383], [7.0722, 52.3728], [7.07226, 52.35188], [7.02645, 52.29197], [7.03924, 52.2609]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 171,
      "areaName": "Noordoostpolder"
    },
    "geometry": {
      "type": "MultiPolygon",
      "coordinates": [[[[5.8339, 52.60734], [5.83357, 52.60734], [5.83381, 52.60738], [5.8339, 52.60734]]], [[[5.82263, 52.60773], [5.82188, 52.60739], [5.82136, 52.60739], [5.82182, 52.6077], [5.82263, 52.60773]]], [[[5.84106, 52.61063], [5.84133, 52.61052], [5.84065, 52.61043], [5.84084, 52.61064], [5.84106, 52.61063]]], [[[5.84324, 52.61347], [5.84019, 52.61191], [5.83167, 52.61136], [5.75843, 52.61158], [5.75439, 52.60971], [5.75835, 52.61167], [5.83212, 52.61146], [5.84324, 52.61347]]], [[[5.85741, 52.61604], [5.84444, 52.61356], [5.8437, 52.6128], [5.84331, 52.61357], [5.86002, 52.6167], [5.85741, 52.61604]]], [[[5.89914, 52.61836], [5.89771, 52.61817], [5.89855, 52.61845], [5.89914, 52.61836]]], [[[5.88824, 52.62022], [5.8963, 52.61797], [5.84301, 52.61075], [5.86996, 52.61562], [5.88824, 52.62022]]], [[[6.01574, 52.64412], [6.01705, 52.64337], [6.01705, 52.64337], [6.01588, 52.64366], [6.01574, 52.64412]]], [[[6.01492, 52.64562], [6.01567, 52.64424], [6.01466, 52.64528], [6.01492, 52.64562]]], [[[6.01398, 52.64603], [6.0136, 52.64618], [6.01351, 52.64653], [6.01416, 52.64611], [6.01398, 52.64603]]], [[[6.01247, 52.6472], [6.01317, 52.64675], [6.01337, 52.64662], [6.01286, 52.6466], [6.01247, 52.6472]]], [[[6.01166, 52.64773], [6.0123, 52.64731], [6.01227, 52.64728], [6.01114, 52.64753], [6.01166, 52.64773]]], [[[6.00267, 52.64871], [6.00969, 52.64711], [6.01075, 52.64252], [5.99927, 52.6457], [6.00267, 52.64871]]], [[[6.00854, 52.65007], [6.01005, 52.64894], [6.00946, 52.64911], [6.00854, 52.65007]]], [[[6.00792, 52.65054], [6.00836, 52.6502], [6.00838, 52.65019], [6.00776, 52.65038], [6.00774, 52.65067], [6.00792, 52.65054]]], [[[5.99953, 52.65464], [5.99995, 52.65445], [5.99692, 52.65505], [5.99952, 52.65464], [5.99953, 52.65464]]], [[[5.9964, 52.65512], [5.99545, 52.65512], [5.99504, 52.65535], [5.99641, 52.65513], [5.9964, 52.65512]]], [[[5.9913, 52.65584], [5.99115, 52.65586], [5.99102, 52.65599], [5.99158, 52.6559], [5.9913, 52.65584]]], [[[5.98977, 52.656], [5.98956, 52.65608], [5.98934, 52.65625], [5.9901, 52.65613], [5.98977, 52.656]]], [[[5.98824, 52.65629], [5.98796, 52.65635], [5.9878, 52.6565], [5.98853, 52.65638], [5.98824, 52.65629]]], [[[5.98523, 52.65647], [5.98494, 52.65674], [5.9842, 52.65715], [5.98607, 52.65677], [5.98523, 52.65647]]], [[[5.75442, 52.8362], [5.81879, 52.7847], [5.86026, 52.78182], [5.92257, 52.75069], [5.94255, 52.715], [5.96482, 52.6981], [5.93308, 52.67126], [5.96685, 52.66658], [5.98411, 52.65718], [5.96426, 52.63893], [5.83264, 52.61257], [5.75018, 52.61283], [5.75308, 52.60822], [5.74001, 52.61284], [5.65004, 52.61559], [5.61591, 52.65063], [5.64887, 52.64955], [5.64279, 52.66059], [5.65538, 52.66595], [5.64372, 52.68261], [5.59332, 52.67628], [5.5959, 52.76496], [5.66341, 52.83009], [5.71322, 52.83819], [5.72866, 52.8334], [5.72468, 52.84398], [5.75442, 52.8362]]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 173,
      "areaName": "Oldenzaal"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[6.88778, 52.32206], [6.90065, 52.33346], [6.93753, 52.33284], [6.93432, 52.32272], [6.95022, 52.31747], [6.93917, 52.28387], [6.91359, 52.28217], [6.8945, 52.29354], [6.85982, 52.29863], [6.86135, 52.30637], [6.88778, 52.32206]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 175,
      "areaName": "Ommen"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[6.3529, 52.54003], [6.32341, 52.59253], [6.40264, 52.5914], [6.41501, 52.57001], [6.48836, 52.569], [6.50494, 52.57589], [6.52183, 52.56059], [6.54132, 52.51897], [6.55406, 52.51246], [6.56441, 52.51887], [6.56128, 52.51293], [6.60964, 52.4925], [6.59517, 52.48029], [6.50547, 52.49096], [6.50377, 52.48172], [6.45253, 52.47105], [6.42878, 52.43869], [6.38056, 52.42982], [6.38415, 52.43944], [6.37106, 52.44971], [6.37849, 52.45642], [6.34262, 52.45691], [6.33152, 52.52208], [6.36142, 52.52402], [6.3529, 52.54003]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 177,
      "areaName": "Raalte"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[6.35754, 52.37707], [6.34308, 52.37003], [6.3335, 52.3514], [6.35602, 52.31822], [6.34119, 52.30908], [6.32653, 52.30163], [6.26724, 52.30081], [6.23795, 52.31323], [6.23567, 52.3399], [6.19686, 52.35211], [6.18879, 52.36448], [6.18946, 52.37575], [6.20134, 52.37139], [6.20399, 52.3869], [6.22988, 52.38984], [6.22158, 52.40909], [6.23096, 52.4235], [6.17743, 52.43115], [6.14415, 52.46766], [6.1625, 52.47439], [6.17129, 52.46874], [6.25357, 52.46309], [6.27824, 52.45704], [6.27863, 52.44735], [6.28995, 52.44645], [6.29183, 52.43472], [6.30226, 52.43144], [6.31886, 52.43209], [6.33442, 52.42444], [6.39031, 52.42814], [6.40517, 52.41554], [6.38841, 52.37978], [6.35754, 52.37707]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 180,
      "areaName": "Staphorst"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[6.31475, 52.62779], [6.30306, 52.59714], [6.13138, 52.58125], [6.12406, 52.59406], [6.10323, 52.60537], [6.10748, 52.61887], [6.09592, 52.63094], [6.10429, 52.65712], [6.15944, 52.69218], [6.16965, 52.68612], [6.163, 52.68006], [6.18222, 52.67518], [6.18055, 52.68159], [6.19423, 52.67663], [6.21498, 52.68649], [6.27007, 52.66479], [6.27916, 52.66905], [6.29537, 52.66229], [6.32699, 52.66919], [6.31475, 52.62779]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 183,
      "areaName": "Tubbergen"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[6.85348, 52.42707], [6.86358, 52.36373], [6.7834, 52.36012], [6.75377, 52.33004], [6.70974, 52.34343], [6.72056, 52.35233], [6.71347, 52.37649], [6.66967, 52.41744], [6.67789, 52.42783], [6.67333, 52.44145], [6.69775, 52.45178], [6.71771, 52.47813], [6.77459, 52.4596], [6.8543, 52.45971], [6.85254, 52.44991], [6.94922, 52.43287], [6.85348, 52.42707]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 184,
      "areaName": "Urk"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[5.61661, 52.6513], [5.59147, 52.66099], [5.59332, 52.67628], [5.64372, 52.68261], [5.65538, 52.66595], [5.64279, 52.66059], [5.64887, 52.64955], [5.61661, 52.6513]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 189,
      "areaName": "Wierden"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[6.48799, 52.3435], [6.4908, 52.34935], [6.51887, 52.35516], [6.52079, 52.36142], [6.49906, 52.36356], [6.49552, 52.37618], [6.51411, 52.38166], [6.50854, 52.39215], [6.51598, 52.40612], [6.57595, 52.41751], [6.61549, 52.36253], [6.5977, 52.3429], [6.61902, 52.32615], [6.60476, 52.31223], [6.63178, 52.30178], [6.60536, 52.27069], [6.56439, 52.27241], [6.54996, 52.2878], [6.54509, 52.31838], [6.53965, 52.3158], [6.53584, 52.31564], [6.52488, 52.32568], [6.46819, 52.32646], [6.48799, 52.3435]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 193,
      "areaName": "Zwolle"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[6.0894, 52.55184], [6.10334, 52.56739], [6.14053, 52.5521], [6.16681, 52.56525], [6.14758, 52.5852], [6.20214, 52.58495], [6.21081, 52.5678], [6.18785, 52.52352], [6.17332, 52.51883], [6.201, 52.49099], [6.19255, 52.48163], [6.14415, 52.46766], [6.15508, 52.45366], [6.13714, 52.44076], [6.10502, 52.44259], [6.09827, 52.47118], [6.01507, 52.51791], [6.01867, 52.52592], [6.03017, 52.52675], [6.03045, 52.53806], [6.00362, 52.55039], [6.06315, 52.56728], [6.0894, 52.55184]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 196,
      "areaName": "Rijnwaarden"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[6.01994, 51.91628], [6.09463, 51.91033], [6.10276, 51.89267], [6.13713, 51.8858], [6.14454, 51.86974], [6.167, 51.86162], [6.16656, 51.84072], [6.09952, 51.84939], [6.04166, 51.87292], [6.01976, 51.89822], [5.98706, 51.91331], [6.01994, 51.91628]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 197,
      "areaName": "Aalten"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[6.47606, 51.90197], [6.47235, 51.90736], [6.49284, 51.9173], [6.50478, 51.94598], [6.51746, 51.94791], [6.53283, 51.96235], [6.52727, 51.96602], [6.5592, 51.97437], [6.63393, 51.96567], [6.63947, 51.95981], [6.62907, 51.95009], [6.63201, 51.93782], [6.65897, 51.92904], [6.66101, 51.9156], [6.66873, 51.91386], [6.63417, 51.90101], [6.58578, 51.89408], [6.56061, 51.88222], [6.54415, 51.88461], [6.47251, 51.85382], [6.4673, 51.85442], [6.46434, 51.85567], [6.48425, 51.87885], [6.47606, 51.90197]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 200,
      "areaName": "Apeldoorn"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[5.98936, 52.27403], [6.02886, 52.27681], [6.03642, 52.2686], [6.02651, 52.2429], [6.03342, 52.22408], [6.04691, 52.22137], [6.05825, 52.19617], [6.04954, 52.18429], [6.07848, 52.13888], [6.04058, 52.11457], [6.03405, 52.09572], [6.00893, 52.07404], [5.99048, 52.07916], [5.95593, 52.07334], [5.94564, 52.07808], [5.95147, 52.0999], [5.88345, 52.10634], [5.86475, 52.12556], [5.85955, 52.14875], [5.80984, 52.15141], [5.80196, 52.17736], [5.81193, 52.18488], [5.79966, 52.19465], [5.75058, 52.19373], [5.73076, 52.2086], [5.72743, 52.2193], [5.74303, 52.22349], [5.72639, 52.2425], [5.76145, 52.2483], [5.75126, 52.26956], [5.82143, 52.27267], [5.85081, 52.2687], [5.86089, 52.25581], [5.87959, 52.26499], [5.93621, 52.27442], [5.97389, 52.27321], [5.98574, 52.28567], [5.99242, 52.2849], [5.98936, 52.27403]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 202,
      "areaName": "Arnhem"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[5.83051, 51.95327], [5.83534, 51.97356], [5.85912, 51.96954], [5.87086, 51.97511], [5.86374, 51.97797], [5.86374, 51.99589], [5.80296, 52.00405], [5.80834, 52.01876], [5.83792, 52.04663], [5.85005, 52.0516], [5.8994, 52.04996], [5.89812, 52.06336], [5.90974, 52.0621], [5.9461, 52.07789], [5.95593, 52.07334], [5.9371, 52.04853], [5.9414, 52.01149], [5.9592, 51.98964], [5.99034, 51.97441], [5.95546, 51.96702], [5.94925, 51.95745], [5.95523, 51.94875], [5.93228, 51.95971], [5.92945, 51.95059], [5.91505, 51.9499], [5.90186, 51.93346], [5.82993, 51.94524], [5.83051, 51.95327]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 203,
      "areaName": "Barneveld"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[5.54327, 52.17651], [5.5687, 52.17906], [5.56453, 52.18534], [5.57794, 52.18614], [5.57767, 52.1948], [5.6003, 52.19765], [5.62565, 52.19272], [5.63327, 52.20817], [5.68127, 52.22534], [5.68364, 52.24062], [5.72639, 52.2425], [5.74303, 52.22349], [5.72743, 52.2193], [5.73076, 52.2086], [5.75058, 52.19373], [5.79203, 52.19699], [5.81193, 52.18488], [5.80196, 52.17736], [5.80984, 52.15141], [5.72035, 52.14626], [5.71728, 52.13645], [5.66902, 52.13469], [5.56917, 52.12219], [5.56862, 52.11821], [5.56189, 52.12168], [5.54674, 52.11137], [5.5463, 52.10244], [5.51747, 52.1006], [5.48645, 52.11536], [5.5077, 52.1139], [5.49469, 52.1247], [5.51408, 52.13592], [5.49731, 52.14144], [5.49898, 52.14739], [5.48134, 52.1505], [5.48432, 52.15806], [5.47243, 52.16285], [5.48517, 52.17174], [5.48555, 52.18214], [5.50104, 52.18862], [5.53102, 52.19161], [5.54327, 52.17651]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 209,
      "areaName": "Beuningen"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[5.82151, 51.8556], [5.78722, 51.84093], [5.77508, 51.84425], [5.76479, 51.83227], [5.67811, 51.84315], [5.68166, 51.85687], [5.66785, 51.86593], [5.68501, 51.89565], [5.69148, 51.89557], [5.81031, 51.87277], [5.82569, 51.86621], [5.82151, 51.8556]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 213,
      "areaName": "Brummen"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[6.05155, 52.1244], [6.06962, 52.1313], [6.07597, 52.14391], [6.09943, 52.15061], [6.16063, 52.16187], [6.18468, 52.16122], [6.17932, 52.15226], [6.14627, 52.15777], [6.14044, 52.14822], [6.1734, 52.14497], [6.18712, 52.11645], [6.21261, 52.11154], [6.21798, 52.09806], [6.21053, 52.09245], [6.17629, 52.09062], [6.16834, 52.07634], [6.13747, 52.05918], [6.10342, 52.07814], [6.06828, 52.08825], [6.02374, 52.06728], [6.00609, 52.06635], [6.05155, 52.1244]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 214,
      "areaName": "Buren"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[5.30658, 51.89658], [5.27361, 51.92007], [5.28518, 51.92258], [5.28495, 51.93069], [5.25517, 51.93539], [5.24192, 51.94552], [5.26008, 51.9517], [5.25532, 51.95422], [5.27037, 51.96543], [5.32344, 51.9551], [5.3542, 51.97003], [5.38707, 51.96983], [5.44285, 51.98593], [5.48621, 51.98383], [5.53894, 51.96783], [5.55693, 51.95571], [5.58662, 51.95083], [5.57187, 51.94154], [5.53351, 51.9433], [5.55414, 51.93427], [5.55381, 51.91817], [5.5053, 51.92393], [5.48928, 51.9183], [5.4909, 51.92474], [5.43511, 51.92067], [5.34143, 51.87343], [5.3355, 51.88164], [5.31515, 51.88059], [5.32337, 51.88901], [5.30658, 51.89658]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 216,
      "areaName": "Culemborg"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[5.25627, 51.97094], [5.27037, 51.96543], [5.25532, 51.95422], [5.26008, 51.9517], [5.24192, 51.94552], [5.25526, 51.93583], [5.2426, 51.9272], [5.21181, 51.91965], [5.20769, 51.92621], [5.1592, 51.91963], [5.1668, 51.92602], [5.14243, 51.92494], [5.18023, 51.96745], [5.20743, 51.95948], [5.23546, 51.97847], [5.25627, 51.97094]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 221,
      "areaName": "Doesburg"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[6.13103, 52.02086], [6.1215, 52.03462], [6.15042, 52.0421], [6.15896, 52.03739], [6.17554, 52.03938], [6.1773, 52.02034], [6.16118, 52.01383], [6.15925, 51.99974], [6.11054, 51.99557], [6.13103, 52.02086]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 222,
      "areaName": "Doetinchem"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[6.32752, 51.97575], [6.37003, 51.97625], [6.36567, 51.96938], [6.39038, 51.96833], [6.38088, 51.97774], [6.4025, 51.98217], [6.41608, 51.97262], [6.38122, 51.93323], [6.36094, 51.92296], [6.33235, 51.92564], [6.30207, 51.94413], [6.22075, 51.94458], [6.20312, 51.9422], [6.20471, 51.93667], [6.15804, 51.95875], [6.14469, 51.9805], [6.2298, 51.97621], [6.22242, 51.98415], [6.23231, 51.98859], [6.2497, 51.97595], [6.2573, 51.98253], [6.25072, 51.98733], [6.27048, 51.98342], [6.2919, 51.99335], [6.29564, 51.98845], [6.31913, 51.99426], [6.33566, 51.98565], [6.32752, 51.97575]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 225,
      "areaName": "Druten"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[5.56851, 51.8803], [5.57699, 51.89244], [5.54512, 51.88797], [5.53136, 51.89475], [5.56706, 51.9018], [5.68501, 51.89565], [5.66785, 51.86593], [5.63618, 51.86736], [5.6347, 51.85109], [5.6432, 51.84499], [5.60983, 51.83627], [5.58501, 51.83911], [5.57727, 51.86458], [5.55304, 51.86254], [5.56851, 51.8803]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 226,
      "areaName": "Duiven"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[6.00043, 51.97617], [6.02182, 51.9782], [6.03119, 51.9711], [6.04581, 51.98037], [6.06885, 51.9804], [6.05267, 51.9527], [6.06345, 51.94929], [6.03746, 51.91396], [5.98706, 51.91331], [5.96861, 51.92821], [5.96578, 51.93877], [5.98599, 51.94523], [5.984, 51.9724], [6.00043, 51.97617]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 228,
      "areaName": "Ede"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[5.86429, 52.12724], [5.88345, 52.10634], [5.95147, 52.0999], [5.94607, 52.07773], [5.90974, 52.0621], [5.89812, 52.06336], [5.8994, 52.04996], [5.85005, 52.0516], [5.81337, 52.02407], [5.74514, 52.01977], [5.73519, 52.00178], [5.68025, 51.99168], [5.61931, 51.99274], [5.61449, 51.99965], [5.60507, 51.99406], [5.59225, 52.00119], [5.59003, 52.03439], [5.56739, 52.04061], [5.57085, 52.048], [5.55788, 52.04895], [5.56262, 52.07919], [5.54674, 52.11137], [5.56189, 52.12168], [5.56862, 52.11821], [5.56917, 52.12219], [5.66902, 52.13469], [5.71728, 52.13645], [5.72035, 52.14626], [5.77469, 52.15223], [5.85955, 52.14875], [5.86429, 52.12724]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 230,
      "areaName": "Elburg"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[5.84295, 52.47026], [5.87762, 52.45312], [5.86875, 52.44478], [5.91629, 52.41295], [5.90599, 52.4086], [5.92434, 52.39139], [5.87601, 52.35787], [5.82118, 52.39116], [5.81717, 52.40157], [5.77075, 52.39552], [5.75691, 52.40687], [5.81152, 52.43598], [5.82466, 52.4502], [5.81682, 52.4562], [5.82802, 52.46936], [5.82751, 52.45769], [5.84295, 52.47026]], [[5.82441, 52.45242], [5.82288, 52.45222], [5.82374, 52.45139], [5.82452, 52.45161], [5.82441, 52.45242]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 232,
      "areaName": "Epe"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[5.88093, 52.33521], [5.86481, 52.35133], [5.91169, 52.38679], [5.95102, 52.39844], [5.99133, 52.3786], [6.04272, 52.3635], [6.04178, 52.35651], [6.07785, 52.3643], [6.09486, 52.35697], [6.07607, 52.35057], [6.07368, 52.33057], [6.05295, 52.33091], [6.0347, 52.29456], [6.04048, 52.2682], [6.03031, 52.26923], [6.02886, 52.27681], [5.98898, 52.27409], [5.99242, 52.2849], [5.98574, 52.28567], [5.97389, 52.27321], [5.93621, 52.27442], [5.87959, 52.26499], [5.86089, 52.25581], [5.84083, 52.3044], [5.88093, 52.33521]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 233,
      "areaName": "Ermelo"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[5.71539, 52.24018], [5.68364, 52.24062], [5.63705, 52.27249], [5.55524, 52.28672], [5.54772, 52.29233], [5.56075, 52.31825], [5.57575, 52.3266], [5.60205, 52.31799], [5.63026, 52.32685], [5.67812, 52.30149], [5.70617, 52.32838], [5.75075, 52.31707], [5.74468, 52.28819], [5.75549, 52.27783], [5.7465, 52.27155], [5.76145, 52.2483], [5.71539, 52.24018]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 236,
      "areaName": "Geldermalsen"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[5.29489, 51.90005], [5.32337, 51.88901], [5.31532, 51.88049], [5.33946, 51.87787], [5.32836, 51.85935], [5.30839, 51.85169], [5.27996, 51.85718], [5.22991, 51.85638], [5.1922, 51.84761], [5.14964, 51.8473], [5.15052, 51.86141], [5.13809, 51.87291], [5.12058, 51.87157], [5.11427, 51.88927], [5.14907, 51.92792], [5.1668, 51.92602], [5.1589, 51.91965], [5.20769, 51.92621], [5.21181, 51.91965], [5.25506, 51.93548], [5.28551, 51.93023], [5.28518, 51.92258], [5.27361, 51.92007], [5.29489, 51.90005]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 241,
      "areaName": "Groesbeek"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[5.88738, 51.81131], [5.88041, 51.82068], [5.9084, 51.82933], [5.92541, 51.81791], [5.95654, 51.81004], [5.97906, 51.79765], [5.97455, 51.78506], [5.99043, 51.7832], [5.98236, 51.7737], [5.9905, 51.76628], [5.95682, 51.75194], [5.95243, 51.74454], [5.93277, 51.74194], [5.93332, 51.7481], [5.91528, 51.75229], [5.88798, 51.78299], [5.87907, 51.80967], [5.88738, 51.81131]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 243,
      "areaName": "Harderwijk"
    },
    "geometry": {
      "type": "MultiPolygon",
      "coordinates": [[[[5.59155, 52.36032], [5.59341, 52.36197], [5.60025, 52.35983], [5.59347, 52.3594], [5.59155, 52.36032]]], [[[5.61841, 52.3612], [5.61674, 52.36064], [5.61403, 52.36225], [5.61532, 52.36261], [5.61841, 52.3612]]], [[[5.62616, 52.36286], [5.62602, 52.36258], [5.62171, 52.36107], [5.62325, 52.3626], [5.62616, 52.36286]]], [[[5.67892, 52.37884], [5.71285, 52.3339], [5.67812, 52.30149], [5.63026, 52.32685], [5.60205, 52.31799], [5.58141, 52.32262], [5.57575, 52.3266], [5.60223, 52.33885], [5.61555, 52.35349], [5.60742, 52.36279], [5.60136, 52.36086], [5.59381, 52.36309], [5.59567, 52.36343], [5.59828, 52.36352], [5.6052, 52.36332], [5.60742, 52.36287], [5.62417, 52.35087], [5.61886, 52.36104], [5.62701, 52.35697], [5.62917, 52.36419], [5.63311, 52.3618], [5.64054, 52.36336], [5.63422, 52.36302], [5.63092, 52.36522], [5.65397, 52.36479], [5.67892, 52.37884]], [[5.59797, 52.36345], [5.59746, 52.36278], [5.60014, 52.36282], [5.60019, 52.36339], [5.59797, 52.36345]], [[5.59728, 52.36345], [5.59495, 52.36326], [5.59509, 52.36273], [5.59732, 52.36278], [5.59728, 52.36345]]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 244,
      "areaName": "Hattem"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[6.02786, 52.50961], [6.09674, 52.47238], [6.10355, 52.45396], [6.02267, 52.4441], [6.03626, 52.4733], [6.0274, 52.48272], [6.01583, 52.48288], [6.01864, 52.48937], [6.00079, 52.50015], [6.02786, 52.50961]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 246,
      "areaName": "Heerde"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[6.06068, 52.45046], [6.10355, 52.45396], [6.10334, 52.44407], [6.11947, 52.43292], [6.11078, 52.40775], [6.13055, 52.39998], [6.12222, 52.38021], [6.08157, 52.37173], [6.07486, 52.36192], [6.04178, 52.35651], [6.04272, 52.3635], [5.99133, 52.3786], [5.951, 52.39834], [6.01776, 52.44421], [6.06068, 52.45046]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 252,
      "areaName": "Heumen"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[5.73568, 51.76891], [5.73398, 51.77994], [5.78066, 51.7842], [5.80095, 51.79515], [5.81022, 51.79059], [5.8366, 51.80591], [5.86898, 51.81009], [5.87911, 51.80953], [5.89341, 51.77785], [5.86789, 51.77552], [5.86447, 51.75768], [5.77967, 51.75221], [5.75074, 51.7564], [5.73568, 51.76891]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 262,
      "areaName": "Lochem"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[6.21455, 52.23127], [6.27129, 52.22641], [6.29273, 52.23087], [6.29794, 52.22553], [6.32043, 52.22567], [6.33871, 52.22715], [6.33802, 52.23622], [6.35089, 52.24168], [6.38185, 52.24611], [6.41664, 52.24214], [6.42861, 52.22372], [6.49242, 52.17807], [6.48379, 52.1572], [6.46137, 52.15209], [6.48129, 52.14243], [6.492, 52.12528], [6.47854, 52.10069], [6.4552, 52.10798], [6.424, 52.09691], [6.39153, 52.11305], [6.39584, 52.13083], [6.36879, 52.12385], [6.35772, 52.13553], [6.32831, 52.13771], [6.32404, 52.15276], [6.23799, 52.14603], [6.23526, 52.15543], [6.22348, 52.15384], [6.20722, 52.16664], [6.19871, 52.16291], [6.19198, 52.17813], [6.15933, 52.18993], [6.15626, 52.19703], [6.19087, 52.20965], [6.16627, 52.23101], [6.18253, 52.23383], [6.21722, 52.2264], [6.21455, 52.23127]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 263,
      "areaName": "Maasdriel"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[5.1839, 51.76609], [5.26995, 51.77432], [5.26645, 51.79312], [5.28844, 51.79957], [5.28101, 51.80192], [5.28172, 51.82121], [5.31127, 51.82314], [5.35127, 51.80398], [5.36601, 51.8081], [5.40063, 51.83766], [5.41501, 51.82502], [5.40171, 51.82089], [5.3694, 51.79025], [5.35642, 51.75699], [5.30034, 51.73729], [5.27282, 51.74007], [5.24823, 51.73361], [5.22359, 51.74321], [5.1857, 51.74192], [5.17367, 51.76402], [5.1839, 51.76609]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 265,
      "areaName": "Millingen aan de Rijn"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[6.02579, 51.86473], [6.01146, 51.87071], [5.98575, 51.86776], [6.01219, 51.88167], [6.06349, 51.86545], [6.05142, 51.85666], [6.0553, 51.85235], [6.01117, 51.8372], [6.00705, 51.84415], [6.02802, 51.8572], [6.02579, 51.86473]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 267,
      "areaName": "Nijkerk"
    },
    "geometry": {
      "type": "MultiPolygon",
      "coordinates": [[[[5.47798, 52.25992], [5.47779, 52.26001], [5.47795, 52.26015], [5.47805, 52.25995], [5.47798, 52.25992]]], [[[5.47298, 52.26207], [5.48369, 52.23924], [5.50644, 52.23159], [5.51297, 52.23573], [5.54992, 52.20234], [5.63327, 52.20817], [5.62565, 52.19272], [5.6003, 52.19765], [5.57767, 52.1948], [5.57794, 52.18614], [5.56453, 52.18534], [5.5687, 52.17906], [5.5448, 52.17474], [5.53905, 52.18926], [5.52121, 52.19183], [5.48555, 52.18214], [5.47992, 52.16581], [5.44359, 52.16883], [5.44104, 52.20569], [5.39324, 52.22079], [5.4035, 52.24675], [5.45429, 52.2535], [5.47298, 52.26207]]], [[[5.47396, 52.26263], [5.47103, 52.26188], [5.46756, 52.26163], [5.47613, 52.26317], [5.47396, 52.26263]]], [[[5.47062, 52.26328], [5.46981, 52.26325], [5.47145, 52.26354], [5.47128, 52.26344], [5.47062, 52.26328]]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 268,
      "areaName": "Nijmegen"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[5.77508, 51.84424], [5.78722, 51.84093], [5.80733, 51.85184], [5.81737, 51.84949], [5.82569, 51.86621], [5.81708, 51.87027], [5.83161, 51.87223], [5.83779, 51.88343], [5.83024, 51.89386], [5.85712, 51.89462], [5.85775, 51.88833], [5.87284, 51.88739], [5.88677, 51.8652], [5.8803, 51.84495], [5.90835, 51.8293], [5.88041, 51.82068], [5.88869, 51.81016], [5.84197, 51.8075], [5.81022, 51.79059], [5.79265, 51.79853], [5.77392, 51.82155], [5.75762, 51.82399], [5.77508, 51.84424]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 269,
      "areaName": "Oldebroek"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[5.90158, 52.50568], [5.92556, 52.47406], [5.95299, 52.48445], [5.96536, 52.47646], [6.00079, 52.50015], [6.03683, 52.47154], [6.02267, 52.4441], [5.96755, 52.406], [5.92434, 52.39139], [5.90599, 52.4086], [5.91629, 52.41295], [5.86875, 52.44478], [5.87762, 52.45312], [5.8419, 52.47072], [5.8658, 52.51866], [5.87902, 52.52166], [5.90158, 52.50568]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 273,
      "areaName": "Putten"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[5.53622, 52.2176], [5.51297, 52.23573], [5.50644, 52.23159], [5.48743, 52.23685], [5.47419, 52.25647], [5.49454, 52.2638], [5.52792, 52.26377], [5.52373, 52.26554], [5.52356, 52.26694], [5.51862, 52.26604], [5.50838, 52.26496], [5.5003, 52.26494], [5.49692, 52.2642], [5.4946, 52.26419], [5.49274, 52.26353], [5.48373, 52.26225], [5.47795, 52.26015], [5.48189, 52.26213], [5.5004, 52.26514], [5.52396, 52.26708], [5.52829, 52.26468], [5.54808, 52.29181], [5.58799, 52.27871], [5.64086, 52.27124], [5.68364, 52.24062], [5.68127, 52.22534], [5.63292, 52.20808], [5.54992, 52.20234], [5.53622, 52.2176]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 274,
      "areaName": "Renkum"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[5.77047, 52.02116], [5.81337, 52.02407], [5.80296, 52.00405], [5.86374, 51.99589], [5.86778, 51.97241], [5.82442, 51.97311], [5.78035, 51.95899], [5.74489, 51.97022], [5.72261, 51.96405], [5.71369, 51.96797], [5.72436, 52.00071], [5.73588, 52.00232], [5.74219, 52.01745], [5.77047, 52.02116]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 275,
      "areaName": "Rheden"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[6.02032, 51.99691], [5.99034, 51.97441], [5.95361, 51.995], [5.95153, 51.99964], [5.97471, 52.00291], [5.98046, 52.0184], [5.9958, 52.02622], [5.97796, 52.05439], [6.00025, 52.05441], [6.00609, 52.06635], [6.02374, 52.06728], [6.0585, 52.08532], [6.0761, 52.0875], [6.13575, 52.06206], [6.11092, 52.04296], [6.13164, 52.02754], [6.12656, 52.01094], [6.10948, 51.99634], [6.09433, 51.99284], [6.06399, 52.015], [6.03282, 51.99703], [6.02032, 51.99691]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 277,
      "areaName": "Rozendaal"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[5.95097, 52.00135], [5.94075, 52.01513], [5.94091, 52.05795], [5.95593, 52.07334], [5.99048, 52.07916], [6.00885, 52.07401], [6.00188, 52.05529], [5.97796, 52.05439], [5.9958, 52.02622], [5.98046, 52.0184], [5.97471, 52.00291], [5.95097, 52.00135]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 279,
      "areaName": "Scherpenzeel"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[5.50684, 52.07675], [5.48407, 52.06963], [5.45924, 52.08023], [5.48608, 52.09366], [5.4843, 52.10554], [5.49386, 52.1111], [5.53916, 52.09781], [5.5307, 52.08195], [5.50684, 52.07675]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 281,
      "areaName": "Tiel"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[5.4451, 51.88426], [5.41523, 51.8518], [5.39169, 51.85392], [5.37841, 51.8634], [5.32829, 51.85698], [5.32803, 51.8648], [5.34487, 51.87746], [5.39947, 51.89839], [5.4251, 51.9179], [5.45338, 51.92276], [5.46469, 51.91899], [5.46009, 51.91175], [5.46945, 51.90734], [5.45553, 51.90456], [5.46392, 51.88901], [5.4451, 51.88426]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 282,
      "areaName": "Ubbergen"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[5.98575, 51.86776], [6.01461, 51.87013], [6.02802, 51.8572], [6.0101, 51.8482], [6.01471, 51.8375], [6.00226, 51.83249], [5.96298, 51.83691], [5.94504, 51.82354], [5.95815, 51.81693], [5.94806, 51.81644], [5.94843, 51.81137], [5.91774, 51.82156], [5.8803, 51.84495], [5.88739, 51.84972], [5.88371, 51.86207], [5.90364, 51.87255], [5.93219, 51.87355], [5.96625, 51.85445], [5.98575, 51.86776]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 285,
      "areaName": "Voorst"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[6.05297, 52.33091], [6.07368, 52.33057], [6.06653, 52.31781], [6.07982, 52.31759], [6.08413, 52.30157], [6.10132, 52.30122], [6.13007, 52.26069], [6.12389, 52.25146], [6.15378, 52.24676], [6.14224, 52.23846], [6.14577, 52.22899], [6.16137, 52.22476], [6.16509, 52.21746], [6.16627, 52.23101], [6.18953, 52.217], [6.18591, 52.20525], [6.1561, 52.19603], [6.19334, 52.17682], [6.18468, 52.16122], [6.14249, 52.1592], [6.07607, 52.14394], [6.06451, 52.15673], [6.06179, 52.17326], [6.04939, 52.18475], [6.05825, 52.19617], [6.04691, 52.22137], [6.03342, 52.22408], [6.0248, 52.24895], [6.04311, 52.26892], [6.03469, 52.29451], [6.05297, 52.33091]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 289,
      "areaName": "Wageningen"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[5.6783, 51.9914], [5.72436, 52.00071], [5.71361, 51.96824], [5.72261, 51.96405], [5.64638, 51.95333], [5.63623, 51.93669], [5.60594, 51.94312], [5.62731, 51.95258], [5.61833, 51.96626], [5.62616, 51.97389], [5.60683, 51.99742], [5.61449, 51.99965], [5.61931, 51.99274], [5.6783, 51.9914]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 293,
      "areaName": "Westervoort"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[6.00196, 51.98065], [6.0016, 51.97716], [5.9984, 51.97487], [5.98399, 51.97239], [5.98436, 51.94302], [5.96179, 51.93879], [5.94953, 51.95567], [5.95243, 51.96457], [6.00196, 51.98065]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 294,
      "areaName": "Winterswijk"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[6.65817, 52.01118], [6.68357, 52.0282], [6.68785, 52.03986], [6.71413, 52.04006], [6.75298, 52.02841], [6.81141, 51.9981], [6.8078, 51.99497], [6.82661, 51.99353], [6.82853, 51.96411], [6.79887, 51.95874], [6.78894, 51.92966], [6.72197, 51.89606], [6.69535, 51.91587], [6.66101, 51.9156], [6.659, 51.92902], [6.63201, 51.93782], [6.63758, 51.96495], [6.65706, 51.97755], [6.65817, 52.01118]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 296,
      "areaName": "Wijchen"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[5.6965, 51.78547], [5.66021, 51.79623], [5.64101, 51.81804], [5.59798, 51.82805], [5.60896, 51.83099], [5.60663, 51.83569], [5.6432, 51.84499], [5.6347, 51.85109], [5.63618, 51.86736], [5.67957, 51.86053], [5.68482, 51.84878], [5.67811, 51.84315], [5.76473, 51.83229], [5.75762, 51.82399], [5.77392, 51.82155], [5.80095, 51.79515], [5.78066, 51.7842], [5.73398, 51.77994], [5.72975, 51.77285], [5.70598, 51.77626], [5.6965, 51.78547]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 297,
      "areaName": "Zaltbommel"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[5.12176, 51.81661], [5.17064, 51.81703], [5.21148, 51.81], [5.28172, 51.82121], [5.28101, 51.80192], [5.28844, 51.79957], [5.26645, 51.79312], [5.26995, 51.77432], [5.18065, 51.76656], [5.17367, 51.76402], [5.1857, 51.74192], [5.12805, 51.73761], [5.12634, 51.74502], [5.14271, 51.75521], [5.13758, 51.77291], [5.09731, 51.78759], [5.06841, 51.77992], [5.05084, 51.79662], [5.016, 51.80821], [5.00036, 51.82093], [5.04211, 51.81736], [5.08765, 51.8268], [5.12176, 51.81661]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 299,
      "areaName": "Zevenaar"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[6.16158, 51.99075], [6.16067, 51.98105], [6.12937, 51.97826], [6.08951, 51.96351], [6.09143, 51.93872], [6.15664, 51.91128], [6.16563, 51.8986], [6.15676, 51.90522], [6.12567, 51.8982], [6.11789, 51.90166], [6.10347, 51.89248], [6.09287, 51.91105], [6.0379, 51.91472], [6.06345, 51.94929], [6.05267, 51.9527], [6.06885, 51.9804], [6.04581, 51.98037], [6.02689, 51.97089], [6.02182, 51.9782], [6.00173, 51.97755], [6.0098, 51.99438], [6.0325, 51.9969], [6.06333, 52.01502], [6.0769, 52.01031], [6.08792, 51.99343], [6.14983, 52.00187], [6.16431, 51.999], [6.16158, 51.99075]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 301,
      "areaName": "Zutphen"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[6.22348, 52.15384], [6.23526, 52.15543], [6.23799, 52.14603], [6.32404, 52.15276], [6.32831, 52.13771], [6.27749, 52.12173], [6.26984, 52.11164], [6.23388, 52.11313], [6.22208, 52.10668], [6.2194, 52.08874], [6.21535, 52.10897], [6.18743, 52.11617], [6.1734, 52.14497], [6.14962, 52.14401], [6.14048, 52.15073], [6.14742, 52.158], [6.18161, 52.15271], [6.1928, 52.1698], [6.22348, 52.15384]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 302,
      "areaName": "Nunspeet"
    },
    "geometry": {
      "type": "MultiPolygon",
      "coordinates": [[[[5.7379, 52.39862], [5.73758, 52.3986], [5.73758, 52.39824], [5.73745, 52.39872], [5.7379, 52.39862]]], [[[5.75884, 52.40504], [5.77075, 52.39552], [5.81717, 52.40157], [5.82118, 52.39116], [5.87601, 52.35787], [5.86481, 52.35133], [5.88095, 52.33519], [5.84083, 52.3044], [5.85081, 52.2687], [5.82143, 52.27267], [5.74923, 52.26827], [5.75482, 52.28171], [5.74384, 52.29805], [5.75075, 52.31707], [5.70598, 52.32844], [5.71267, 52.33694], [5.67892, 52.37884], [5.69988, 52.38125], [5.75884, 52.40504]]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 303,
      "areaName": "Dronten"
    },
    "geometry": {
      "type": "MultiPolygon",
      "coordinates": [[[[5.63766, 52.37377], [5.63531, 52.3716], [5.63247, 52.37149], [5.63365, 52.37255], [5.63766, 52.37377]]], [[[5.63973, 52.3779], [5.63833, 52.37776], [5.63894, 52.37888], [5.6401, 52.37848], [5.63973, 52.3779]]], [[[5.67766, 52.37872], [5.67829, 52.37886], [5.67857, 52.37881], [5.67766, 52.37872]]], [[[5.67892, 52.37884], [5.67879, 52.37883], [5.67918, 52.37887], [5.67892, 52.37884]]], [[[5.69448, 52.38148], [5.69404, 52.38189], [5.69427, 52.38204], [5.69472, 52.38174], [5.69448, 52.38148]]], [[[5.70132, 52.38349], [5.70113, 52.38337], [5.7009, 52.38355], [5.70098, 52.3836], [5.70132, 52.38349]]], [[[5.70325, 52.38461], [5.70303, 52.38457], [5.70277, 52.38513], [5.70314, 52.38494], [5.70325, 52.38461]]], [[[5.7041, 52.3851], [5.70351, 52.38504], [5.70309, 52.3853], [5.70324, 52.38532], [5.7041, 52.3851]]], [[[5.70779, 52.38691], [5.70737, 52.3868], [5.70712, 52.38698], [5.70735, 52.38704], [5.70779, 52.38691]]], [[[5.68976, 52.39233], [5.69075, 52.39031], [5.69496, 52.39156], [5.69063, 52.38967], [5.68976, 52.39233]]], [[[5.73885, 52.40173], [5.73771, 52.40075], [5.73795, 52.39864], [5.73723, 52.40022], [5.73802, 52.40204], [5.73885, 52.40173]]], [[[5.72015, 52.4075], [5.72229, 52.40752], [5.72298, 52.40696], [5.72009, 52.40695], [5.72015, 52.4075]]], [[[5.73016, 52.40893], [5.732, 52.40944], [5.73337, 52.40766], [5.7302, 52.40775], [5.73016, 52.40893]]], [[[5.74346, 52.40995], [5.74309, 52.40905], [5.7383, 52.40931], [5.73963, 52.40985], [5.74346, 52.40995]]], [[[5.82077, 52.44816], [5.82031, 52.44774], [5.82038, 52.4479], [5.82077, 52.44816]]], [[[5.82241, 52.44971], [5.82135, 52.44871], [5.8213, 52.44872], [5.8222, 52.44988], [5.82241, 52.44971]]], [[[5.84469, 52.48722], [5.84601, 52.48607], [5.84586, 52.48531], [5.8429, 52.48152], [5.84469, 52.48722]]], [[[5.85661, 52.50366], [5.85704, 52.50166], [5.85449, 52.50054], [5.8546, 52.50285], [5.85661, 52.50366]]], [[[5.86184, 52.52479], [5.86218, 52.52197], [5.85963, 52.52023], [5.85849, 52.5244], [5.86184, 52.52479]]], [[[5.85607, 52.54513], [5.8576, 52.54565], [5.85719, 52.54269], [5.85545, 52.54382], [5.85584, 52.54622], [5.85607, 52.54513]]], [[[5.75648, 52.59665], [5.75796, 52.59079], [5.75694, 52.58895], [5.75452, 52.58856], [5.75648, 52.59665]]], [[[5.73672, 52.60286], [5.75228, 52.60207], [5.75137, 52.58887], [5.74424, 52.59377], [5.74634, 52.58956], [5.73786, 52.59198], [5.73616, 52.59126], [5.73486, 52.59171], [5.73672, 52.60286]]], [[[5.74547, 52.60458], [5.75058, 52.60394], [5.75459, 52.60012], [5.75485, 52.60147], [5.75484, 52.59808], [5.75231, 52.60223], [5.74547, 52.60458]]], [[[5.74356, 52.60464], [5.7444, 52.60454], [5.74498, 52.60413], [5.73738, 52.60309], [5.74356, 52.60464]]], [[[5.65115, 52.61473], [5.63997, 52.60787], [5.65635, 52.59686], [5.75721, 52.5795], [5.75862, 52.58157], [5.76173, 52.58271], [5.75874, 52.58133], [5.75804, 52.57888], [5.81194, 52.57791], [5.85249, 52.55033], [5.85732, 52.5197], [5.84996, 52.49564], [5.79756, 52.43841], [5.74639, 52.41367], [5.72118, 52.41637], [5.65961, 52.39727], [5.61638, 52.36946], [5.62302, 52.40887], [5.58907, 52.41119], [5.56664, 52.43586], [5.58639, 52.44771], [5.56542, 52.47028], [5.60587, 52.48452], [5.59129, 52.50004], [5.58741, 52.56346], [5.57289, 52.59616], [5.62832, 52.60536], [5.65115, 52.61473]]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 304,
      "areaName": "Neerijnen"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[5.30858, 51.85184], [5.32234, 51.85861], [5.34281, 51.85671], [5.37841, 51.8634], [5.39169, 51.85392], [5.41523, 51.8518], [5.35557, 51.80438], [5.34164, 51.80547], [5.3046, 51.82396], [5.21288, 51.81005], [5.15928, 51.81648], [5.15409, 51.84743], [5.1922, 51.84761], [5.22991, 51.85638], [5.27996, 51.85718], [5.30858, 51.85184]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 307,
      "areaName": "Amersfoort"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[5.3854, 52.20643], [5.39273, 52.20553], [5.39552, 52.21915], [5.44104, 52.20569], [5.43988, 52.1712], [5.47992, 52.16581], [5.47243, 52.16285], [5.48432, 52.15806], [5.48263, 52.1515], [5.45934, 52.15291], [5.4422, 52.1615], [5.42361, 52.15764], [5.39807, 52.13355], [5.37439, 52.13099], [5.35564, 52.13683], [5.31092, 52.10838], [5.33127, 52.12663], [5.34993, 52.17386], [5.31059, 52.19149], [5.31308, 52.20167], [5.33069, 52.20339], [5.33054, 52.21473], [5.3854, 52.20643]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 308,
      "areaName": "Baarn"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[5.2888, 52.22299], [5.31213, 52.22121], [5.31228, 52.23283], [5.33579, 52.22857], [5.33069, 52.20339], [5.30852, 52.20447], [5.23904, 52.16762], [5.23616, 52.17115], [5.22389, 52.16538], [5.22099, 52.17826], [5.21208, 52.17637], [5.22473, 52.2252], [5.2888, 52.22299]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 310,
      "areaName": "De Bilt"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[5.22688, 52.15299], [5.23093, 52.11679], [5.21822, 52.11367], [5.22233, 52.10389], [5.21082, 52.10073], [5.20552, 52.0849], [5.18991, 52.08624], [5.18227, 52.09441], [5.1609, 52.09458], [5.16191, 52.10722], [5.15038, 52.11088], [5.14816, 52.1198], [5.10709, 52.13321], [5.12053, 52.14554], [5.09489, 52.15535], [5.11884, 52.17241], [5.11529, 52.17985], [5.19259, 52.17783], [5.2155, 52.20427], [5.21208, 52.17637], [5.22099, 52.17826], [5.22688, 52.15299]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 312,
      "areaName": "Bunnik"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[5.21913, 52.05975], [5.25027, 52.05622], [5.24949, 52.04099], [5.2693, 52.02917], [5.26324, 52.02438], [5.27991, 52.01072], [5.27448, 51.99842], [5.26474, 52.00322], [5.24319, 51.99879], [5.22404, 52.0137], [5.20199, 52.01747], [5.19156, 52.04304], [5.16074, 52.04552], [5.15303, 52.05676], [5.16018, 52.0803], [5.2004, 52.07687], [5.22502, 52.06492], [5.21913, 52.05975]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 313,
      "areaName": "Bunschoten"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[5.33227, 52.27352], [5.36343, 52.26844], [5.4035, 52.24675], [5.39273, 52.20553], [5.33054, 52.21473], [5.33579, 52.22857], [5.31228, 52.23283], [5.31068, 52.24633], [5.32862, 52.25537], [5.3221, 52.26295], [5.33227, 52.27352]], [[5.38519, 52.25557], [5.38464, 52.25669], [5.38308, 52.25649], [5.38379, 52.25541], [5.38519, 52.25557]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 317,
      "areaName": "Eemnes"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[5.2317, 52.23684], [5.26598, 52.28193], [5.33113, 52.27419], [5.32205, 52.26263], [5.32862, 52.25537], [5.31055, 52.24603], [5.31213, 52.22121], [5.2229, 52.22526], [5.2317, 52.23684]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 321,
      "areaName": "Houten"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[5.12284, 52.00861], [5.13099, 52.02472], [5.12177, 52.03043], [5.12683, 52.05492], [5.14568, 52.05256], [5.15303, 52.05676], [5.16074, 52.04552], [5.19156, 52.04304], [5.20199, 52.01747], [5.22941, 52.01119], [5.2562, 51.99373], [5.25414, 51.98607], [5.27145, 51.98113], [5.25627, 51.97094], [5.23546, 51.97847], [5.21659, 51.962], [5.19885, 51.9602], [5.14971, 51.97427], [5.13968, 51.99394], [5.11956, 51.99992], [5.12284, 52.00861]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 327,
      "areaName": "Leusden"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[5.40008, 52.13571], [5.41784, 52.15478], [5.44155, 52.16152], [5.45934, 52.15291], [5.49898, 52.14739], [5.49731, 52.14144], [5.51408, 52.13592], [5.49469, 52.1247], [5.5077, 52.1139], [5.47908, 52.11743], [5.47199, 52.10146], [5.44381, 52.10707], [5.42963, 52.09591], [5.40452, 52.10411], [5.40133, 52.08933], [5.33587, 52.09597], [5.31092, 52.10838], [5.35564, 52.13683], [5.37461, 52.13099], [5.40008, 52.13571]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 331,
      "areaName": "Lopik"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[5.05261, 51.99765], [5.06264, 51.99123], [5.03285, 51.96975], [4.99807, 51.97787], [4.96829, 51.95938], [4.93982, 51.96344], [4.91638, 51.94318], [4.87979, 51.93812], [4.86081, 51.96778], [4.8341, 51.9856], [4.90973, 52.01104], [5.0203, 52.02563], [5.03406, 52.00385], [5.04244, 52.00568], [5.05261, 51.99765]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 335,
      "areaName": "Montfoort"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[4.98966, 52.06617], [5.01801, 52.06222], [5.01028, 52.05374], [4.99101, 52.05288], [4.97838, 52.03972], [4.9952, 52.0215], [4.92005, 52.01001], [4.90497, 52.02648], [4.92644, 52.02848], [4.9114, 52.04018], [4.91712, 52.04379], [4.9065, 52.05348], [4.89541, 52.04823], [4.86823, 52.06345], [4.8732, 52.06875], [4.90508, 52.07001], [4.93614, 52.07992], [4.95677, 52.06593], [4.98966, 52.06617]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 339,
      "areaName": "Renswoude"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[5.53159, 52.10219], [5.55034, 52.10542], [5.56275, 52.07828], [5.55791, 52.04865], [5.54464, 52.04937], [5.53142, 52.03947], [5.51568, 52.05419], [5.49788, 52.05702], [5.49555, 52.07083], [5.53114, 52.08228], [5.53916, 52.09781], [5.53159, 52.10219]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 340,
      "areaName": "Rhenen"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[5.51883, 51.97157], [5.47766, 51.98347], [5.51259, 52.01852], [5.5511, 51.9998], [5.55804, 52.00363], [5.57048, 51.99696], [5.58949, 52.00946], [5.62606, 51.97407], [5.61833, 51.96626], [5.62731, 51.95247], [5.60594, 51.94312], [5.51883, 51.97157]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 342,
      "areaName": "Soest"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[5.25723, 52.18087], [5.30891, 52.20456], [5.31067, 52.19143], [5.3499, 52.1756], [5.33127, 52.12663], [5.30646, 52.11027], [5.28214, 52.11206], [5.25592, 52.13672], [5.24317, 52.17008], [5.25723, 52.18087]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 344,
      "areaName": "Utrecht"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[5.03355, 52.11676], [5.04756, 52.12997], [5.0612, 52.12256], [5.08717, 52.13567], [5.10108, 52.12984], [5.10709, 52.13321], [5.14816, 52.1198], [5.15038, 52.11088], [5.16191, 52.10722], [5.1564, 52.09815], [5.18617, 52.09293], [5.19515, 52.07735], [5.16018, 52.0803], [5.15776, 52.05834], [5.14573, 52.05256], [5.11126, 52.05832], [5.1044, 52.04994], [5.09735, 52.05948], [5.07053, 52.06187], [5.06102, 52.02628], [5.01801, 52.06222], [4.9995, 52.06613], [5.00501, 52.08849], [4.99422, 52.09037], [4.98933, 52.10076], [4.97328, 52.10137], [4.98023, 52.11224], [4.9701, 52.12244], [5.0031, 52.14205], [5.03355, 52.11676]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 345,
      "areaName": "Veenendaal"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[5.56084, 52.00212], [5.55323, 51.99903], [5.51259, 52.01852], [5.54464, 52.04937], [5.57085, 52.048], [5.56739, 52.04061], [5.59003, 52.03439], [5.58949, 52.00946], [5.57048, 51.99696], [5.56084, 52.00212]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 351,
      "areaName": "Woudenberg"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[5.40935, 52.06898], [5.4019, 52.0643], [5.40589, 52.07522], [5.33225, 52.08416], [5.2983, 52.09645], [5.32246, 52.1019], [5.34057, 52.09503], [5.40133, 52.08933], [5.40452, 52.10411], [5.4294, 52.09592], [5.44381, 52.10707], [5.46752, 52.1004], [5.47908, 52.11743], [5.49187, 52.11448], [5.48608, 52.09366], [5.45924, 52.08023], [5.48396, 52.06964], [5.49614, 52.07167], [5.49788, 52.05702], [5.46114, 52.04726], [5.45353, 52.04998], [5.44853, 52.04312], [5.42864, 52.05534], [5.43726, 52.07216], [5.40935, 52.06898]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 352,
      "areaName": "Wijk bij Duurstede"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[5.25627, 51.97094], [5.27145, 51.98113], [5.25414, 51.98607], [5.2562, 51.99373], [5.24235, 51.99866], [5.26474, 52.00322], [5.27458, 51.99846], [5.27991, 52.01072], [5.29122, 52.00835], [5.31465, 52.027], [5.3816, 52.00215], [5.41528, 51.9967], [5.39942, 51.98795], [5.37839, 51.98612], [5.39098, 51.97073], [5.35484, 51.97018], [5.32344, 51.9551], [5.25627, 51.97094]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 353,
      "areaName": "IJsselstein"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[5.03014, 52.01016], [5.0203, 52.02563], [4.99519, 52.02172], [4.97838, 52.03972], [4.99101, 52.05288], [5.01028, 52.05374], [5.01707, 52.06114], [5.0628, 52.02682], [5.07753, 51.99745], [5.06264, 51.99123], [5.03014, 52.01016]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 355,
      "areaName": "Zeist"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[5.20723, 52.08644], [5.21082, 52.10073], [5.22233, 52.10389], [5.21822, 52.11367], [5.23093, 52.11679], [5.225, 52.1657], [5.2379, 52.17125], [5.2641, 52.12508], [5.27194, 52.12705], [5.28214, 52.11206], [5.29182, 52.11454], [5.32246, 52.1019], [5.2983, 52.09645], [5.33225, 52.08416], [5.33261, 52.07874], [5.32042, 52.07033], [5.29076, 52.08657], [5.24783, 52.0588], [5.22333, 52.05948], [5.22502, 52.06492], [5.19515, 52.07735], [5.19275, 52.08608], [5.20723, 52.08644]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 356,
      "areaName": "Nieuwegein"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[5.06294, 52.02526], [5.07009, 52.06169], [5.09735, 52.05948], [5.1044, 52.04994], [5.11126, 52.05832], [5.12683, 52.05492], [5.12177, 52.03043], [5.13099, 52.02472], [5.11956, 51.99992], [5.10016, 52.00302], [5.07753, 51.99745], [5.06294, 52.02526]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 358,
      "areaName": "Aalsmeer"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[4.79325, 52.2941], [4.80988, 52.30578], [4.82386, 52.28994], [4.79509, 52.26026], [4.76847, 52.24793], [4.77327, 52.24103], [4.7233, 52.21635], [4.72415, 52.23237], [4.70371, 52.23379], [4.6767, 52.22593], [4.67029, 52.2308], [4.68101, 52.23902], [4.70162, 52.24433], [4.7257, 52.26324], [4.77964, 52.28299], [4.79325, 52.2941]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 361,
      "areaName": "Alkmaar"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[4.73084, 52.61887], [4.70828, 52.63085], [4.71282, 52.64621], [4.7312, 52.66171], [4.74881, 52.66572], [4.75241, 52.67145], [4.74174, 52.68081], [4.77903, 52.67648], [4.77367, 52.64835], [4.80036, 52.65703], [4.75648, 52.59157], [4.73746, 52.59386], [4.73945, 52.61387], [4.73084, 52.61887]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 362,
      "areaName": "Amstelveen"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[4.81875, 52.32556], [4.85592, 52.33032], [4.85676, 52.32141], [4.90905, 52.31883], [4.90109, 52.29616], [4.87891, 52.27924], [4.88234, 52.26404], [4.8543, 52.24188], [4.79455, 52.26085], [4.82386, 52.28994], [4.80988, 52.30578], [4.81875, 52.32556]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 363,
      "areaName": "Amsterdam"
    },
    "geometry": {
      "type": "MultiPolygon",
      "coordinates": [[[[4.98051, 52.33078], [4.99786, 52.31398], [5.01613, 52.32451], [5.02154, 52.30246], [5.00789, 52.30152], [4.99748, 52.28912], [4.98351, 52.29037], [4.95524, 52.27831], [4.92933, 52.30853], [4.94049, 52.32568], [4.94766, 52.32814], [4.95268, 52.32264], [4.98051, 52.33078]]], [[[4.98675, 52.36511], [4.99078, 52.36377], [4.98044, 52.35856], [4.97451, 52.36158], [4.98675, 52.36511]]], [[[5.01415, 52.37169], [5.01251, 52.37244], [5.01314, 52.37307], [5.01456, 52.37296], [5.01415, 52.37169]]], [[[5.02152, 52.38412], [5.01838, 52.38039], [5.0143, 52.37417], [5.01834, 52.38345], [5.0237, 52.38685], [5.02152, 52.38412]]], [[[4.76656, 52.42755], [4.85608, 52.41666], [4.86268, 52.42994], [4.87074, 52.43039], [4.93072, 52.41161], [4.95277, 52.42368], [4.98264, 52.42676], [5.03004, 52.41564], [5.06841, 52.41545], [5.03153, 52.40092], [5.02524, 52.38818], [5.00846, 52.38273], [5.01281, 52.37319], [4.99853, 52.37878], [4.98026, 52.37367], [4.95956, 52.38198], [4.98349, 52.36795], [5.01451, 52.36802], [4.95778, 52.36766], [4.97527, 52.35715], [4.99001, 52.35707], [4.99208, 52.36166], [5.00901, 52.35328], [5.01652, 52.35535], [5.01129, 52.34283], [4.99932, 52.34154], [4.96959, 52.3561], [4.94955, 52.33838], [4.91293, 52.33051], [4.90913, 52.31825], [4.85676, 52.32141], [4.85592, 52.33032], [4.81875, 52.32556], [4.75612, 52.35611], [4.75782, 52.39666], [4.72876, 52.40071], [4.73921, 52.43106], [4.76656, 52.42755]]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 365,
      "areaName": "Graft-De Rijp"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[4.77774, 52.53391], [4.78162, 52.5571], [4.79326, 52.55513], [4.79274, 52.57345], [4.82187, 52.57635], [4.82471, 52.57176], [4.86424, 52.57162], [4.84228, 52.54349], [4.81903, 52.53873], [4.82076, 52.53144], [4.78837, 52.51916], [4.77774, 52.53391]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 370,
      "areaName": "Beemster"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[4.957, 52.52911], [4.9541, 52.51635], [4.92814, 52.51082], [4.84796, 52.52531], [4.83391, 52.53896], [4.89877, 52.6016], [4.91542, 52.60865], [4.93457, 52.6062], [4.95072, 52.61411], [4.95932, 52.60471], [4.94883, 52.59872], [4.95475, 52.58021], [4.97992, 52.58699], [4.99717, 52.57512], [4.97652, 52.56117], [4.97646, 52.54662], [4.957, 52.52911]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 373,
      "areaName": "Bergen (NH,)"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[4.61734, 52.60582], [4.63327, 52.68298], [4.63946, 52.68338], [4.63653, 52.72148], [4.64783, 52.75633], [4.69265, 52.73101], [4.75244, 52.67095], [4.71282, 52.64621], [4.70828, 52.63085], [4.71476, 52.62491], [4.68564, 52.61951], [4.67258, 52.5909], [4.60992, 52.57375], [4.61734, 52.60582]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 375,
      "areaName": "Beverwijk"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[4.59657, 52.48584], [4.58241, 52.48908], [4.58727, 52.49903], [4.60431, 52.49439], [4.66605, 52.50174], [4.70798, 52.4862], [4.67485, 52.45552], [4.65333, 52.47715], [4.59657, 52.48584]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 376,
      "areaName": "Blaricum"
    },
    "geometry": {
      "type": "MultiPolygon",
      "coordinates": [[[[5.31581, 52.29463], [5.32465, 52.29475], [5.32713, 52.29014], [5.31602, 52.29265], [5.31581, 52.29463]]], [[[5.3147, 52.30226], [5.2958, 52.29511], [5.30702, 52.29893], [5.29545, 52.28976], [5.30647, 52.27761], [5.26598, 52.28193], [5.24408, 52.25466], [5.22551, 52.27291], [5.20382, 52.26711], [5.21089, 52.27735], [5.24649, 52.28228], [5.30799, 52.30517], [5.3147, 52.30226]]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 377,
      "areaName": "Bloemendaal"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[4.60226, 52.3567], [4.59019, 52.32835], [4.61138, 52.3222], [4.61168, 52.31356], [4.58327, 52.3184], [4.56896, 52.31651], [4.56371, 52.3093], [4.54732, 52.314], [4.59166, 52.39172], [4.54177, 52.40128], [4.56083, 52.43795], [4.62147, 52.4249], [4.63165, 52.41167], [4.62161, 52.38798], [4.61082, 52.38982], [4.60053, 52.38292], [4.60226, 52.3567]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 381,
      "areaName": "Bussum"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[5.19622, 52.27089], [5.20112, 52.26814], [5.16213, 52.2558], [5.13761, 52.2596], [5.1413, 52.27745], [5.16213, 52.28497], [5.17826, 52.28375], [5.19622, 52.27089]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 383,
      "areaName": "Castricum"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[4.65303, 52.53072], [4.59885, 52.53107], [4.60992, 52.57375], [4.67258, 52.5909], [4.69122, 52.57955], [4.73999, 52.57893], [4.74446, 52.59029], [4.75648, 52.59157], [4.74474, 52.56735], [4.78162, 52.5571], [4.77773, 52.53375], [4.7198, 52.54385], [4.71886, 52.55164], [4.69453, 52.54419], [4.69574, 52.52673], [4.65303, 52.53072]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 384,
      "areaName": "Diemen"
    },
    "geometry": {
      "type": "MultiPolygon",
      "coordinates": [[[[5.03047, 52.34993], [5.03077, 52.35171], [5.03422, 52.35148], [5.03398, 52.35078], [5.03047, 52.34993]]], [[[4.96959, 52.3561], [4.99932, 52.34154], [5.027, 52.34879], [5.03501, 52.34447], [4.99795, 52.314], [4.98479, 52.33048], [4.95268, 52.32264], [4.94269, 52.32933], [4.96959, 52.3561]]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 385,
      "areaName": "Edam-Volendam"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[5.0247, 52.5224], [5.04443, 52.51802], [5.06578, 52.5262], [5.08576, 52.50402], [5.07697, 52.49257], [5.05948, 52.48561], [5.0591, 52.49096], [5.02463, 52.48457], [4.99796, 52.49473], [5.0247, 52.5224]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 388,
      "areaName": "Enkhuizen"
    },
    "geometry": {
      "type": "MultiPolygon",
      "coordinates": [[[[5.28313, 52.69196], [5.28286, 52.69196], [5.28136, 52.69115], [5.28404, 52.69281], [5.28313, 52.69196]]], [[[5.28745, 52.69126], [5.28688, 52.6899], [5.27581, 52.68416], [5.27428, 52.68595], [5.2767, 52.6849], [5.28415, 52.69202], [5.29334, 52.69669], [5.28745, 52.69126]]], [[[5.29745, 52.69344], [5.2974, 52.69273], [5.29707, 52.69841], [5.29746, 52.6991], [5.29966, 52.70032], [5.30777, 52.70406], [5.29745, 52.69344]]], [[[5.25943, 52.74486], [5.28266, 52.74233], [5.288, 52.7148], [5.30771, 52.70878], [5.2797, 52.69601], [5.27194, 52.68392], [5.25929, 52.68725], [5.25432, 52.74702], [5.25943, 52.74486]]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 392,
      "areaName": "Haarlem"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[4.63531, 52.35498], [4.63663, 52.36148], [4.60572, 52.3634], [4.60007, 52.38081], [4.61082, 52.38982], [4.62161, 52.38798], [4.63165, 52.41167], [4.65077, 52.42857], [4.68123, 52.41933], [4.66866, 52.4014], [4.67869, 52.39948], [4.67449, 52.39092], [4.68692, 52.38744], [4.67159, 52.37242], [4.67367, 52.35118], [4.63965, 52.33891], [4.63531, 52.35498]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 393,
      "areaName": "Haarlemmerliede en Spaarnwoude"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[4.72198, 52.43334], [4.73921, 52.43106], [4.72876, 52.40071], [4.75768, 52.3968], [4.75912, 52.37933], [4.7301, 52.38642], [4.67738, 52.37709], [4.68692, 52.38744], [4.67443, 52.39099], [4.67196, 52.40945], [4.72198, 52.43334]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 394,
      "areaName": "Haarlemmermeer"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[4.55562, 52.23202], [4.563, 52.23492], [4.56797, 52.26807], [4.5886, 52.28068], [4.61153, 52.31224], [4.61266, 52.3272], [4.67435, 52.35164], [4.67396, 52.37535], [4.72959, 52.38638], [4.75322, 52.3807], [4.75603, 52.35618], [4.81899, 52.32505], [4.81673, 52.311], [4.78834, 52.28853], [4.63263, 52.21618], [4.55731, 52.21902], [4.55048, 52.22628], [4.55562, 52.23202]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 396,
      "areaName": "Heemskerk"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[4.59885, 52.53107], [4.69574, 52.52673], [4.69439, 52.50783], [4.70915, 52.50986], [4.70542, 52.50011], [4.72037, 52.49495], [4.70793, 52.48633], [4.66605, 52.50174], [4.60431, 52.49439], [4.58727, 52.49903], [4.59885, 52.53107]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 397,
      "areaName": "Heemstede"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[4.61825, 52.36147], [4.63663, 52.36148], [4.64103, 52.34399], [4.61138, 52.3222], [4.59019, 52.32835], [4.60489, 52.36265], [4.61825, 52.36147]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 398,
      "areaName": "Heerhugowaard"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[4.80042, 52.65724], [4.80875, 52.67297], [4.82678, 52.67537], [4.81943, 52.70915], [4.83377, 52.7138], [4.82624, 52.71744], [4.85809, 52.72335], [4.89898, 52.70675], [4.89986, 52.69759], [4.87625, 52.68629], [4.86318, 52.65647], [4.8757, 52.63515], [4.84214, 52.64604], [4.83023, 52.63268], [4.78528, 52.63811], [4.80042, 52.65724]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 399,
      "areaName": "Heiloo"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[4.71847, 52.58006], [4.69122, 52.57955], [4.67078, 52.5883], [4.68999, 52.62375], [4.70796, 52.62035], [4.71624, 52.62503], [4.73945, 52.61387], [4.73706, 52.59468], [4.75097, 52.58912], [4.74446, 52.59029], [4.73999, 52.57893], [4.71847, 52.58006]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 400,
      "areaName": "Den Helder"
    },
    "geometry": {
      "type": "MultiPolygon",
      "coordinates": [[[[4.80982, 52.95259], [4.82449, 52.95117], [4.82832, 52.94883], [4.80606, 52.95287], [4.80982, 52.95259]]], [[[4.7835, 52.96447], [4.77438, 52.96036], [4.787, 52.94636], [4.77824, 52.95939], [4.79439, 52.9555], [4.7979, 52.96039], [4.78959, 52.96293], [4.80156, 52.96434], [4.79209, 52.93301], [4.81197, 52.91304], [4.79491, 52.91258], [4.77094, 52.87863], [4.70937, 52.88359], [4.7201, 52.95299], [4.73084, 52.96257], [4.7835, 52.96447]]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 402,
      "areaName": "Hilversum"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[5.13001, 52.2215], [5.14179, 52.22549], [5.1396, 52.25402], [5.12557, 52.26022], [5.11926, 52.27348], [5.10265, 52.27786], [5.10465, 52.28538], [5.13441, 52.27782], [5.1467, 52.28294], [5.13761, 52.2596], [5.16213, 52.2558], [5.20382, 52.26711], [5.18885, 52.24765], [5.21896, 52.21213], [5.19259, 52.17783], [5.12411, 52.18083], [5.12194, 52.18558], [5.14572, 52.19792], [5.14244, 52.20871], [5.12253, 52.21882], [5.13001, 52.2215]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 405,
      "areaName": "Hoorn"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[5.09667, 52.67035], [5.11705, 52.65002], [5.10184, 52.6474], [5.10605, 52.63559], [5.08859, 52.64253], [5.08322, 52.64166], [5.08926, 52.63888], [5.0868, 52.63677], [5.08075, 52.64305], [5.08622, 52.6362], [5.0777, 52.64148], [5.06266, 52.63263], [5.04576, 52.64165], [5.0135, 52.63043], [5.0388, 52.64751], [5.03554, 52.67045], [5.06346, 52.67313], [5.08673, 52.68437], [5.09667, 52.67035]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 406,
      "areaName": "Huizen"
    },
    "geometry": {
      "type": "MultiPolygon",
      "coordinates": [[[[5.29355, 52.30687], [5.29325, 52.30599], [5.2898, 52.30602], [5.29111, 52.30782], [5.29355, 52.30687]]], [[[5.24208, 52.31318], [5.24289, 52.31268], [5.2409, 52.31211], [5.2404, 52.31292], [5.24208, 52.31318]]], [[[5.24332, 52.31105], [5.24962, 52.31645], [5.25638, 52.30682], [5.28781, 52.2976], [5.22773, 52.27713], [5.21089, 52.27735], [5.20333, 52.26726], [5.1847, 52.27801], [5.19568, 52.28477], [5.18708, 52.2926], [5.1978, 52.30033], [5.22956, 52.30172], [5.2285, 52.31121], [5.24252, 52.31099], [5.24869, 52.31715], [5.24332, 52.31105]]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 415,
      "areaName": "Landsmeer"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[4.89928, 52.43143], [4.89311, 52.45635], [4.9081, 52.483], [4.92065, 52.49043], [4.94894, 52.48658], [4.94455, 52.41475], [4.93072, 52.41161], [4.89874, 52.42449], [4.89928, 52.43143]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 416,
      "areaName": "Langedijk"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[4.76848, 52.69842], [4.77881, 52.73135], [4.8047, 52.7143], [4.83174, 52.7169], [4.81943, 52.70915], [4.82653, 52.67495], [4.80901, 52.67313], [4.80051, 52.66024], [4.77367, 52.64835], [4.77903, 52.67648], [4.74174, 52.68081], [4.72885, 52.6914], [4.76848, 52.69842]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 417,
      "areaName": "Laren"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[5.20382, 52.26711], [5.22551, 52.27291], [5.24509, 52.25443], [5.21896, 52.21213], [5.18885, 52.24765], [5.20382, 52.26711]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 420,
      "areaName": "Medemblik"
    },
    "geometry": {
      "type": "MultiPolygon",
      "coordinates": [[[[5.16178, 52.74013], [5.16454, 52.73743], [5.15435, 52.73781], [5.1547, 52.73936], [5.16178, 52.74013]]], [[[5.13767, 52.74962], [5.13916, 52.74912], [5.14037, 52.74855], [5.14226, 52.7471], [5.14371, 52.74689], [5.14657, 52.74559], [5.14891, 52.74365], [5.14252, 52.74579], [5.13767, 52.74962]]], [[[5.1131, 52.77444], [5.10801, 52.77045], [5.11372, 52.77442], [5.12159, 52.76958], [5.11808, 52.75977], [5.15466, 52.73742], [5.16505, 52.73692], [5.16509, 52.7411], [5.17923, 52.74088], [5.19333, 52.75516], [5.26083, 52.75277], [5.27174, 52.74751], [5.25837, 52.74568], [5.27183, 52.74637], [5.27201, 52.74584], [5.25943, 52.74486], [5.25432, 52.74701], [5.2575, 52.71618], [5.2107, 52.71685], [5.09149, 52.67883], [5.08261, 52.684], [5.06346, 52.67313], [5.02392, 52.6646], [5.00235, 52.67493], [4.98301, 52.6751], [4.98607, 52.69922], [4.97189, 52.71214], [5.01116, 52.72291], [4.99639, 52.73862], [4.99686, 52.75207], [5.04507, 52.75315], [5.06972, 52.7681], [5.1131, 52.77444]]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 424,
      "areaName": "Muiden"
    },
    "geometry": {
      "type": "MultiPolygon",
      "coordinates": [[[[5.13088, 52.32636], [5.13015, 52.3259], [5.13051, 52.32623], [5.13088, 52.32636]]], [[[5.06853, 52.33759], [5.06927, 52.33001], [5.06968, 52.34201], [5.06991, 52.33743], [5.09364, 52.33876], [5.1238, 52.32949], [5.12937, 52.3254], [5.11256, 52.3148], [5.12275, 52.31105], [5.10794, 52.30348], [5.06474, 52.32379], [5.05715, 52.31603], [5.01665, 52.32299], [5.01279, 52.33021], [5.02759, 52.33775], [5.03533, 52.33342], [5.03279, 52.33828], [5.06662, 52.33661], [5.06845, 52.34211], [5.06853, 52.33759]]], [[[5.10578, 52.34597], [5.1098, 52.34368], [5.10033, 52.3472], [5.10337, 52.34672], [5.10578, 52.34597]]], [[[5.07964, 52.34446], [5.08077, 52.34567], [5.08825, 52.34736], [5.08217, 52.3458], [5.07964, 52.34446]]], [[[5.06927, 52.36416], [5.0677, 52.36458], [5.0681, 52.36539], [5.07014, 52.36511], [5.06927, 52.36416]]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 425,
      "areaName": "Naarden"
    },
    "geometry": {
      "type": "MultiPolygon",
      "coordinates": [[[[5.16289, 52.31634], [5.16148, 52.31429], [5.15941, 52.31501], [5.15961, 52.31591], [5.16289, 52.31634]]], [[[5.13471, 52.32702], [5.16367, 52.3053], [5.22786, 52.31131], [5.22956, 52.30172], [5.1978, 52.30033], [5.18708, 52.2926], [5.19581, 52.286], [5.18798, 52.27865], [5.16489, 52.28503], [5.1254, 52.27879], [5.09872, 52.29057], [5.10769, 52.29723], [5.09781, 52.29938], [5.09626, 52.30686], [5.10057, 52.3103], [5.10794, 52.30348], [5.11841, 52.30864], [5.11256, 52.3148], [5.13471, 52.32702]]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 431,
      "areaName": "Oostzaan"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[4.90647, 52.47983], [4.89311, 52.45635], [4.89874, 52.42446], [4.86176, 52.42968], [4.84295, 52.45226], [4.8525, 52.47037], [4.90647, 52.47983]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 432,
      "areaName": "Opmeer"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[4.92814, 52.68026], [4.90562, 52.68642], [4.9181, 52.69697], [4.89986, 52.69759], [4.89867, 52.70683], [4.93279, 52.74893], [4.95434, 52.7553], [4.99686, 52.75207], [4.99639, 52.73862], [5.01116, 52.72291], [4.97189, 52.71214], [4.98607, 52.69922], [4.97858, 52.67901], [4.95274, 52.67177], [4.92814, 52.68026]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 437,
      "areaName": "Ouder-Amstel"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[4.90409, 52.30371], [4.91293, 52.33051], [4.95032, 52.33864], [4.92933, 52.30853], [4.95524, 52.27831], [4.92644, 52.27978], [4.92942, 52.2684], [4.91103, 52.25271], [4.87326, 52.25084], [4.87327, 52.2606], [4.88246, 52.26428], [4.87891, 52.27924], [4.90409, 52.30371]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 439,
      "areaName": "Purmerend"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[4.94347, 52.5125], [4.95413, 52.51638], [4.957, 52.52911], [4.99227, 52.51973], [5.00897, 52.52771], [5.0247, 52.5224], [4.97401, 52.4704], [4.95799, 52.47123], [4.94894, 52.48658], [4.92065, 52.49043], [4.92512, 52.50553], [4.94347, 52.5125]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 441,
      "areaName": "Schagen"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[4.70937, 52.88359], [4.77094, 52.87863], [4.75886, 52.84869], [4.78256, 52.85144], [4.80965, 52.8369], [4.83457, 52.80778], [4.829, 52.77533], [4.82075, 52.76961], [4.80685, 52.77028], [4.85038, 52.72538], [4.84768, 52.72026], [4.80503, 52.71421], [4.77881, 52.73135], [4.76965, 52.69879], [4.72885, 52.6914], [4.69265, 52.73101], [4.64783, 52.75633], [4.67624, 52.80156], [4.70937, 52.88359]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 448,
      "areaName": "Texel"
    },
    "geometry": {
      "type": "MultiPolygon",
      "coordinates": [[[[4.67577, 52.98159], [4.68168, 52.97911], [4.66465, 52.97831], [4.70985, 52.97707], [4.66319, 52.96029], [4.6545, 52.96566], [4.65684, 52.97781], [4.67577, 52.98159]]], [[[4.9047, 53.13092], [4.90338, 53.12996], [4.90215, 53.1305], [4.90396, 53.13199], [4.9047, 53.13092]]], [[[4.8103, 53.13875], [4.81005, 53.13961], [4.81214, 53.13977], [4.81206, 53.13956], [4.8103, 53.13875]]], [[[4.82014, 53.14502], [4.82047, 53.14316], [4.81141, 53.14034], [4.81822, 53.14559], [4.82014, 53.14502]]], [[[4.85978, 53.18346], [4.86157, 53.18198], [4.85919, 53.18309], [4.85714, 53.18335], [4.85024, 53.18246], [4.84682, 53.18114], [4.85682, 53.18323], [4.86064, 53.18157], [4.86225, 53.18207], [4.87759, 53.15783], [4.88927, 53.1548], [4.90826, 53.1341], [4.90159, 53.13406], [4.89716, 53.07857], [4.87303, 53.06472], [4.87302, 53.05519], [4.84903, 53.03519], [4.81907, 53.02901], [4.79293, 53.00226], [4.75135, 53.00999], [4.77366, 52.99617], [4.74691, 52.99423], [4.72004, 52.98433], [4.70706, 53.03349], [4.73517, 53.08419], [4.79579, 53.13941], [4.79836, 53.13349], [4.80276, 53.13389], [4.80234, 53.133], [4.8049, 53.1329], [4.80584, 53.13183], [4.81006, 53.13104], [4.80413, 53.13361], [4.81232, 53.1338], [4.81025, 53.13689], [4.81802, 53.13876], [4.81127, 53.13769], [4.81858, 53.13943], [4.82156, 53.14519], [4.82934, 53.14354], [4.82086, 53.13964], [4.82044, 53.13791], [4.82983, 53.14336], [4.83081, 53.14598], [4.82849, 53.14832], [4.83157, 53.14979], [4.82826, 53.14829], [4.83045, 53.14599], [4.82968, 53.14378], [4.8184, 53.15321], [4.80836, 53.13911], [4.79628, 53.13972], [4.83902, 53.18423], [4.85978, 53.18346]]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 450,
      "areaName": "Uitgeest"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[4.69747, 52.52916], [4.69453, 52.54419], [4.71886, 52.55164], [4.7198, 52.54385], [4.77773, 52.53375], [4.78248, 52.51958], [4.75228, 52.52118], [4.75067, 52.50829], [4.72037, 52.49495], [4.70542, 52.50011], [4.70915, 52.50986], [4.69439, 52.50783], [4.69747, 52.52916]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 451,
      "areaName": "Uithoorn"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[4.76899, 52.2484], [4.79521, 52.26102], [4.85214, 52.23959], [4.8141, 52.22717], [4.78099, 52.22874], [4.73283, 52.20697], [4.72376, 52.21657], [4.77327, 52.24103], [4.76899, 52.2484]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 453,
      "areaName": "Velsen"
    },
    "geometry": {
      "type": "MultiPolygon",
      "coordinates": [[[[4.57786, 52.46427], [4.57472, 52.46395], [4.57296, 52.46404], [4.57796, 52.46609], [4.57786, 52.46427]]], [[[4.60398, 52.48149], [4.65333, 52.47715], [4.66761, 52.46843], [4.66193, 52.46176], [4.72198, 52.43334], [4.68248, 52.41385], [4.68123, 52.41933], [4.65077, 52.42857], [4.63618, 52.41082], [4.62147, 52.4249], [4.56083, 52.43795], [4.55511, 52.45993], [4.538, 52.45806], [4.53637, 52.45867], [4.53357, 52.46093], [4.53254, 52.46228], [4.53208, 52.46384], [4.53846, 52.45824], [4.57843, 52.46288], [4.57811, 52.45803], [4.58722, 52.45724], [4.58155, 52.46245], [4.5953, 52.45776], [4.58251, 52.46325], [4.60495, 52.46704], [4.59205, 52.46981], [4.6091, 52.47295], [4.55394, 52.46651], [4.54227, 52.46767], [4.56543, 52.468], [4.58241, 52.48908], [4.60398, 52.48149]]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 457,
      "areaName": "Weesp"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[5.01793, 52.32319], [5.05715, 52.31603], [5.06474, 52.32379], [5.10053, 52.31046], [5.09677, 52.30046], [5.10769, 52.29723], [5.09847, 52.29164], [5.10207, 52.27989], [5.06463, 52.27826], [5.05954, 52.28932], [5.04278, 52.28249], [5.03053, 52.28849], [5.02307, 52.28198], [5.01793, 52.32319]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 458,
      "areaName": "Schermer"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[4.89682, 52.60003], [4.86424, 52.57162], [4.82471, 52.57176], [4.82187, 52.57635], [4.79274, 52.57345], [4.79326, 52.55513], [4.74485, 52.56712], [4.76792, 52.61564], [4.79177, 52.63853], [4.83023, 52.63268], [4.84214, 52.64604], [4.88097, 52.63362], [4.88929, 52.62554], [4.88399, 52.61314], [4.92621, 52.60889], [4.89682, 52.60003]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 473,
      "areaName": "Zandvoort"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[4.51956, 52.36709], [4.54177, 52.40128], [4.59166, 52.39172], [4.54732, 52.314], [4.49386, 52.32823], [4.51956, 52.36709]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 478,
      "areaName": "Zeevang"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[5.00683, 52.52748], [4.99227, 52.51973], [4.957, 52.52911], [4.97646, 52.54662], [4.97652, 52.56117], [4.99717, 52.57516], [4.97992, 52.58699], [4.95517, 52.57998], [4.94935, 52.59469], [5.00488, 52.59757], [5.00657, 52.61051], [5.01966, 52.61245], [5.03078, 52.56825], [5.06584, 52.52635], [5.04443, 52.51802], [5.00683, 52.52748]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 479,
      "areaName": "Zaanstad"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[4.84254, 52.41881], [4.71743, 52.43421], [4.67485, 52.45552], [4.71387, 52.49268], [4.75067, 52.50829], [4.75243, 52.52123], [4.78986, 52.51924], [4.79208, 52.49133], [4.83708, 52.47986], [4.8525, 52.47037], [4.84295, 52.45226], [4.86281, 52.42962], [4.85608, 52.41666], [4.84254, 52.41881]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 482,
      "areaName": "Alblasserdam"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[4.63708, 51.87629], [4.64214, 51.8802], [4.67291, 51.87479], [4.70024, 51.87971], [4.67261, 51.83865], [4.62639, 51.88066], [4.63708, 51.87629]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 484,
      "areaName": "Alphen aan den Rijn"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[4.729, 52.15953], [4.74184, 52.16267], [4.76004, 52.13133], [4.74022, 52.10465], [4.70507, 52.09464], [4.64113, 52.09748], [4.62192, 52.13319], [4.62869, 52.13862], [4.61946, 52.14211], [4.61903, 52.15871], [4.67984, 52.16275], [4.68121, 52.1675], [4.70567, 52.15216], [4.7038, 52.14462], [4.729, 52.15953]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 489,
      "areaName": "Barendrecht"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[4.48988, 51.85142], [4.48029, 51.85515], [4.47992, 51.86527], [4.54938, 51.87403], [4.57135, 51.848], [4.55361, 51.8299], [4.52548, 51.82985], [4.48909, 51.8354], [4.48988, 51.85142]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 491,
      "areaName": "Bergambacht"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[4.8014, 51.92167], [4.76557, 51.91546], [4.74387, 51.90525], [4.74523, 51.93193], [4.69405, 51.92888], [4.67506, 51.94055], [4.68695, 51.96848], [4.70906, 51.98415], [4.72096, 51.97826], [4.70522, 51.96289], [4.72025, 51.94432], [4.7386, 51.9498], [4.73832, 51.94443], [4.8146, 51.95826], [4.8126, 51.96933], [4.8251, 51.97246], [4.8323, 51.93864], [4.8014, 51.92167]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 498,
      "areaName": "Drechterland"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[5.2047, 52.67794], [5.20837, 52.68373], [5.246, 52.6866], [5.23589, 52.65717], [5.1983, 52.63659], [5.17663, 52.63388], [5.15921, 52.62315], [5.12816, 52.61985], [5.12109, 52.63259], [5.10106, 52.63379], [5.10184, 52.6474], [5.11705, 52.65002], [5.09149, 52.67883], [5.18702, 52.70745], [5.2047, 52.67794]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 499,
      "areaName": "Boskoop"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[4.64675, 52.08641], [4.64113, 52.09748], [4.6638, 52.09955], [4.70876, 52.09364], [4.71551, 52.08119], [4.69653, 52.07455], [4.69441, 52.06777], [4.6853, 52.06939], [4.6793, 52.05922], [4.67725, 52.06552], [4.63823, 52.06482], [4.63685, 52.07374], [4.62531, 52.07445], [4.6339, 52.07792], [4.63211, 52.08704], [4.64675, 52.08641]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 501,
      "areaName": "Brielle"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[4.16027, 51.88325], [4.13535, 51.90638], [4.15338, 51.92217], [4.14489, 51.93141], [4.21701, 51.89828], [4.23938, 51.87299], [4.18425, 51.84982], [4.17563, 51.85549], [4.18632, 51.86246], [4.16015, 51.86703], [4.15403, 51.87426], [4.16027, 51.88325]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 502,
      "areaName": "Capelle aan den IJssel"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[4.58846, 51.9616], [4.61949, 51.93349], [4.61543, 51.92777], [4.5499, 51.90673], [4.554, 51.91662], [4.54214, 51.9062], [4.53755, 51.91978], [4.55691, 51.91991], [4.56624, 51.92591], [4.56059, 51.94091], [4.57278, 51.94346], [4.56205, 51.95887], [4.58383, 51.9655], [4.58846, 51.9616]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 503,
      "areaName": "Delft"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[4.35142, 52.024], [4.3735, 52.0326], [4.38625, 52.02331], [4.39452, 52.01126], [4.38592, 52.00484], [4.40549, 51.9672], [4.39381, 51.9775], [4.36918, 51.96887], [4.35663, 51.9773], [4.33823, 51.97418], [4.32411, 51.98986], [4.34114, 52.00271], [4.32022, 52.00807], [4.35142, 52.024]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 505,
      "areaName": "Dordrecht"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[4.62711, 51.76028], [4.62122, 51.8008], [4.66737, 51.82036], [4.71345, 51.82331], [4.77209, 51.81532], [4.88464, 51.81647], [4.84598, 51.79876], [4.79719, 51.79977], [4.77354, 51.79332], [4.75524, 51.78161], [4.73663, 51.75557], [4.67522, 51.72421], [4.64387, 51.71883], [4.64088, 51.72338], [4.6236, 51.7214], [4.63152, 51.74398], [4.62711, 51.76028]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 512,
      "areaName": "Gorinchem"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[4.99928, 51.82087], [4.92699, 51.82831], [4.92182, 51.84079], [4.94272, 51.84479], [4.9384, 51.86363], [4.97273, 51.85993], [4.98332, 51.85711], [4.98126, 51.85187], [4.99915, 51.85228], [5.00002, 51.84436], [5.03142, 51.84108], [5.02635, 51.81886], [4.99928, 51.82087]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 513,
      "areaName": "Gouda"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[4.6843, 51.99786], [4.65945, 52.00529], [4.68182, 52.01931], [4.66728, 52.02508], [4.70604, 52.04012], [4.71987, 52.0352], [4.71985, 52.02648], [4.7437, 52.02261], [4.75732, 52.00293], [4.72896, 52.00747], [4.71886, 51.99837], [4.6843, 51.99786]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 518,
      "areaName": "'s-Gravenhage"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[4.287, 52.02287], [4.27266, 52.03592], [4.24822, 52.02523], [4.23501, 52.0393], [4.21229, 52.03071], [4.1963, 52.05569], [4.24525, 52.08838], [4.2565, 52.09942], [4.25383, 52.10121], [4.25254, 52.10403], [4.26457, 52.09497], [4.27173, 52.09956], [4.26126, 52.0992], [4.25587, 52.1041], [4.2629, 52.10271], [4.30352, 52.12787], [4.33306, 52.10573], [4.32328, 52.09922], [4.32748, 52.09557], [4.35849, 52.10576], [4.37271, 52.09477], [4.33521, 52.075], [4.35552, 52.06804], [4.3422, 52.06113], [4.348, 52.0565], [4.35982, 52.05737], [4.35601, 52.06157], [4.38, 52.07475], [4.40392, 52.07785], [4.42069, 52.06345], [4.42249, 52.05719], [4.41523, 52.05701], [4.42207, 52.05167], [4.39445, 52.05405], [4.37264, 52.04101], [4.39389, 52.03292], [4.35977, 52.02655], [4.34005, 52.06181], [4.29095, 52.04157], [4.30764, 52.01815], [4.29551, 52.01485], [4.287, 52.02287]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 523,
      "areaName": "Hardinxveld-Giessendam"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[4.84143, 51.8192], [4.81142, 51.81866], [4.80474, 51.82494], [4.80338, 51.84635], [4.83808, 51.86073], [4.84795, 51.83262], [4.92486, 51.83972], [4.92699, 51.82831], [4.88464, 51.81647], [4.84143, 51.8192]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 530,
      "areaName": "Hellevoetsluis"
    },
    "geometry": {
      "type": "MultiPolygon",
      "coordinates": [[[[4.11414, 51.82612], [4.11676, 51.82435], [4.11652, 51.82411], [4.11372, 51.82543], [4.11414, 51.82612]]], [[[4.10641, 51.82639], [4.10847, 51.82633], [4.11257, 51.82554], [4.10536, 51.82633], [4.10641, 51.82639]]], [[[4.15614, 51.88025], [4.16015, 51.86703], [4.165, 51.86782], [4.18632, 51.86246], [4.17563, 51.85549], [4.18289, 51.8501], [4.19826, 51.84989], [4.18664, 51.83545], [4.15892, 51.82114], [4.11932, 51.82062], [4.11523, 51.82686], [4.09435, 51.82886], [4.07389, 51.84256], [4.05331, 51.83694], [4.08915, 51.85287], [4.11725, 51.85796], [4.13708, 51.87938], [4.15614, 51.88025]]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 531,
      "areaName": "Hendrik-Ido-Ambacht"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[4.65994, 51.83107], [4.63721, 51.82535], [4.60016, 51.83873], [4.60489, 51.84839], [4.62732, 51.85465], [4.63652, 51.84966], [4.64695, 51.85666], [4.63533, 51.86985], [4.67205, 51.83977], [4.67044, 51.82359], [4.65994, 51.83107]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 532,
      "areaName": "Stede Broec"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[5.18538, 52.71023], [5.21567, 52.71739], [5.2575, 52.71618], [5.25929, 52.68725], [5.20879, 52.68381], [5.2046, 52.67761], [5.18538, 52.71023]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 534,
      "areaName": "Hillegom"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[4.59931, 52.31714], [4.61153, 52.31224], [4.58844, 52.2805], [4.57275, 52.27124], [4.54232, 52.28738], [4.56896, 52.31651], [4.59931, 52.31714]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 537,
      "areaName": "Katwijk"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[4.44852, 52.18263], [4.43495, 52.18086], [4.4488, 52.17559], [4.44048, 52.15565], [4.4116, 52.16348], [4.37459, 52.1868], [4.40599, 52.21952], [4.44019, 52.20736], [4.46408, 52.21596], [4.45565, 52.20703], [4.46637, 52.19689], [4.45862, 52.18346], [4.44852, 52.18263]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 542,
      "areaName": "Krimpen aan den IJssel"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[4.59816, 51.92608], [4.61147, 51.92545], [4.6177, 51.93105], [4.64302, 51.91257], [4.5968, 51.90782], [4.5891, 51.90237], [4.54924, 51.90488], [4.59816, 51.92608]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 545,
      "areaName": "Leerdam"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[5.06384, 51.89239], [5.05736, 51.91134], [5.07866, 51.92985], [5.08701, 51.92727], [5.10145, 51.94613], [5.13014, 51.93491], [5.14857, 51.93427], [5.11274, 51.88778], [5.09097, 51.88898], [5.08053, 51.87552], [5.05482, 51.87274], [5.06064, 51.85862], [5.02691, 51.85861], [5.02567, 51.8809], [5.06384, 51.89239]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 546,
      "areaName": "Leiden"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[4.45958, 52.1497], [4.44379, 52.14101], [4.43923, 52.15471], [4.45417, 52.17114], [4.46687, 52.16993], [4.47861, 52.17959], [4.49306, 52.17554], [4.49756, 52.18398], [4.51835, 52.18249], [4.5147, 52.16102], [4.52404, 52.1474], [4.47297, 52.11895], [4.45958, 52.1497]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 547,
      "areaName": "Leiderdorp"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[4.51554, 52.1694], [4.51837, 52.18212], [4.53878, 52.18013], [4.55112, 52.16324], [4.5624, 52.16612], [4.57148, 52.15311], [4.56131, 52.13227], [4.52678, 52.144], [4.51554, 52.1694]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 553,
      "areaName": "Lisse"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[4.53675, 52.27945], [4.54255, 52.28664], [4.57275, 52.27124], [4.55393, 52.2222], [4.52492, 52.23556], [4.52659, 52.24725], [4.51352, 52.25501], [4.53675, 52.27945]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 556,
      "areaName": "Maassluis"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[4.22145, 51.94267], [4.22829, 51.94799], [4.26105, 51.92668], [4.29261, 51.92124], [4.26757, 51.90534], [4.21272, 51.93373], [4.22145, 51.94267]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 568,
      "areaName": "Bernisse"
    },
    "geometry": {
      "type": "MultiPolygon",
      "coordinates": [[[[4.15784, 51.80237], [4.15771, 51.80086], [4.15337, 51.80235], [4.1564, 51.80246], [4.15784, 51.80237]]], [[[4.28528, 51.85594], [4.31726, 51.81129], [4.29579, 51.80211], [4.26562, 51.80397], [4.24663, 51.78534], [4.23005, 51.78805], [4.23015, 51.79381], [4.22601, 51.7912], [4.20259, 51.80567], [4.18362, 51.80357], [4.15889, 51.82097], [4.19766, 51.84708], [4.18527, 51.84971], [4.23938, 51.87299], [4.28379, 51.86448], [4.28528, 51.85594]]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 569,
      "areaName": "Nieuwkoop"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[4.72081, 52.20143], [4.72359, 52.21162], [4.73434, 52.20652], [4.77661, 52.22746], [4.79458, 52.22673], [4.80293, 52.20103], [4.81359, 52.20185], [4.84392, 52.18012], [4.89218, 52.1618], [4.87362, 52.15608], [4.87452, 52.13883], [4.82055, 52.14223], [4.8026, 52.12506], [4.73886, 52.10651], [4.76008, 52.13102], [4.74184, 52.16267], [4.7038, 52.14462], [4.70567, 52.15216], [4.68121, 52.1675], [4.68894, 52.19193], [4.69532, 52.18915], [4.70767, 52.20505], [4.72081, 52.20143]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 575,
      "areaName": "Noordwijk"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[4.42713, 52.24365], [4.49386, 52.32823], [4.54337, 52.31499], [4.45596, 52.25695], [4.45516, 52.24435], [4.47749, 52.23245], [4.46607, 52.225], [4.47017, 52.21965], [4.44019, 52.20736], [4.40599, 52.21952], [4.42713, 52.24365]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 576,
      "areaName": "Noordwijkerhout"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[4.54337, 52.31499], [4.56371, 52.3093], [4.52078, 52.26055], [4.47749, 52.23245], [4.45516, 52.24435], [4.45596, 52.25695], [4.54337, 52.31499]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 579,
      "areaName": "Oegstgeest"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[4.44852, 52.18263], [4.45862, 52.18346], [4.46347, 52.2002], [4.49145, 52.20369], [4.49306, 52.17554], [4.4786, 52.17959], [4.46687, 52.16993], [4.45417, 52.17114], [4.44837, 52.16205], [4.44809, 52.17718], [4.43495, 52.18086], [4.44852, 52.18263]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 584,
      "areaName": "Oud-Beijerland"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[4.39663, 51.83103], [4.421, 51.82987], [4.43248, 51.83705], [4.45008, 51.83217], [4.45216, 51.81217], [4.4305, 51.81049], [4.42453, 51.78587], [4.41417, 51.77913], [4.37878, 51.7874], [4.38953, 51.81189], [4.38213, 51.82408], [4.39663, 51.83103]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 585,
      "areaName": "Binnenmaas"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[4.54584, 51.77386], [4.51537, 51.78716], [4.47415, 51.77646], [4.46599, 51.78833], [4.43772, 51.7814], [4.42539, 51.7847], [4.4305, 51.81049], [4.45216, 51.81217], [4.45008, 51.83217], [4.54865, 51.83176], [4.57029, 51.81102], [4.62122, 51.8008], [4.63159, 51.74725], [4.62658, 51.72826], [4.59183, 51.7485], [4.61196, 51.76047], [4.57126, 51.76334], [4.57061, 51.77197], [4.54584, 51.77386]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 588,
      "areaName": "Korendijk"
    },
    "geometry": {
      "type": "MultiPolygon",
      "coordinates": [[[[4.3664, 51.70976], [4.3664, 51.70976], [4.36593, 51.70978], [4.36625, 51.71002], [4.3664, 51.70976]]], [[[4.34232, 51.72178], [4.36549, 51.71422], [4.36929, 51.71431], [4.36958, 51.71424], [4.36518, 51.71196], [4.3546, 51.7146], [4.35999, 51.71595], [4.34221, 51.72174], [4.33423, 51.71324], [4.33207, 51.71829], [4.34218, 51.7218], [4.34267, 51.72189], [4.34232, 51.72178]]], [[[4.26381, 51.75389], [4.31131, 51.74711], [4.35717, 51.73179], [4.33627, 51.72626], [4.3108, 51.72765], [4.3036, 51.73367], [4.30579, 51.73108], [4.30136, 51.72958], [4.29397, 51.73774], [4.25875, 51.74832], [4.26381, 51.75389]]], [[[4.38449, 51.8224], [4.38841, 51.80233], [4.37878, 51.7874], [4.41417, 51.77913], [4.38448, 51.73061], [4.31779, 51.75439], [4.25824, 51.7626], [4.24824, 51.76629], [4.25691, 51.76825], [4.25979, 51.77026], [4.25899, 51.77157], [4.24586, 51.76765], [4.22779, 51.78052], [4.23895, 51.78018], [4.24212, 51.77222], [4.24304, 51.7719], [4.24698, 51.77255], [4.24716, 51.77205], [4.24773, 51.77172], [4.24695, 51.77264], [4.24248, 51.77212], [4.24105, 51.77536], [4.24851, 51.77553], [4.2502, 51.77767], [4.24064, 51.7805], [4.25155, 51.78124], [4.24663, 51.78534], [4.26562, 51.80397], [4.29641, 51.80221], [4.33815, 51.81677], [4.38449, 51.8224]]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 589,
      "areaName": "Oudewater"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[4.88107, 52.05772], [4.89541, 52.04823], [4.9065, 52.05348], [4.91712, 52.04379], [4.9114, 52.04018], [4.92644, 52.02848], [4.90497, 52.02648], [4.92004, 52.01001], [4.90885, 52.01083], [4.83522, 51.98614], [4.81781, 51.99977], [4.85713, 52.00596], [4.84721, 52.01798], [4.80352, 52.01396], [4.7987, 52.02227], [4.84439, 52.05678], [4.86823, 52.06345], [4.88107, 52.05772]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 590,
      "areaName": "Papendrecht"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[4.67261, 51.83865], [4.68183, 51.84909], [4.7067, 51.84107], [4.73726, 51.84646], [4.74351, 51.84236], [4.72964, 51.82217], [4.67173, 51.82079], [4.67261, 51.83865]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 597,
      "areaName": "Ridderkerk"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[4.55637, 51.86457], [4.54925, 51.8742], [4.56915, 51.87818], [4.57633, 51.90303], [4.61957, 51.88952], [4.64733, 51.85712], [4.63652, 51.84966], [4.62732, 51.85465], [4.60489, 51.84839], [4.60016, 51.83873], [4.57106, 51.84712], [4.55637, 51.86457]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 599,
      "areaName": "Rotterdam"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[4.1551, 51.97783], [4.19061, 51.96598], [4.1924, 51.95481], [4.21969, 51.94152], [4.21272, 51.93373], [4.23886, 51.91591], [4.28653, 51.8989], [4.32799, 51.89404], [4.41371, 51.90075], [4.40908, 51.91205], [4.41701, 51.92252], [4.40818, 51.93219], [4.41771, 51.93848], [4.40392, 51.93725], [4.39519, 51.94693], [4.38891, 51.94553], [4.37931, 51.96341], [4.39356, 51.96247], [4.42813, 51.97662], [4.44668, 51.96279], [4.46901, 51.98055], [4.51859, 51.96029], [4.53587, 51.97048], [4.57436, 51.97288], [4.57894, 51.98987], [4.59437, 51.99428], [4.59377, 51.976], [4.60181, 51.97214], [4.56205, 51.95887], [4.57278, 51.94346], [4.56059, 51.94091], [4.5656, 51.92476], [4.53755, 51.91978], [4.54214, 51.9062], [4.554, 51.91662], [4.54924, 51.90488], [4.57633, 51.90303], [4.56912, 51.87815], [4.47186, 51.86167], [4.39485, 51.87233], [4.38445, 51.86161], [4.38366, 51.84212], [4.35258, 51.8495], [4.33555, 51.8643], [4.26611, 51.86466], [4.24089, 51.87236], [4.21659, 51.89854], [4.14349, 51.9317], [4.10772, 51.93614], [4.102, 51.92353], [4.09289, 51.93253], [4.07694, 51.93377], [3.99338, 51.91581], [3.98793, 51.92049], [4.01483, 51.95046], [4.00642, 51.96322], [4.0099, 51.97635], [4.0265, 51.98662], [4.0417, 51.98597], [4.04721, 51.99475], [4.09683, 51.98419], [4.1278, 52.00057], [4.15097, 51.98764], [4.14728, 51.98139], [4.1551, 51.97783]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 603,
      "areaName": "Rijswijk"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[4.33515, 52.05963], [4.3414, 52.061], [4.35264, 52.0491], [4.34606, 52.04402], [4.35779, 52.02686], [4.3258, 52.01278], [4.31939, 52.01992], [4.30982, 52.01563], [4.29095, 52.04157], [4.33515, 52.05963]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 606,
      "areaName": "Schiedam"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[4.35067, 51.95151], [4.37931, 51.96341], [4.38891, 51.94553], [4.39519, 51.94693], [4.40392, 51.93725], [4.41549, 51.94076], [4.40815, 51.93181], [4.41701, 51.92252], [4.40908, 51.91205], [4.41371, 51.90075], [4.37062, 51.89936], [4.35067, 51.95151]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 608,
      "areaName": "Schoonhoven"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[4.8592, 51.94083], [4.8323, 51.93864], [4.82768, 51.97129], [4.85161, 51.95486], [4.8658, 51.96042], [4.87779, 51.93803], [4.8592, 51.94083]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 610,
      "areaName": "Sliedrecht"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[4.75144, 51.82161], [4.72964, 51.82217], [4.74148, 51.84083], [4.80338, 51.84635], [4.81142, 51.81866], [4.77209, 51.81532], [4.75144, 51.82161]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 611,
      "areaName": "Cromstrijen"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[4.4047, 51.76512], [4.42453, 51.78587], [4.43716, 51.78137], [4.46599, 51.78833], [4.47415, 51.77646], [4.48331, 51.77705], [4.4869, 51.757], [4.51823, 51.74464], [4.5047, 51.73752], [4.53497, 51.70191], [4.49427, 51.71028], [4.49214, 51.70685], [4.47452, 51.7152], [4.47494, 51.71197], [4.40055, 51.72131], [4.38448, 51.73061], [4.4047, 51.76512]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 612,
      "areaName": "Spijkenisse"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[4.28379, 51.86448], [4.33555, 51.8643], [4.3676, 51.84438], [4.41281, 51.84296], [4.43248, 51.83705], [4.421, 51.82987], [4.39713, 51.83127], [4.36908, 51.81698], [4.35453, 51.81919], [4.31726, 51.81129], [4.31569, 51.82155], [4.30061, 51.82706], [4.30055, 51.84208], [4.28574, 51.85008], [4.28379, 51.86448]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 613,
      "areaName": "Albrandswaard"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[4.48055, 51.86102], [4.49013, 51.85132], [4.48909, 51.8354], [4.45297, 51.83186], [4.41417, 51.84279], [4.38366, 51.84212], [4.38445, 51.86161], [4.39485, 51.87233], [4.48055, 51.86102]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 614,
      "areaName": "Westvoorne"
    },
    "geometry": {
      "type": "MultiPolygon",
      "coordinates": [[[[3.99599, 51.9157], [3.9983, 51.91589], [3.99539, 51.91534], [3.99338, 51.91581], [3.99599, 51.9157]]], [[[3.99538, 51.91605], [3.99526, 51.91605], [3.99475, 51.91613], [3.99547, 51.9163], [3.99538, 51.91605]]], [[[4.10966, 51.93562], [4.14489, 51.93141], [4.15338, 51.92217], [4.13535, 51.90638], [4.16035, 51.88335], [4.13042, 51.8761], [4.11725, 51.85796], [4.06752, 51.84543], [4.0302, 51.88727], [4.05587, 51.91276], [4.05247, 51.91804], [4.05814, 51.9155], [4.0399, 51.92388], [4.00192, 51.91661], [4.00961, 51.91328], [4.01017, 51.91145], [4.00345, 51.91532], [3.9958, 51.91638], [4.07416, 51.93366], [4.09289, 51.93253], [4.102, 51.92353], [4.10966, 51.93562]]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 617,
      "areaName": "Strijen"
    },
    "geometry": {
      "type": "MultiPolygon",
      "coordinates": [[[[4.56683, 51.69972], [4.56836, 51.69933], [4.54425, 51.69511], [4.54744, 51.69635], [4.56683, 51.69972]]], [[[4.51615, 51.7869], [4.54606, 51.7736], [4.57061, 51.77197], [4.57126, 51.76334], [4.61196, 51.76047], [4.59183, 51.7485], [4.62658, 51.72826], [4.6236, 51.7214], [4.53497, 51.70191], [4.5047, 51.73752], [4.51823, 51.74464], [4.48477, 51.7597], [4.48656, 51.78149], [4.51615, 51.7869]]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 620,
      "areaName": "Vianen"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[5.06459, 51.96465], [5.05438, 51.97659], [5.04104, 51.97849], [5.06629, 51.99407], [5.10042, 52.00303], [5.13677, 51.99567], [5.14971, 51.97427], [5.18023, 51.96745], [5.15069, 51.93332], [5.05446, 51.95479], [5.06459, 51.96465]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 622,
      "areaName": "Vlaardingen"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[4.35067, 51.95151], [4.37062, 51.89936], [4.32372, 51.89417], [4.26757, 51.90534], [4.32289, 51.94271], [4.35067, 51.95151]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 623,
      "areaName": "Vlist"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[4.72833, 52.00734], [4.75733, 52.00134], [4.75088, 52.01409], [4.77594, 52.01406], [4.7987, 52.02227], [4.80352, 52.01396], [4.8469, 52.01818], [4.85713, 52.00596], [4.81781, 51.99977], [4.86567, 51.96043], [4.84693, 51.95624], [4.8419, 51.96524], [4.82279, 51.97314], [4.8126, 51.96933], [4.8146, 51.95826], [4.72025, 51.94432], [4.70522, 51.96289], [4.72096, 51.97826], [4.7092, 51.98447], [4.73531, 51.99754], [4.72272, 52.00487], [4.72833, 52.00734]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 626,
      "areaName": "Voorschoten"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[4.44926, 52.14101], [4.46541, 52.14944], [4.46858, 52.13195], [4.4279, 52.10147], [4.40116, 52.11187], [4.44299, 52.14535], [4.44926, 52.14101]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 627,
      "areaName": "Waddinxveen"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[4.67365, 52.0226], [4.68182, 52.01931], [4.66661, 52.01297], [4.6628, 52.02398], [4.6368, 52.01168], [4.59109, 52.03509], [4.61036, 52.04672], [4.60691, 52.07705], [4.63685, 52.07374], [4.63823, 52.06482], [4.65997, 52.0641], [4.669, 52.05234], [4.6798, 52.05207], [4.67731, 52.04397], [4.70604, 52.04012], [4.66728, 52.02508], [4.67365, 52.0226]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 629,
      "areaName": "Wassenaar"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[4.35849, 52.10576], [4.32748, 52.09557], [4.32328, 52.09922], [4.33306, 52.10573], [4.30352, 52.12787], [4.37459, 52.1868], [4.4116, 52.16348], [4.44048, 52.15565], [4.44394, 52.14604], [4.37271, 52.09477], [4.35849, 52.10576]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 632,
      "areaName": "Woerden"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[4.92661, 52.07782], [4.90508, 52.07001], [4.82981, 52.06682], [4.82538, 52.10709], [4.79235, 52.12317], [4.80642, 52.12742], [4.81311, 52.14017], [4.83286, 52.14476], [4.85524, 52.13721], [4.87452, 52.13883], [4.87362, 52.15608], [4.90964, 52.16187], [4.91178, 52.14425], [4.9236, 52.14732], [4.94398, 52.1275], [4.96099, 52.13337], [4.98023, 52.11226], [4.97328, 52.10137], [4.98933, 52.10076], [4.99422, 52.09037], [5.00501, 52.08849], [4.9995, 52.06613], [4.95677, 52.06593], [4.93614, 52.07992], [4.92661, 52.07782]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 637,
      "areaName": "Zoetermeer"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[4.49781, 52.08784], [4.50445, 52.09329], [4.55769, 52.06095], [4.54534, 52.04894], [4.53467, 52.04956], [4.50573, 52.03214], [4.47703, 52.03128], [4.47074, 52.04048], [4.45764, 52.03862], [4.45056, 52.04921], [4.42207, 52.05167], [4.41523, 52.05701], [4.45675, 52.07881], [4.49781, 52.08784]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 638,
      "areaName": "Zoeterwoude"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[4.49797, 52.13216], [4.52404, 52.1474], [4.55073, 52.13838], [4.54191, 52.11866], [4.53532, 52.12043], [4.53714, 52.08395], [4.53056, 52.08051], [4.50445, 52.09329], [4.49181, 52.09003], [4.47083, 52.11771], [4.49797, 52.13216]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 642,
      "areaName": "Zwijndrecht"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[4.6663, 51.8268], [4.67171, 51.82085], [4.62122, 51.8008], [4.57029, 51.81102], [4.55361, 51.8299], [4.57106, 51.84712], [4.63721, 51.82535], [4.66189, 51.83161], [4.6663, 51.8268]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 643,
      "areaName": "Nederlek"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[4.63322, 51.89048], [4.60282, 51.89238], [4.57633, 51.90303], [4.66054, 51.91638], [4.6916, 51.93224], [4.74524, 51.93192], [4.73798, 51.90271], [4.66985, 51.88978], [4.63322, 51.89048]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 644,
      "areaName": "Ouderkerk"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[4.63059, 51.92143], [4.6177, 51.93105], [4.63424, 51.93746], [4.64615, 51.95481], [4.63181, 51.96969], [4.66895, 51.97919], [4.68751, 51.99569], [4.70722, 52.00176], [4.73531, 51.99754], [4.70364, 51.98076], [4.67927, 51.95814], [4.67506, 51.94055], [4.6916, 51.93224], [4.68657, 51.9281], [4.64302, 51.91257], [4.63059, 51.92143]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 653,
      "areaName": "Gaasterlan-Sleat"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[5.51085, 52.92643], [5.56478, 52.94748], [5.59426, 52.91541], [5.63998, 52.92247], [5.66389, 52.8884], [5.65193, 52.88628], [5.64315, 52.85992], [5.61827, 52.85055], [5.58522, 52.84952], [5.57621, 52.83753], [5.55277, 52.83259], [5.4532, 52.85525], [5.441, 52.85092], [5.4261, 52.87329], [5.47234, 52.87303], [5.4771, 52.86876], [5.49552, 52.87382], [5.50182, 52.88021], [5.47697, 52.90224], [5.51085, 52.92643]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 654,
      "areaName": "Borsele"
    },
    "geometry": {
      "type": "MultiPolygon",
      "coordinates": [[[[3.69873, 51.4697], [3.69568, 51.47111], [3.70263, 51.47481], [3.7063, 51.47096], [3.69873, 51.4697]]], [[[3.71851, 51.50202], [3.7751, 51.49721], [3.81046, 51.48313], [3.91288, 51.47912], [3.90773, 51.46951], [3.92851, 51.45879], [3.92098, 51.44415], [3.92794, 51.43679], [3.90063, 51.39492], [3.87233, 51.39755], [3.81721, 51.38496], [3.77568, 51.40529], [3.77669, 51.4102], [3.72611, 51.41451], [3.69639, 51.44585], [3.70465, 51.4503], [3.70355, 51.44174], [3.71081, 51.4466], [3.72223, 51.44466], [3.71253, 51.45086], [3.72627, 51.45784], [3.70991, 51.45346], [3.72137, 51.47348], [3.71053, 51.47184], [3.69905, 51.49234], [3.70554, 51.50246], [3.71851, 51.50202]]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 664,
      "areaName": "Goes"
    },
    "geometry": {
      "type": "MultiPolygon",
      "coordinates": [[[[3.72005, 51.52799], [3.71966, 51.52791], [3.71999, 51.52866], [3.72017, 51.52861], [3.72005, 51.52799]]], [[[3.72087, 51.52937], [3.71768, 51.52872], [3.72038, 51.53188], [3.72092, 51.53077], [3.72087, 51.52937]]], [[[3.724, 51.53361], [3.72208, 51.53329], [3.72152, 51.53078], [3.72162, 51.5336], [3.724, 51.53361]]], [[[3.78559, 51.54572], [3.78876, 51.54443], [3.78877, 51.54443], [3.78653, 51.54456], [3.78559, 51.54572]]], [[[3.82121, 51.54885], [3.86, 51.53838], [3.92457, 51.54545], [3.94046, 51.52548], [3.95244, 51.53054], [3.97145, 51.52845], [3.96517, 51.50635], [3.92573, 51.49182], [3.91288, 51.47912], [3.81046, 51.48313], [3.77374, 51.49747], [3.70554, 51.50246], [3.74525, 51.51247], [3.74694, 51.51685], [3.725, 51.52598], [3.74385, 51.54413], [3.74793, 51.53973], [3.76033, 51.54272], [3.74989, 51.54343], [3.75041, 51.54607], [3.75114, 51.5467], [3.75238, 51.5473], [3.75365, 51.54756], [3.79247, 51.54109], [3.82121, 51.54885]]], [[[3.77805, 51.54819], [3.77592, 51.54804], [3.77105, 51.55076], [3.77174, 51.55135], [3.77805, 51.54819]]], [[[3.76904, 51.55237], [3.77198, 51.54694], [3.75726, 51.5481], [3.75705, 51.5501], [3.76904, 51.55237]]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 668,
      "areaName": "West Maas en Waal"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[5.49738, 51.88904], [5.53136, 51.89475], [5.54512, 51.88797], [5.57699, 51.89244], [5.55304, 51.86254], [5.57727, 51.86458], [5.58501, 51.83911], [5.60977, 51.83635], [5.60896, 51.83099], [5.55762, 51.82742], [5.53948, 51.81622], [5.49165, 51.83068], [5.46696, 51.81166], [5.42491, 51.813], [5.40063, 51.83766], [5.42602, 51.87012], [5.45343, 51.88744], [5.49738, 51.88904]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 677,
      "areaName": "Hulst"
    },
    "geometry": {
      "type": "MultiPolygon",
      "coordinates": [[[[4.15878, 51.34993], [4.15691, 51.35031], [4.15602, 51.3516], [4.15691, 51.35154], [4.15878, 51.34993]]], [[[4.17686, 51.35143], [4.17702, 51.35225], [4.18041, 51.35235], [4.18009, 51.35198], [4.17686, 51.35143]]], [[[4.12346, 51.36415], [4.13995, 51.36126], [4.15076, 51.34607], [4.1333, 51.3441], [4.12805, 51.34998], [4.13348, 51.35109], [4.13749, 51.3478], [4.13917, 51.34865], [4.1402, 51.34833], [4.14036, 51.34855], [4.142, 51.34857], [4.14257, 51.34881], [4.13753, 51.34866], [4.13506, 51.35019], [4.13548, 51.35047], [4.13579, 51.35003], [4.13723, 51.34938], [4.13879, 51.34929], [4.13778, 51.35724], [4.13675, 51.35345], [4.12799, 51.3509], [4.13506, 51.35843], [4.11207, 51.36048], [4.12346, 51.36415]]], [[[4.17748, 51.36534], [4.17755, 51.36734], [4.17881, 51.36939], [4.17899, 51.36789], [4.17748, 51.36534]]], [[[4.16583, 51.37021], [4.17236, 51.36898], [4.16446, 51.35947], [4.17313, 51.36174], [4.17014, 51.35874], [4.17177, 51.3529], [4.15129, 51.36402], [4.16087, 51.36892], [4.16342, 51.36762], [4.16199, 51.36362], [4.16288, 51.36331], [4.16583, 51.37021]]], [[[4.17139, 51.3727], [4.17213, 51.36951], [4.17026, 51.37019], [4.16547, 51.37084], [4.17139, 51.3727]]], [[[3.93656, 51.36919], [3.93743, 51.36969], [3.94021, 51.37081], [3.94017, 51.37073], [3.93656, 51.36919]]], [[[4.21947, 51.36292], [4.21605, 51.36711], [4.21278, 51.37412], [4.21236, 51.37616], [4.21947, 51.36292]]], [[[3.99336, 51.40587], [4.01667, 51.40285], [4.01817, 51.39699], [4.02219, 51.4006], [4.05016, 51.36657], [4.07888, 51.36448], [4.07802, 51.36783], [4.08927, 51.36648], [4.08701, 51.36331], [4.10471, 51.35932], [4.11406, 51.34904], [4.15042, 51.32885], [4.14516, 51.33374], [4.16034, 51.32919], [4.15759, 51.33245], [4.16254, 51.33304], [4.15964, 51.33322], [4.1604, 51.33356], [4.16115, 51.33516], [4.16187, 51.33529], [4.16267, 51.33495], [4.1634, 51.33495], [4.16381, 51.33521], [4.16377, 51.33583], [4.14216, 51.33457], [4.13554, 51.33797], [4.14811, 51.33861], [4.13341, 51.34216], [4.15146, 51.3451], [4.15251, 51.33983], [4.16388, 51.33888], [4.14983, 51.34949], [4.1669, 51.34122], [4.16552, 51.33842], [4.168, 51.3334], [4.16601, 51.33308], [4.16554, 51.33241], [4.16585, 51.33175], [4.1733, 51.33519], [4.16649, 51.33882], [4.16805, 51.33821], [4.17026, 51.33833], [4.17082, 51.33804], [4.17237, 51.33766], [4.17284, 51.33766], [4.17059, 51.34126], [4.17719, 51.33826], [4.17868, 51.34046], [4.16436, 51.34694], [4.1872, 51.34337], [4.17627, 51.34871], [4.16132, 51.34923], [4.1573, 51.35206], [4.15857, 51.35213], [4.1625, 51.35007], [4.16461, 51.34971], [4.18363, 51.35232], [4.1894, 51.3479], [4.18833, 51.35161], [4.19515, 51.34779], [4.19637, 51.34759], [4.19797, 51.34785], [4.18973, 51.35312], [4.17169, 51.35531], [4.17468, 51.3609], [4.1939, 51.35346], [4.21148, 51.35348], [4.20032, 51.35544], [4.20261, 51.35981], [4.19381, 51.35444], [4.18986, 51.35764], [4.19342, 51.35769], [4.19515, 51.3584], [4.19588, 51.35818], [4.19801, 51.35925], [4.1765, 51.36253], [4.1761, 51.36491], [4.17745, 51.36806], [4.17708, 51.36551], [4.1773, 51.36461], [4.1804, 51.36439], [4.1804, 51.37081], [4.18175, 51.37012], [4.18169, 51.36622], [4.18362, 51.36387], [4.18296, 51.36317], [4.18327, 51.36214], [4.18362, 51.3619], [4.18608, 51.36507], [4.18783, 51.36339], [4.18803, 51.36533], [4.1888, 51.36474], [4.19107, 51.36404], [4.19252, 51.36427], [4.19335, 51.36333], [4.19399, 51.36329], [4.19458, 51.36354], [4.1933, 51.36799], [4.19059, 51.36541], [4.18309, 51.36602], [4.18666, 51.36747], [4.18864, 51.36712], [4.19061, 51.36734], [4.19111, 51.36775], [4.18675, 51.36763], [4.18305, 51.36694], [4.18734, 51.37582], [4.1996, 51.37559], [4.19408, 51.37406], [4.19261, 51.372], [4.19301, 51.37036], [4.20667, 51.37449], [4.2115, 51.37047], [4.20031, 51.36806], [4.19994, 51.36268], [4.21256, 51.36946], [4.20618, 51.36455], [4.21547, 51.36499], [4.21235, 51.3579], [4.21979, 51.36247], [4.22545, 51.35682], [4.22375, 51.35804], [4.1989, 51.34271], [4.22367, 51.35526], [4.23474, 51.34809], [4.16613, 51.29289], [4.05484, 51.2429], [3.99689, 51.24111], [3.99312, 51.248], [3.98224, 51.24911], [3.97888, 51.30081], [3.95328, 51.30829], [3.96175, 51.33266], [3.95765, 51.36383], [3.94178, 51.36541], [3.95829, 51.36542], [3.96331, 51.38146], [3.95447, 51.3794], [3.96206, 51.40017], [3.97344, 51.40547], [3.97076, 51.40557], [3.9681, 51.40803], [3.99291, 51.40539], [3.99349, 51.40715], [3.99246, 51.40965], [3.99265, 51.41007], [3.99361, 51.40724], [3.99336, 51.40587]], [[3.96138, 51.38919], [3.96561, 51.38935], [3.96531, 51.39365], [3.96235, 51.39365], [3.96138, 51.38919]], [[3.96383, 51.38923], [3.95853, 51.38321], [3.96337, 51.38151], [3.96812, 51.38538], [3.96383, 51.38923]], [[4.08546, 51.3641], [4.08643, 51.36663], [4.07973, 51.36761], [4.07901, 51.36447], [4.08546, 51.3641]]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 678,
      "areaName": "Kapelle"
    },
    "geometry": {
      "type": "MultiPolygon",
      "coordinates": [[[[3.97256, 51.52803], [4.01361, 51.51973], [4.01738, 51.51248], [4.00473, 51.50484], [4.00732, 51.45863], [3.993, 51.45134], [3.97508, 51.46238], [3.93386, 51.44836], [3.90841, 51.47194], [3.92573, 51.49182], [3.96517, 51.50635], [3.96351, 51.52061], [3.97256, 51.52803]]], [[[3.97169, 51.52835], [3.9714, 51.52837], [3.9713, 51.52849], [3.97172, 51.52841], [3.97169, 51.52835]]], [[[3.96896, 51.52899], [3.96895, 51.52898], [3.96847, 51.52902], [3.96908, 51.52914], [3.96896, 51.52899]]], [[[3.96824, 51.52913], [3.96809, 51.52907], [3.96787, 51.52911], [3.96819, 51.52926], [3.96824, 51.52913]]], [[[3.96518, 51.52993], [3.96636, 51.52968], [3.96638, 51.52959], [3.96391, 51.52977], [3.96518, 51.52993]]], [[[3.96179, 51.53006], [3.96209, 51.52994], [3.96063, 51.53013], [3.96114, 51.5301], [3.96179, 51.53006]]], [[[3.96038, 51.53018], [3.96038, 51.53018], [3.95778, 51.53069], [3.95816, 51.53066], [3.96038, 51.53018]]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 687,
      "areaName": "Middelburg"
    },
    "geometry": {
      "type": "MultiPolygon",
      "coordinates": [[[[3.70073, 51.5159], [3.70379, 51.51569], [3.70827, 51.51322], [3.70291, 51.51327], [3.70073, 51.5159]]], [[[3.7233, 51.52278], [3.72504, 51.5217], [3.72407, 51.52113], [3.72148, 51.52219], [3.7233, 51.52278]]], [[[3.72713, 51.52431], [3.72696, 51.52434], [3.72652, 51.52465], [3.72687, 51.52453], [3.72713, 51.52431]]], [[[3.72591, 51.52478], [3.72601, 51.52474], [3.72576, 51.52481], [3.72521, 51.52523], [3.72506, 51.52572], [3.72591, 51.52478]]], [[[3.7192, 51.52615], [3.71789, 51.52537], [3.71966, 51.52791], [3.71998, 51.52778], [3.7192, 51.52615]]], [[[3.71579, 51.52498], [3.71317, 51.52488], [3.71768, 51.52872], [3.71844, 51.5284], [3.71579, 51.52498]]], [[[3.691, 51.52725], [3.68986, 51.52813], [3.69105, 51.53058], [3.69183, 51.52928], [3.691, 51.52725]]], [[[3.61308, 51.53411], [3.61713, 51.52526], [3.63394, 51.52599], [3.63454, 51.52054], [3.65884, 51.51926], [3.6802, 51.5345], [3.703, 51.512], [3.72139, 51.51319], [3.70488, 51.51632], [3.72601, 51.51994], [3.72815, 51.52447], [3.74694, 51.51685], [3.70561, 51.50364], [3.70365, 51.48227], [3.66689, 51.46962], [3.65012, 51.46929], [3.62921, 51.48091], [3.62166, 51.47548], [3.60176, 51.47933], [3.59966, 51.47529], [3.5832, 51.48268], [3.5753, 51.50662], [3.58342, 51.50866], [3.58368, 51.51963], [3.59663, 51.52245], [3.58978, 51.53181], [3.61308, 51.53411]]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 689,
      "areaName": "Giessenlanden"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[4.8664, 51.83481], [4.84795, 51.83262], [4.83808, 51.86073], [4.91076, 51.88771], [4.92778, 51.90091], [4.91963, 51.91882], [4.9477, 51.93372], [4.95616, 51.91559], [4.97374, 51.90767], [4.97341, 51.89725], [4.99497, 51.90229], [4.99624, 51.87312], [5.02696, 51.88192], [5.02691, 51.85861], [4.99489, 51.86177], [4.99634, 51.84923], [4.98126, 51.85187], [4.97563, 51.85921], [4.9384, 51.86363], [4.94272, 51.84479], [4.88094, 51.83285], [4.8664, 51.83481]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 703,
      "areaName": "Reimerswaal"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[4.14827, 51.43193], [4.18048, 51.44362], [4.18839, 51.44292], [4.18775, 51.43902], [4.19384, 51.43664], [4.18902, 51.44344], [4.20149, 51.44111], [4.19629, 51.43463], [4.20192, 51.44096], [4.21315, 51.43876], [4.21531, 51.43361], [4.21779, 51.43379], [4.21761, 51.48768], [4.23033, 51.4889], [4.27585, 51.42505], [4.26373, 51.41645], [4.26635, 51.38654], [4.27743, 51.37604], [4.24392, 51.37484], [4.23162, 51.3949], [4.20645, 51.39949], [4.1989, 51.40679], [4.15319, 51.39423], [4.11448, 51.40198], [4.10524, 51.39877], [4.08913, 51.40665], [4.09931, 51.40587], [4.0995, 51.40612], [4.10024, 51.40608], [4.10123, 51.40663], [4.06159, 51.41382], [4.04591, 51.4263], [4.05069, 51.42978], [4.01281, 51.43909], [4.01194, 51.45454], [4.01006, 51.44031], [4.00418, 51.44127], [3.993, 51.45134], [4.00732, 51.45863], [4.00473, 51.50484], [4.01739, 51.51245], [4.01361, 51.51973], [4.04246, 51.50263], [4.05158, 51.50334], [4.05368, 51.50279], [4.0568, 51.50027], [4.05893, 51.47529], [4.09301, 51.44645], [4.13022, 51.43671], [4.13312, 51.4314], [4.14827, 51.43193]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 707,
      "areaName": "Zederik"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[4.96117, 51.96], [4.99807, 51.97787], [5.02724, 51.96916], [5.0404, 51.97744], [5.05438, 51.97659], [5.06464, 51.96459], [5.05446, 51.95479], [5.10145, 51.94613], [5.08701, 51.92727], [5.07866, 51.92985], [5.05736, 51.91134], [5.06384, 51.89239], [4.99624, 51.87312], [4.99497, 51.90229], [4.97341, 51.89725], [4.97374, 51.90767], [4.95616, 51.91559], [4.9477, 51.93372], [4.93923, 51.92894], [4.9263, 51.95093], [4.93982, 51.96344], [4.96117, 51.96]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 715,
      "areaName": "Terneuzen"
    },
    "geometry": {
      "type": "MultiPolygon",
      "coordinates": [[[[3.69313, 51.36478], [3.72356, 51.34929], [3.75829, 51.34781], [3.75526, 51.34031], [3.76922, 51.33608], [3.77095, 51.35072], [3.80678, 51.34449], [3.81493, 51.32955], [3.81401, 51.34292], [3.8196, 51.33611], [3.81989, 51.34258], [3.82734, 51.34322], [3.84205, 51.33582], [3.86668, 51.33624], [3.87538, 51.34635], [3.91657, 51.36225], [3.95705, 51.36481], [3.96175, 51.33266], [3.95328, 51.30829], [3.97888, 51.30081], [3.98224, 51.24911], [4.00569, 51.24188], [3.97892, 51.22537], [3.96429, 51.22395], [3.95856, 51.21581], [3.93598, 51.21189], [3.92942, 51.22026], [3.916, 51.21463], [3.91863, 51.20776], [3.89947, 51.20174], [3.88635, 51.20016], [3.87763, 51.20801], [3.89024, 51.214], [3.88855, 51.22302], [3.85957, 51.21083], [3.79122, 51.21398], [3.79547, 51.25605], [3.77378, 51.26398], [3.76251, 51.26178], [3.75241, 51.27027], [3.69393, 51.27604], [3.70661, 51.28883], [3.70358, 51.30994], [3.71241, 51.31579], [3.6662, 51.31981], [3.64415, 51.34183], [3.64724, 51.35005], [3.69381, 51.35247], [3.69313, 51.36478]]], [[[3.92764, 51.36552], [3.92306, 51.36404], [3.92158, 51.36374], [3.93654, 51.36918], [3.92764, 51.36552]]], [[[3.69303, 51.36593], [3.69302, 51.36597], [3.69315, 51.36601], [3.69315, 51.36599], [3.69303, 51.36593]]], [[[3.70266, 51.38308], [3.70201, 51.38411], [3.70235, 51.38539], [3.70276, 51.38489], [3.70266, 51.38308]]], [[[3.69919, 51.38846], [3.70108, 51.38712], [3.69946, 51.38557], [3.70013, 51.38672], [3.69919, 51.38846]]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 716,
      "areaName": "Tholen"
    },
    "geometry": {
      "type": "MultiPolygon",
      "coordinates": [[[[4.15287, 51.6065], [4.15676, 51.6049], [4.15135, 51.60338], [4.15341, 51.60443], [4.15287, 51.6065]]], [[[4.1641, 51.60831], [4.166, 51.60832], [4.1668, 51.60762], [4.16395, 51.60726], [4.1641, 51.60831]]], [[[4.22125, 51.63752], [4.22288, 51.63727], [4.22452, 51.63658], [4.22245, 51.6367], [4.22125, 51.63752]]], [[[4.20288, 51.63921], [4.21467, 51.6384], [4.21716, 51.6357], [4.20243, 51.63427], [4.19574, 51.63802], [4.20288, 51.63921]]], [[[4.20831, 51.64109], [4.20911, 51.64069], [4.20936, 51.64024], [4.20558, 51.63991], [4.20831, 51.64109]]], [[[4.2024, 51.64173], [4.20307, 51.64104], [4.19855, 51.63944], [4.19901, 51.64062], [4.2024, 51.64173]]], [[[4.20138, 51.64464], [4.20201, 51.64428], [4.20223, 51.64399], [4.20219, 51.64371], [4.20203, 51.64346], [4.19706, 51.64309], [4.20138, 51.64464]]], [[[4.2402, 51.64348], [4.23691, 51.64401], [4.23717, 51.64576], [4.23821, 51.64595], [4.2402, 51.64348]]], [[[4.24246, 51.64617], [4.24166, 51.64396], [4.24078, 51.64409], [4.24041, 51.64521], [4.24246, 51.64617]]], [[[4.24098, 51.64741], [4.24245, 51.64679], [4.23778, 51.6463], [4.23835, 51.64712], [4.24098, 51.64741]]], [[[4.19924, 51.64675], [4.19961, 51.646], [4.1989, 51.64539], [4.19843, 51.6474], [4.19924, 51.64675]]], [[[4.12127, 51.65343], [4.14863, 51.65014], [4.189, 51.63433], [4.19414, 51.63903], [4.19135, 51.62343], [4.19409, 51.62197], [4.19679, 51.63477], [4.19969, 51.63196], [4.19632, 51.62585], [4.19641, 51.62436], [4.19692, 51.62386], [4.19789, 51.62361], [4.20017, 51.6309], [4.20007, 51.62954], [4.20127, 51.62814], [4.20712, 51.62723], [4.2081, 51.62831], [4.20194, 51.63239], [4.21351, 51.62935], [4.19967, 51.63476], [4.20433, 51.63356], [4.20797, 51.63365], [4.21016, 51.6342], [4.21145, 51.63374], [4.21098, 51.63301], [4.21171, 51.63279], [4.23732, 51.63401], [4.20296, 51.6223], [4.19012, 51.60275], [4.19572, 51.58897], [4.2352, 51.55395], [4.2188, 51.50896], [4.23033, 51.4889], [4.21761, 51.48768], [4.17536, 51.50246], [4.17189, 51.50869], [4.16298, 51.51181], [4.16061, 51.51471], [4.17305, 51.51002], [4.16579, 51.51301], [4.17652, 51.51493], [4.16392, 51.52298], [4.0768, 51.5251], [4.04923, 51.55227], [4.02786, 51.55629], [4.02404, 51.5672], [3.98387, 51.58088], [3.98858, 51.59413], [4.02396, 51.59692], [4.0627, 51.61296], [4.10064, 51.61047], [4.11693, 51.59907], [4.12271, 51.59754], [4.13227, 51.5983], [4.11657, 51.60217], [4.14096, 51.59838], [4.13669, 51.60309], [4.14546, 51.60382], [4.14339, 51.60016], [4.1441, 51.60044], [4.14415, 51.59984], [4.14602, 51.59943], [4.14935, 51.60374], [4.15095, 51.6023], [4.14974, 51.60152], [4.15007, 51.60068], [4.14957, 51.59979], [4.14974, 51.59966], [4.17353, 51.60549], [4.17663, 51.61693], [4.12664, 51.613], [4.1176, 51.62464], [4.10009, 51.63073], [4.09777, 51.64269], [4.10528, 51.64137], [4.12127, 51.65343]]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 717,
      "areaName": "Veere"
    },
    "geometry": {
      "type": "MultiPolygon",
      "coordinates": [[[[3.69135, 51.53651], [3.68997, 51.53628], [3.68932, 51.53645], [3.6954, 51.54098], [3.69135, 51.53651]]], [[[3.68357, 51.55286], [3.69448, 51.54694], [3.68988, 51.53693], [3.68253, 51.54833], [3.68357, 51.55286]]], [[[3.67335, 51.55857], [3.6755, 51.55606], [3.67513, 51.55422], [3.67024, 51.55836], [3.67335, 51.55857]]], [[[3.667, 51.5616], [3.67129, 51.56189], [3.6724, 51.56029], [3.66546, 51.55976], [3.667, 51.5616]]], [[[3.58852, 51.59505], [3.63869, 51.58975], [3.62779, 51.584], [3.6286, 51.57356], [3.63878, 51.56285], [3.66981, 51.5502], [3.66673, 51.54225], [3.67369, 51.54662], [3.68072, 51.53518], [3.65884, 51.51926], [3.61713, 51.52526], [3.61316, 51.53514], [3.58978, 51.53181], [3.59663, 51.52245], [3.58368, 51.51963], [3.58342, 51.50866], [3.5753, 51.50662], [3.58698, 51.47925], [3.5757, 51.47445], [3.56606, 51.47825], [3.56457, 51.47043], [3.525, 51.46252], [3.49603, 51.49465], [3.43512, 51.52359], [3.4362, 51.54025], [3.5569, 51.59196], [3.58852, 51.59505]]], [[[3.68166, 51.61731], [3.69401, 51.61651], [3.68428, 51.61485], [3.68313, 51.60076], [3.68075, 51.6001], [3.68375, 51.61488], [3.6742, 51.62035], [3.68166, 51.61731]]], [[[3.71985, 51.63318], [3.71841, 51.63228], [3.7153, 51.6337], [3.7204, 51.63436], [3.71985, 51.63318]]], [[[3.72542, 51.65033], [3.72292, 51.65033], [3.72794, 51.65033], [3.72542, 51.65033]]], [[[3.72078, 51.64919], [3.70955, 51.63247], [3.72427, 51.62741], [3.73074, 51.63291], [3.72216, 51.6368], [3.73125, 51.63362], [3.73148, 51.63207], [3.72254, 51.62498], [3.70864, 51.63121], [3.70396, 51.62196], [3.69775, 51.62884], [3.69015, 51.6233], [3.6987, 51.61872], [3.66782, 51.62145], [3.68242, 51.62317], [3.69884, 51.64281], [3.70292, 51.63762], [3.72078, 51.64919]]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 718,
      "areaName": "Vlissingen"
    },
    "geometry": {
      "type": "MultiPolygon",
      "coordinates": [[[[3.38443, 51.38114], [3.38442, 51.38119], [3.3845, 51.38119], [3.38453, 51.38117], [3.38443, 51.38114]]], [[[3.42563, 51.39169], [3.42547, 51.39172], [3.4256, 51.39182], [3.42574, 51.39172], [3.42563, 51.39169]]], [[[3.428, 51.39226], [3.42796, 51.39225], [3.42797, 51.39226], [3.428, 51.39226]]], [[[3.43474, 51.39253], [3.43476, 51.39249], [3.43455, 51.39261], [3.43465, 51.39263], [3.43474, 51.39253]]], [[[3.45518, 51.39485], [3.45512, 51.39483], [3.45509, 51.39487], [3.45519, 51.39491], [3.45518, 51.39485]]], [[[3.47423, 51.39849], [3.47423, 51.3983], [3.47414, 51.39829], [3.47414, 51.39853], [3.47423, 51.39849]]], [[[3.48256, 51.39957], [3.48248, 51.39979], [3.48255, 51.39982], [3.48262, 51.39959], [3.48256, 51.39957]]], [[[3.48464, 51.40032], [3.48459, 51.40031], [3.48458, 51.40033], [3.48465, 51.40035], [3.48464, 51.40032]]], [[[3.55346, 51.40461], [3.55346, 51.40461], [3.55328, 51.4047], [3.55339, 51.40467], [3.55346, 51.40461]]], [[[3.49799, 51.40421], [3.49798, 51.40421], [3.49801, 51.40422], [3.49799, 51.40421]]], [[[3.55146, 51.40612], [3.551, 51.40595], [3.54994, 51.40608], [3.55162, 51.40629], [3.55146, 51.40612]]], [[[3.52702, 51.40815], [3.52693, 51.40814], [3.52692, 51.40817], [3.52697, 51.4082], [3.52702, 51.40815]]], [[[3.50346, 51.40783], [3.50353, 51.40783], [3.50343, 51.4078], [3.50346, 51.40783]]], [[[3.50522, 51.40789], [3.50524, 51.40789], [3.50516, 51.40789], [3.50518, 51.4079], [3.50522, 51.40789]]], [[[3.72958, 51.41288], [3.72863, 51.41195], [3.72824, 51.41209], [3.72862, 51.41213], [3.72958, 51.41288]]], [[[3.71272, 51.43136], [3.71805, 51.42765], [3.71162, 51.42459], [3.71577, 51.42683], [3.71272, 51.43136]]], [[[3.71191, 51.43192], [3.71212, 51.43178], [3.70784, 51.43111], [3.71033, 51.43302], [3.71191, 51.43192]]], [[[3.70957, 51.45354], [3.70963, 51.45348], [3.70995, 51.45359], [3.70957, 51.45334], [3.70957, 51.45354]]], [[[3.69403, 51.45512], [3.70465, 51.4503], [3.69639, 51.44585], [3.70854, 51.4347], [3.67497, 51.44676], [3.68577, 51.4569], [3.69403, 51.45512]]], [[[3.52493, 51.46249], [3.52484, 51.46253], [3.52494, 51.46257], [3.525, 51.46252], [3.52493, 51.46249]]], [[[3.71093, 51.46553], [3.71028, 51.45462], [3.6928, 51.45867], [3.69343, 51.45982], [3.71093, 51.46553]]], [[[3.5229, 51.46434], [3.52289, 51.46433], [3.52283, 51.46438], [3.52284, 51.46439], [3.5229, 51.46434]]], [[[3.71612, 51.46776], [3.7153, 51.46764], [3.71528, 51.46774], [3.71553, 51.46772], [3.71612, 51.46776]]], [[[3.71715, 51.46909], [3.71683, 51.46899], [3.71705, 51.46932], [3.71718, 51.46929], [3.71715, 51.46909]]], [[[3.51864, 51.46807], [3.51863, 51.46806], [3.51858, 51.4681], [3.5186, 51.46811], [3.51864, 51.46807]]], [[[3.5166, 51.46999], [3.51654, 51.47003], [3.51661, 51.47006], [3.51666, 51.47001], [3.5166, 51.46999]]], [[[3.51459, 51.47186], [3.51454, 51.4719], [3.51457, 51.47193], [3.51462, 51.47187], [3.51459, 51.47186]]], [[[3.51175, 51.47529], [3.5118, 51.47524], [3.51175, 51.47529], [3.51175, 51.47529]]], [[[3.51046, 51.47692], [3.51046, 51.47691], [3.51046, 51.47692], [3.51046, 51.47692]]], [[[3.70285, 51.48228], [3.70628, 51.47755], [3.69568, 51.47111], [3.7063, 51.47096], [3.70344, 51.46744], [3.67278, 51.46108], [3.67425, 51.45714], [3.65986, 51.45884], [3.65553, 51.45387], [3.66723, 51.45008], [3.66845, 51.44784], [3.65611, 51.45203], [3.63225, 51.44159], [3.60904, 51.44028], [3.59729, 51.45169], [3.60074, 51.43983], [3.57576, 51.43819], [3.52611, 51.46176], [3.56457, 51.47043], [3.56606, 51.47825], [3.62166, 51.47548], [3.62921, 51.48091], [3.65898, 51.46815], [3.70285, 51.48228]]], [[[3.50798, 51.4801], [3.50797, 51.48009], [3.50791, 51.48015], [3.50793, 51.48016], [3.50798, 51.4801]]], [[[3.50655, 51.48166], [3.50654, 51.48166], [3.50648, 51.48172], [3.50649, 51.48173], [3.50655, 51.48166]]], [[[3.50384, 51.48484], [3.50377, 51.4849], [3.50382, 51.48491], [3.50387, 51.48486], [3.50384, 51.48484]]], [[[3.50238, 51.48639], [3.50231, 51.48644], [3.50235, 51.48646], [3.50243, 51.48641], [3.50238, 51.48639]]], [[[3.49912, 51.48938], [3.49905, 51.4894], [3.49906, 51.48943], [3.49912, 51.4894], [3.49912, 51.48938]]], [[[3.49691, 51.49063], [3.49691, 51.49063], [3.4969, 51.49063], [3.49691, 51.49063], [3.49691, 51.49063]]], [[[3.49688, 51.49068], [3.49689, 51.49066], [3.49687, 51.49068], [3.49688, 51.49068]]], [[[3.49609, 51.4924], [3.49602, 51.49245], [3.49618, 51.49249], [3.49619, 51.49244], [3.49609, 51.4924]]], [[[3.49336, 51.49316], [3.49327, 51.49322], [3.49329, 51.49323], [3.49338, 51.49317], [3.49336, 51.49316]]], [[[3.49155, 51.4944], [3.49149, 51.49444], [3.49155, 51.49447], [3.4916, 51.49443], [3.49155, 51.4944]]], [[[3.49006, 51.49547], [3.49001, 51.49551], [3.49004, 51.49553], [3.4901, 51.49549], [3.49006, 51.49547]]], [[[3.48788, 51.49628], [3.48779, 51.49633], [3.48792, 51.49641], [3.48801, 51.49637], [3.48788, 51.49628]]], [[[3.48611, 51.49731], [3.4861, 51.49731], [3.48609, 51.49733], [3.48611, 51.49731]]], [[[3.48406, 51.49768], [3.48419, 51.49789], [3.48427, 51.49786], [3.48408, 51.49769], [3.48406, 51.49768]]], [[[3.48093, 51.49883], [3.48088, 51.49888], [3.4812, 51.49908], [3.48122, 51.49907], [3.48093, 51.49883]]], [[[3.47941, 51.4995], [3.47933, 51.49952], [3.47938, 51.49956], [3.47944, 51.49952], [3.47941, 51.4995]]], [[[3.47794, 51.50007], [3.47787, 51.50011], [3.47827, 51.50036], [3.47829, 51.50035], [3.47794, 51.50007]]], [[[3.47616, 51.5007], [3.4761, 51.50073], [3.47613, 51.50078], [3.4762, 51.50072], [3.47616, 51.5007]]], [[[3.47473, 51.50158], [3.47469, 51.50163], [3.47498, 51.50179], [3.475, 51.50177], [3.47473, 51.50158]]], [[[3.47308, 51.50228], [3.47308, 51.50228], [3.47301, 51.5023], [3.47301, 51.50231], [3.47308, 51.50228]]], [[[3.4712, 51.50291], [3.47126, 51.50287], [3.47119, 51.5029], [3.4712, 51.50291]]], [[[3.46975, 51.50378], [3.4697, 51.5038], [3.4697, 51.50383], [3.46978, 51.50379], [3.46975, 51.50378]]], [[[3.46812, 51.50436], [3.46799, 51.50439], [3.46805, 51.50444], [3.46815, 51.50439], [3.46812, 51.50436]]], [[[3.46646, 51.50522], [3.46646, 51.50522], [3.46638, 51.50524], [3.46641, 51.50526], [3.46646, 51.50522]]], [[[3.465, 51.50612], [3.46499, 51.50612], [3.46492, 51.50614], [3.46497, 51.50614], [3.465, 51.50612]]], [[[3.46168, 51.50758], [3.46164, 51.50755], [3.46157, 51.50758], [3.46161, 51.50762], [3.46168, 51.50758]]], [[[3.45985, 51.50817], [3.45973, 51.5082], [3.45993, 51.50837], [3.46002, 51.50833], [3.45985, 51.50817]]], [[[3.45833, 51.50899], [3.45823, 51.509], [3.45833, 51.50909], [3.4584, 51.50906], [3.45833, 51.50899]]], [[[3.45704, 51.50952], [3.45695, 51.50955], [3.45708, 51.50968], [3.45716, 51.50964], [3.45704, 51.50952]]], [[[3.44823, 51.51479], [3.44827, 51.51476], [3.44825, 51.51477], [3.44823, 51.51479]]], [[[3.4473, 51.51565], [3.44724, 51.51567], [3.44727, 51.5157], [3.44733, 51.51565], [3.4473, 51.51565]]], [[[3.44543, 51.51767], [3.4454, 51.5177], [3.4454, 51.51771], [3.44543, 51.5177], [3.44543, 51.51767]]], [[[3.44374, 51.51823], [3.4437, 51.51828], [3.44379, 51.51833], [3.44386, 51.51828], [3.44374, 51.51823]]], [[[3.4415, 51.51988], [3.44146, 51.51991], [3.44148, 51.51994], [3.44155, 51.51989], [3.4415, 51.51988]]], [[[3.4411, 51.52121], [3.44105, 51.52122], [3.44107, 51.52126], [3.4411, 51.52125], [3.4411, 51.52121]]], [[[3.4398, 51.52134], [3.4398, 51.52132], [3.43973, 51.52133], [3.43974, 51.52135], [3.4398, 51.52134]]], [[[3.43515, 51.52353], [3.43508, 51.52355], [3.43512, 51.52359], [3.43518, 51.52355], [3.43515, 51.52353]]], [[[3.43206, 51.52845], [3.43207, 51.5284], [3.43204, 51.5284], [3.43203, 51.52843], [3.43206, 51.52845]]], [[[3.43217, 51.52946], [3.43217, 51.52942], [3.43214, 51.52942], [3.43212, 51.52944], [3.43217, 51.52946]]], [[[3.43227, 51.53048], [3.43227, 51.53045], [3.43221, 51.53046], [3.43224, 51.53051], [3.43227, 51.53048]]], [[[3.43247, 51.53142], [3.43245, 51.53136], [3.43241, 51.53137], [3.43242, 51.5314], [3.43247, 51.53142]]], [[[3.44241, 51.54524], [3.44236, 51.54521], [3.44237, 51.54523], [3.44241, 51.54524]]], [[[3.44489, 51.54616], [3.44484, 51.54614], [3.44482, 51.54616], [3.44485, 51.54618], [3.44489, 51.54616]]], [[[3.44616, 51.54664], [3.44609, 51.54662], [3.44611, 51.54665], [3.44616, 51.54664]]], [[[3.45014, 51.54816], [3.45018, 51.54819], [3.45023, 51.54818], [3.45014, 51.54816]]], [[[3.45312, 51.54927], [3.45308, 51.54926], [3.4531, 51.54927], [3.45312, 51.54927]]], [[[3.45469, 51.54979], [3.45464, 51.54979], [3.45468, 51.5498], [3.45469, 51.54979]]], [[[3.45652, 51.5499], [3.45647, 51.54989], [3.45655, 51.54994], [3.45657, 51.54992], [3.45652, 51.5499]]], [[[3.45774, 51.55053], [3.45774, 51.55052], [3.45774, 51.55052], [3.45774, 51.55053]]], [[[3.46006, 51.55151], [3.46001, 51.55149], [3.45966, 51.55185], [3.45975, 51.55183], [3.46006, 51.55151]]], [[[3.46198, 51.55247], [3.46193, 51.55245], [3.46191, 51.55252], [3.46197, 51.55253], [3.46198, 51.55247]]], [[[3.46433, 51.55352], [3.46408, 51.5537], [3.46409, 51.55374], [3.46436, 51.55355], [3.46433, 51.55352]]], [[[3.46597, 51.55518], [3.46592, 51.55514], [3.46594, 51.55518], [3.46597, 51.55518]]], [[[3.4687, 51.55587], [3.46863, 51.55586], [3.46845, 51.55607], [3.46851, 51.55606], [3.4687, 51.55587]]], [[[3.47051, 51.55753], [3.47052, 51.55752], [3.47045, 51.55753], [3.47047, 51.55753], [3.47051, 51.55753]]], [[[3.47347, 51.55806], [3.47343, 51.55805], [3.47347, 51.55809], [3.4735, 51.55807], [3.47347, 51.55806]]], [[[3.4746, 51.55863], [3.47458, 51.55863], [3.47461, 51.55866], [3.4746, 51.55863]]], [[[3.47504, 51.55986], [3.47502, 51.5598], [3.47494, 51.5599], [3.47499, 51.55992], [3.47504, 51.55986]]], [[[3.47809, 51.56037], [3.47799, 51.56035], [3.47798, 51.5604], [3.47803, 51.56041], [3.47809, 51.56037]]], [[[3.47971, 51.56207], [3.47966, 51.56203], [3.47963, 51.56206], [3.47971, 51.56207]]], [[[3.48284, 51.56254], [3.48273, 51.56253], [3.4827, 51.56259], [3.48276, 51.5626], [3.48284, 51.56254]]], [[[3.48457, 51.56418], [3.48452, 51.56414], [3.48446, 51.56424], [3.48452, 51.56423], [3.48457, 51.56418]]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 733,
      "areaName": "Lingewaal"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[5.0277, 51.82355], [5.03142, 51.84108], [4.9993, 51.8446], [4.99473, 51.86172], [5.05878, 51.85806], [5.05482, 51.87274], [5.08053, 51.87552], [5.09097, 51.88898], [5.11427, 51.88927], [5.12058, 51.87157], [5.13809, 51.87291], [5.15052, 51.86141], [5.15928, 51.81648], [5.13017, 51.81466], [5.08765, 51.8268], [5.04211, 51.81736], [5.02635, 51.81886], [5.0277, 51.82355]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 736,
      "areaName": "De Ronde Venen"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[4.81859, 52.2288], [4.85121, 52.2387], [4.87004, 52.25336], [4.91097, 52.25268], [4.92942, 52.2684], [4.92644, 52.27978], [4.96767, 52.27958], [4.98351, 52.29037], [4.99748, 52.28912], [5.01154, 52.3033], [5.02154, 52.30246], [5.00746, 52.2317], [4.98041, 52.22685], [4.9666, 52.20005], [4.95088, 52.19864], [4.94857, 52.18578], [4.92861, 52.1672], [4.89174, 52.16177], [4.84392, 52.18012], [4.81359, 52.20185], [4.80293, 52.20103], [4.79458, 52.22673], [4.81859, 52.2288]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 737,
      "areaName": "Tytsjerksteradiel"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[5.91557, 53.16876], [5.86194, 53.17152], [5.85096, 53.19171], [5.86206, 53.19356], [5.85773, 53.20406], [5.9071, 53.21105], [5.88902, 53.21768], [5.89693, 53.22296], [5.88066, 53.22498], [5.87989, 53.23334], [5.85255, 53.23048], [5.85924, 53.24329], [5.8312, 53.2443], [5.8326, 53.26865], [5.84766, 53.28516], [5.86118, 53.28865], [5.92565, 53.2522], [5.94299, 53.25043], [5.95597, 53.22806], [5.98335, 53.22984], [6.01779, 53.24124], [6.02724, 53.23013], [6.08629, 53.21503], [6.07872, 53.21068], [6.08405, 53.19577], [6.11459, 53.17598], [6.10453, 53.15042], [6.08521, 53.15899], [6.01241, 53.15442], [5.94334, 53.12161], [5.90886, 53.14432], [5.93214, 53.16171], [5.93272, 53.17036], [5.91557, 53.16876]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 738,
      "areaName": "Aalburg"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[5.00999, 51.71275], [4.98864, 51.71687], [5.00039, 51.73713], [4.99033, 51.7413], [4.99058, 51.75196], [5.02491, 51.75142], [5.02226, 51.77028], [5.07788, 51.76791], [5.08195, 51.78071], [5.09589, 51.78765], [5.13876, 51.77201], [5.14271, 51.75521], [5.12634, 51.74502], [5.12805, 51.73761], [5.05672, 51.71242], [5.00999, 51.71275]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 743,
      "areaName": "Asten"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[5.71797, 51.40159], [5.70309, 51.41214], [5.69398, 51.43924], [5.75306, 51.43508], [5.78788, 51.41265], [5.83188, 51.39959], [5.8541, 51.37643], [5.85658, 51.35376], [5.87036, 51.35254], [5.77045, 51.3338], [5.74022, 51.36979], [5.73611, 51.38969], [5.71797, 51.40159]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 744,
      "areaName": "Baarle-Nassau"
    },
    "geometry": {
      "type": "MultiPolygon",
      "coordinates": [[[[4.93541, 51.43205], [4.93418, 51.43195], [4.93411, 51.43343], [4.9355, 51.43349], [4.93541, 51.43205]]], [[[4.93279, 51.43529], [4.93125, 51.43467], [4.93133, 51.43644], [4.93268, 51.43647], [4.93279, 51.43529]]], [[[4.93153, 51.43691], [4.931, 51.43667], [4.93069, 51.43716], [4.93163, 51.43717], [4.93153, 51.43691]]], [[[4.93624, 51.43623], [4.93546, 51.43618], [4.93537, 51.43752], [4.93648, 51.43755], [4.93624, 51.43623]]], [[[4.93114, 51.43879], [4.93064, 51.43989], [4.93239, 51.44003], [4.93222, 51.43884], [4.93114, 51.43879]]], [[[4.92374, 51.43782], [4.9215, 51.43925], [4.92412, 51.44186], [4.92512, 51.44174], [4.92374, 51.43782]]], [[[4.94202, 51.44801], [4.94157, 51.44794], [4.94165, 51.44948], [4.9422, 51.44949], [4.94202, 51.44801]]], [[[4.84584, 51.48077], [4.89129, 51.47822], [4.94163, 51.45714], [4.97646, 51.46114], [5.01046, 51.45824], [5.01052, 51.45393], [5.00458, 51.44392], [4.92096, 51.39369], [4.91385, 51.39508], [4.92428, 51.39782], [4.91016, 51.40226], [4.90319, 51.41355], [4.88607, 51.41662], [4.86737, 51.40911], [4.85083, 51.41426], [4.78933, 51.40899], [4.77327, 51.41346], [4.76657, 51.43049], [4.78091, 51.43235], [4.83649, 51.41725], [4.83971, 51.4198], [4.82815, 51.42221], [4.82336, 51.44862], [4.84402, 51.45907], [4.83611, 51.46125], [4.84584, 51.48077]], [[4.87309, 51.41254], [4.87058, 51.41274], [4.86923, 51.41179], [4.87238, 51.4115], [4.87309, 51.41254]], [[4.94062, 51.45532], [4.9421, 51.45524], [4.94072, 51.45563], [4.94062, 51.45532]], [[4.94875, 51.45499], [4.94902, 51.45377], [4.94935, 51.45379], [4.94959, 51.45511], [4.94875, 51.45499]], [[4.95145, 51.45371], [4.94762, 51.45057], [4.93308, 51.44953], [4.94037, 51.44519], [4.9524, 51.45015], [4.95145, 51.45371]], [[4.94772, 51.44574], [4.9458, 51.44397], [4.94396, 51.44365], [4.94988, 51.44365], [4.94772, 51.44574]], [[4.94024, 51.44303], [4.93921, 51.44362], [4.93973, 51.44182], [4.94028, 51.4418], [4.94024, 51.44303]], [[4.94019, 51.43548], [4.93988, 51.43945], [4.93466, 51.43855], [4.93562, 51.44631], [4.9283, 51.43855], [4.92805, 51.44362], [4.91926, 51.44686], [4.92121, 51.4369], [4.91501, 51.43536], [4.93615, 51.42946], [4.94019, 51.43548]], [[4.91878, 51.44403], [4.91815, 51.44396], [4.91822, 51.44343], [4.91852, 51.44344], [4.91878, 51.44403]], [[4.93185, 51.44671], [4.93407, 51.4474], [4.93326, 51.44828], [4.93151, 51.44763], [4.93185, 51.44671]], [[4.92904, 51.44819], [4.92815, 51.44894], [4.92735, 51.44857], [4.9284, 51.44783], [4.92904, 51.44819]], [[4.83666, 51.4484], [4.83621, 51.44879], [4.83574, 51.44846], [4.83623, 51.44805], [4.83666, 51.4484]], [[4.93012, 51.44899], [4.93181, 51.44927], [4.93074, 51.45043], [4.92949, 51.44957], [4.93012, 51.44899]], [[4.92639, 51.44585], [4.9255, 51.44665], [4.92417, 51.44635], [4.92572, 51.44491], [4.92639, 51.44585]], [[4.941, 51.44527], [4.94119, 51.44488], [4.94232, 51.44514], [4.94212, 51.44555], [4.941, 51.44527]], [[4.94205, 51.44004], [4.94226, 51.43953], [4.94076, 51.43931], [4.94137, 51.43795], [4.94312, 51.44016], [4.94205, 51.44004]], [[4.94153, 51.43973], [4.94143, 51.43999], [4.93976, 51.43976], [4.93986, 51.43951], [4.94153, 51.43973]], [[4.94484, 51.45334], [4.94277, 51.45333], [4.94282, 51.45268], [4.94493, 51.45303], [4.94484, 51.45334]], [[4.88937, 51.42345], [4.89144, 51.42322], [4.89231, 51.4241], [4.89012, 51.42528], [4.88937, 51.42345]], [[4.84031, 51.41885], [4.83875, 51.41818], [4.84086, 51.41745], [4.84136, 51.4179], [4.84031, 51.41885]], [[4.87339, 51.41592], [4.87364, 51.41546], [4.87531, 51.41606], [4.87483, 51.41651], [4.87339, 51.41592]], [[4.867, 51.41439], [4.86578, 51.41428], [4.86632, 51.41318], [4.86782, 51.41326], [4.867, 51.41439]], [[4.93514, 51.40923], [4.92727, 51.40824], [4.9285, 51.40511], [4.93639, 51.40534], [4.93514, 51.40923]]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 748,
      "areaName": "Bergen op Zoom"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[4.23304, 51.53749], [4.25201, 51.57066], [4.31798, 51.55122], [4.30681, 51.54351], [4.32758, 51.53519], [4.32565, 51.52961], [4.34278, 51.52639], [4.34219, 51.51805], [4.3516, 51.5177], [4.35159, 51.49993], [4.3728, 51.48772], [4.37169, 51.47901], [4.36163, 51.47637], [4.36697, 51.45672], [4.32796, 51.46424], [4.31117, 51.46017], [4.2991, 51.4668], [4.29371, 51.44531], [4.26543, 51.43968], [4.21893, 51.50486], [4.23304, 51.53749]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 753,
      "areaName": "Best"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[5.39102, 51.48555], [5.35589, 51.49611], [5.34939, 51.517], [5.35546, 51.5289], [5.3686, 51.53149], [5.35691, 51.54472], [5.40536, 51.54835], [5.44751, 51.51207], [5.44257, 51.49393], [5.39637, 51.48471], [5.39119, 51.47176], [5.39102, 51.48555]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 755,
      "areaName": "Boekel"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[5.6453, 51.60082], [5.62657, 51.6234], [5.68152, 51.62906], [5.75048, 51.62268], [5.75861, 51.59395], [5.65136, 51.58236], [5.6453, 51.60082]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 756,
      "areaName": "Boxmeer"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[5.89525, 51.68141], [5.89481, 51.68846], [5.93378, 51.71614], [5.95477, 51.70977], [5.96511, 51.65225], [6.02095, 51.62092], [6.04643, 51.55764], [6.03432, 51.5575], [6.03167, 51.55234], [6.00425, 51.57024], [5.93544, 51.5536], [5.90666, 51.55203], [5.87089, 51.56264], [5.87724, 51.57817], [5.9498, 51.60781], [5.92577, 51.63215], [5.89648, 51.64449], [5.87167, 51.64398], [5.87557, 51.65292], [5.8558, 51.66221], [5.86103, 51.6709], [5.89525, 51.68141]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 757,
      "areaName": "Boxtel"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[5.26145, 51.56113], [5.24618, 51.57948], [5.24764, 51.58974], [5.27606, 51.60453], [5.3005, 51.60633], [5.31649, 51.61737], [5.31019, 51.63324], [5.31773, 51.63463], [5.344, 51.62298], [5.33213, 51.61114], [5.33586, 51.60313], [5.38621, 51.60087], [5.38144, 51.5962], [5.38959, 51.58967], [5.38144, 51.5876], [5.39157, 51.57591], [5.40387, 51.57584], [5.39781, 51.56589], [5.4052, 51.56203], [5.40423, 51.54829], [5.38279, 51.54349], [5.34393, 51.54447], [5.33043, 51.55128], [5.3084, 51.54598], [5.2689, 51.55373], [5.26145, 51.56113]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 758,
      "areaName": "Breda"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[4.76569, 51.62914], [4.78751, 51.63705], [4.81903, 51.6313], [4.84268, 51.61699], [4.84355, 51.60388], [4.83407, 51.59741], [4.84202, 51.59603], [4.84262, 51.58583], [4.86424, 51.57909], [4.87168, 51.56711], [4.86731, 51.55887], [4.74891, 51.51896], [4.76002, 51.50237], [4.734, 51.48555], [4.74146, 51.53286], [4.7251, 51.5329], [4.72842, 51.53688], [4.704, 51.5498], [4.69419, 51.54485], [4.68211, 51.59889], [4.66387, 51.60407], [4.65799, 51.62047], [4.66507, 51.63432], [4.73227, 51.6431], [4.75999, 51.63664], [4.76569, 51.62914]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 762,
      "areaName": "Deurne"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[5.72297, 51.46729], [5.73609, 51.47193], [5.72172, 51.48513], [5.77396, 51.48867], [5.85257, 51.50414], [5.87182, 51.4499], [5.93129, 51.38475], [5.87454, 51.35331], [5.85658, 51.35376], [5.8541, 51.37643], [5.83188, 51.39959], [5.78788, 51.41265], [5.7557, 51.43427], [5.71825, 51.43873], [5.71818, 51.44453], [5.73, 51.44436], [5.71819, 51.46212], [5.72297, 51.46729]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 765,
      "areaName": "Pekela"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[6.95512, 53.01403], [6.93453, 53.02036], [6.9055, 53.04384], [6.93334, 53.04961], [6.92444, 53.05778], [6.9292, 53.07291], [6.96057, 53.09576], [6.96174, 53.11002], [6.97975, 53.1192], [7.02803, 53.11611], [7.04263, 53.10169], [6.95512, 53.01403]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 766,
      "areaName": "Dongen"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[4.93281, 51.65068], [4.92507, 51.67498], [4.94424, 51.67892], [4.9579, 51.65153], [4.98727, 51.65461], [5.00422, 51.60709], [4.91135, 51.61569], [4.91555, 51.62243], [4.90428, 51.62433], [4.93281, 51.65068]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 770,
      "areaName": "Eersel"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[5.35438, 51.40877], [5.38837, 51.37554], [5.34828, 51.35963], [5.34712, 51.33745], [5.32401, 51.3329], [5.31667, 51.32339], [5.26341, 51.31928], [5.28597, 51.33634], [5.2753, 51.36272], [5.27977, 51.37533], [5.28924, 51.38891], [5.31087, 51.39072], [5.31365, 51.39944], [5.30285, 51.40753], [5.2819, 51.40437], [5.2377, 51.42856], [5.25248, 51.43794], [5.2484, 51.44563], [5.3346, 51.46293], [5.33382, 51.46854], [5.356, 51.46231], [5.35839, 51.46702], [5.36945, 51.46532], [5.35672, 51.4536], [5.35532, 51.43363], [5.31581, 51.41896], [5.32366, 51.40619], [5.35438, 51.40877]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 772,
      "areaName": "Eindhoven"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[5.42794, 51.42218], [5.42526, 51.4313], [5.41436, 51.43013], [5.40492, 51.43713], [5.40081, 51.43299], [5.38849, 51.43818], [5.35706, 51.43808], [5.36347, 51.46023], [5.38754, 51.46812], [5.40078, 51.48578], [5.46389, 51.49698], [5.51326, 51.49631], [5.50541, 51.48338], [5.50904, 51.46931], [5.53256, 51.45719], [5.54885, 51.4345], [5.5252, 51.42799], [5.52581, 51.4047], [5.50426, 51.40005], [5.47322, 51.40528], [5.42799, 51.40258], [5.42794, 51.42218]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 777,
      "areaName": "Etten-Leur"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[4.6248, 51.55238], [4.60883, 51.55393], [4.59043, 51.56487], [4.59675, 51.5903], [4.61389, 51.60804], [4.60123, 51.62524], [4.61273, 51.62846], [4.62921, 51.62405], [4.64314, 51.63218], [4.66462, 51.63441], [4.65862, 51.61568], [4.66387, 51.60407], [4.68211, 51.59889], [4.69419, 51.54485], [4.63816, 51.51721], [4.64011, 51.54342], [4.6248, 51.55238]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 779,
      "areaName": "Geertruidenberg"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[4.82413, 51.70954], [4.87306, 51.72], [4.91799, 51.71996], [4.93317, 51.67675], [4.88023, 51.67184], [4.84339, 51.68602], [4.84237, 51.67965], [4.82413, 51.70954]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 784,
      "areaName": "Gilze en Rijen"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[4.91858, 51.60159], [4.91188, 51.6154], [4.91808, 51.61629], [4.94785, 51.61117], [4.97286, 51.59731], [4.96783, 51.56872], [4.95131, 51.55704], [4.95342, 51.55053], [4.97956, 51.5442], [4.95664, 51.51868], [4.91106, 51.51008], [4.86623, 51.53807], [4.84474, 51.53333], [4.84195, 51.52671], [4.82967, 51.52789], [4.83461, 51.5386], [4.86426, 51.55202], [4.87168, 51.56711], [4.86424, 51.57909], [4.91858, 51.60159]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 785,
      "areaName": "Goirle"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[5.07474, 51.5302], [5.10506, 51.52818], [5.09604, 51.50991], [5.08819, 51.5113], [5.06251, 51.49273], [5.06837, 51.48533], [5.05158, 51.48713], [5.04974, 51.47111], [5.03879, 51.487], [5.00834, 51.4733], [4.98799, 51.48305], [5.00036, 51.49186], [4.99464, 51.49765], [4.98674, 51.49533], [4.99242, 51.51229], [4.96257, 51.52586], [4.97414, 51.53984], [5.0206, 51.53896], [5.03052, 51.5295], [5.05227, 51.52976], [5.0517, 51.53509], [5.06266, 51.53787], [5.07594, 51.5355], [5.07474, 51.5302]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 786,
      "areaName": "Grave"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[5.71646, 51.72594], [5.70942, 51.72857], [5.71881, 51.73293], [5.7061, 51.73212], [5.70791, 51.73658], [5.69812, 51.73851], [5.70192, 51.75553], [5.69086, 51.75913], [5.71123, 51.77503], [5.73202, 51.77189], [5.75651, 51.75455], [5.79053, 51.75351], [5.78611, 51.74429], [5.79975, 51.73437], [5.79808, 51.72133], [5.75231, 51.72261], [5.74817, 51.71798], [5.71646, 51.72594]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 788,
      "areaName": "Haaren"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[5.20167, 51.59177], [5.18688, 51.60175], [5.17954, 51.59766], [5.16946, 51.60359], [5.17488, 51.61049], [5.16526, 51.61249], [5.16921, 51.61869], [5.14494, 51.64051], [5.16007, 51.63954], [5.15445, 51.65492], [5.1668, 51.66905], [5.20478, 51.66982], [5.22917, 51.65674], [5.22974, 51.6505], [5.24478, 51.64766], [5.2465, 51.63276], [5.27768, 51.6192], [5.30433, 51.62492], [5.30828, 51.63303], [5.31096, 51.63367], [5.31649, 51.61737], [5.29344, 51.6028], [5.27566, 51.60441], [5.24724, 51.58704], [5.21419, 51.58556], [5.20167, 51.59177]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 794,
      "areaName": "Helmond"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[5.62693, 51.49628], [5.63482, 51.49488], [5.6564, 51.50731], [5.67511, 51.49895], [5.66995, 51.50414], [5.68414, 51.5077], [5.70823, 51.50203], [5.70505, 51.49746], [5.73604, 51.47209], [5.71722, 51.46824], [5.73, 51.44436], [5.69623, 51.4383], [5.67193, 51.45781], [5.61452, 51.44901], [5.60093, 51.45221], [5.58297, 51.46555], [5.60523, 51.47096], [5.58591, 51.47917], [5.57016, 51.49694], [5.60965, 51.50922], [5.62693, 51.49628]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 796,
      "areaName": "'s-Hertogenbosch"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[5.38573, 51.70098], [5.35944, 51.69871], [5.36519, 51.68944], [5.37714, 51.67882], [5.37643, 51.67843], [5.35278, 51.68142], [5.35369, 51.67107], [5.33888, 51.664], [5.32748, 51.67337], [5.29893, 51.66712], [5.28092, 51.68153], [5.22606, 51.69004], [5.25161, 51.6995], [5.23576, 51.70465], [5.2412, 51.71399], [5.22998, 51.71057], [5.23103, 51.72409], [5.20649, 51.74148], [5.22504, 51.74297], [5.24823, 51.73361], [5.27282, 51.74007], [5.29744, 51.73681], [5.35351, 51.75548], [5.36378, 51.75146], [5.41165, 51.76215], [5.42462, 51.74174], [5.40563, 51.73826], [5.40936, 51.72225], [5.42483, 51.71164], [5.42027, 51.70405], [5.42981, 51.70148], [5.38573, 51.70098]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 797,
      "areaName": "Heusden"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[5.10303, 51.71255], [5.08176, 51.72234], [5.11185, 51.73439], [5.16567, 51.74292], [5.20649, 51.74148], [5.23103, 51.72409], [5.22998, 51.71057], [5.2412, 51.71399], [5.23576, 51.70465], [5.25161, 51.69945], [5.22651, 51.69064], [5.22323, 51.67378], [5.1668, 51.66905], [5.15767, 51.66328], [5.16007, 51.63954], [5.11118, 51.63536], [5.10151, 51.67683], [5.10305, 51.70248], [5.11151, 51.70358], [5.10303, 51.71255]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 798,
      "areaName": "Hilvarenbeek"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[5.11876, 51.54591], [5.12774, 51.53177], [5.17099, 51.51057], [5.19014, 51.50741], [5.22443, 51.51715], [5.22653, 51.50747], [5.23594, 51.51391], [5.25125, 51.50963], [5.24711, 51.49888], [5.22844, 51.4987], [5.22043, 51.47288], [5.18498, 51.42876], [5.10202, 51.42892], [5.07932, 51.47132], [5.04879, 51.47191], [5.05158, 51.48713], [5.06837, 51.48533], [5.06251, 51.49273], [5.08819, 51.5113], [5.09604, 51.50991], [5.10006, 51.53145], [5.11876, 51.54591]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 809,
      "areaName": "Loon op Zand"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[4.98865, 51.66072], [4.99225, 51.67625], [5.05004, 51.66161], [5.0584, 51.66173], [5.06062, 51.67111], [5.10151, 51.67683], [5.10296, 51.61691], [5.07554, 51.60577], [5.05717, 51.61093], [5.04501, 51.6111], [5.04293, 51.60604], [5.00427, 51.6079], [4.98865, 51.66072]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 815,
      "areaName": "Mill en Sint Hubert"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[5.73539, 51.6742], [5.69996, 51.71145], [5.71004, 51.72606], [5.74817, 51.71798], [5.75231, 51.72261], [5.79244, 51.72056], [5.78843, 51.70886], [5.82256, 51.6995], [5.8428, 51.67997], [5.74768, 51.63267], [5.73539, 51.6742]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 820,
      "areaName": "Nuenen, Gerwen en Nederwetten"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[5.51246, 51.48956], [5.50978, 51.49866], [5.54627, 51.5127], [5.54475, 51.52354], [5.53086, 51.52505], [5.54791, 51.53808], [5.55765, 51.50937], [5.57673, 51.49945], [5.57016, 51.49694], [5.58591, 51.47917], [5.60523, 51.47096], [5.58297, 51.46555], [5.58781, 51.46347], [5.56616, 51.44148], [5.5467, 51.43391], [5.53256, 51.45719], [5.50904, 51.46931], [5.50541, 51.48338], [5.51246, 51.48956]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 823,
      "areaName": "Oirschot"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[5.34938, 51.51697], [5.35589, 51.49611], [5.38994, 51.48753], [5.38754, 51.46812], [5.37915, 51.46384], [5.35839, 51.46702], [5.356, 51.46231], [5.33382, 51.46854], [5.3346, 51.46293], [5.2484, 51.44563], [5.25245, 51.4379], [5.22928, 51.42545], [5.20922, 51.4365], [5.19102, 51.43022], [5.23038, 51.49046], [5.22844, 51.4987], [5.24711, 51.49888], [5.25097, 51.50621], [5.23594, 51.51391], [5.22653, 51.50747], [5.22443, 51.51715], [5.23479, 51.53099], [5.24401, 51.52575], [5.25333, 51.54033], [5.27688, 51.54486], [5.27327, 51.55282], [5.3084, 51.54598], [5.333, 51.55114], [5.35691, 51.54472], [5.3686, 51.53149], [5.35546, 51.5289], [5.34938, 51.51697]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 824,
      "areaName": "Oisterwijk"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[5.13914, 51.56132], [5.15076, 51.5801], [5.18688, 51.60175], [5.21419, 51.58556], [5.24724, 51.58704], [5.24618, 51.57948], [5.27746, 51.54639], [5.25329, 51.54031], [5.24401, 51.52575], [5.23479, 51.53099], [5.21473, 51.51173], [5.18428, 51.50791], [5.1302, 51.5303], [5.13869, 51.54596], [5.14784, 51.54712], [5.13757, 51.55208], [5.13914, 51.56132]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 826,
      "areaName": "Oosterhout"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[4.84339, 51.68602], [4.88023, 51.67184], [4.92331, 51.67369], [4.9344, 51.65733], [4.90428, 51.62433], [4.91555, 51.62243], [4.9099, 51.61833], [4.9185, 51.60137], [4.86917, 51.57844], [4.84897, 51.58153], [4.83407, 51.59741], [4.84355, 51.60388], [4.84268, 51.61699], [4.81864, 51.63151], [4.78816, 51.63424], [4.79663, 51.64091], [4.78107, 51.6639], [4.84301, 51.67981], [4.84339, 51.68602]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 828,
      "areaName": "Oss"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[5.49354, 51.74758], [5.46223, 51.77092], [5.44674, 51.76351], [5.39206, 51.76019], [5.3559, 51.75144], [5.36591, 51.78576], [5.40316, 51.82161], [5.4481, 51.8096], [5.47276, 51.81377], [5.4902, 51.83051], [5.53948, 51.81622], [5.55697, 51.82727], [5.59175, 51.82943], [5.64101, 51.81804], [5.66021, 51.79623], [5.69013, 51.78973], [5.71123, 51.77503], [5.69086, 51.75913], [5.67367, 51.7677], [5.66728, 51.75222], [5.64864, 51.76433], [5.57627, 51.74488], [5.58088, 51.73145], [5.53392, 51.74061], [5.499, 51.73548], [5.49181, 51.73752], [5.49354, 51.74758]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 840,
      "areaName": "Rucphen"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[4.50945, 51.56856], [4.53662, 51.56578], [4.53036, 51.54926], [4.59176, 51.56103], [4.64011, 51.54342], [4.63872, 51.52441], [4.62499, 51.52109], [4.61638, 51.50809], [4.57934, 51.51073], [4.58973, 51.49674], [4.57618, 51.49254], [4.57229, 51.48266], [4.5561, 51.48563], [4.54816, 51.47331], [4.53818, 51.4824], [4.48668, 51.47735], [4.49657, 51.50821], [4.50218, 51.51672], [4.51433, 51.5179], [4.52197, 51.53174], [4.52319, 51.54256], [4.49749, 51.54621], [4.50945, 51.56856]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 844,
      "areaName": "Schijndel"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[5.38896, 51.62129], [5.38328, 51.6316], [5.37106, 51.63296], [5.38307, 51.63824], [5.37187, 51.64193], [5.37914, 51.64737], [5.39615, 51.64532], [5.41464, 51.6557], [5.46596, 51.64289], [5.50211, 51.62321], [5.49973, 51.61339], [5.48573, 51.60917], [5.49252, 51.58696], [5.46866, 51.60223], [5.41636, 51.58881], [5.40948, 51.598], [5.38984, 51.60077], [5.38896, 51.62129]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 845,
      "areaName": "Sint-Michielsgestel"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[5.35735, 51.682], [5.37714, 51.67882], [5.35944, 51.69871], [5.38102, 51.70079], [5.43933, 51.70043], [5.44517, 51.68858], [5.45687, 51.68759], [5.44503, 51.66424], [5.43281, 51.66426], [5.42765, 51.65584], [5.41464, 51.6557], [5.40596, 51.64831], [5.37914, 51.64737], [5.37187, 51.64193], [5.38326, 51.63859], [5.37106, 51.63296], [5.38328, 51.6316], [5.39486, 51.60584], [5.34283, 51.60022], [5.33188, 51.60748], [5.344, 51.62298], [5.31773, 51.63463], [5.31915, 51.64998], [5.30397, 51.66555], [5.32748, 51.67337], [5.33888, 51.664], [5.35369, 51.67107], [5.35735, 51.682]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 846,
      "areaName": "Sint-Oedenrode"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[5.43013, 51.59235], [5.46866, 51.60223], [5.49252, 51.58696], [5.52411, 51.58398], [5.55055, 51.56911], [5.54524, 51.5581], [5.53308, 51.5578], [5.54744, 51.53773], [5.53086, 51.52505], [5.50008, 51.52139], [5.50373, 51.5265], [5.49345, 51.52669], [5.48715, 51.54185], [5.42303, 51.5339], [5.40423, 51.54829], [5.4052, 51.56203], [5.39781, 51.56589], [5.40387, 51.57587], [5.39157, 51.57591], [5.38144, 51.5876], [5.38959, 51.58967], [5.38053, 51.6029], [5.39042, 51.60542], [5.38984, 51.60077], [5.40948, 51.598], [5.41636, 51.58881], [5.43013, 51.59235]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 847,
      "areaName": "Someren"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[5.63923, 51.4231], [5.65647, 51.45656], [5.67217, 51.45776], [5.69394, 51.43936], [5.70445, 51.41039], [5.73611, 51.38969], [5.74022, 51.36979], [5.77045, 51.3338], [5.67211, 51.31509], [5.63892, 51.38917], [5.63923, 51.4231]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 848,
      "areaName": "Son en Breugel"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[5.51522, 51.52308], [5.5402, 51.52601], [5.54627, 51.5127], [5.51142, 51.49692], [5.44257, 51.49393], [5.44751, 51.51207], [5.4238, 51.53399], [5.48715, 51.54185], [5.49345, 51.52669], [5.50373, 51.5265], [5.50008, 51.52139], [5.51522, 51.52308]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 851,
      "areaName": "Steenbergen"
    },
    "geometry": {
      "type": "MultiPolygon",
      "coordinates": [[[[4.25244, 51.63414], [4.2526, 51.63276], [4.24964, 51.63398], [4.25086, 51.63465], [4.25244, 51.63414]]], [[[4.29701, 51.64243], [4.29646, 51.64314], [4.29851, 51.64336], [4.29857, 51.64281], [4.29701, 51.64243]]], [[[4.24357, 51.64618], [4.24519, 51.64467], [4.24166, 51.64396], [4.24246, 51.64617], [4.24357, 51.64618]]], [[[4.29476, 51.6423], [4.29614, 51.64392], [4.30754, 51.64702], [4.29613, 51.64343], [4.29476, 51.6423]]], [[[4.31739, 51.64668], [4.31615, 51.64721], [4.31847, 51.64804], [4.31856, 51.64693], [4.31739, 51.64668]]], [[[4.32139, 51.64881], [4.322, 51.64847], [4.31944, 51.64862], [4.31487, 51.64722], [4.31961, 51.64902], [4.32139, 51.64881]]], [[[4.3682, 51.65722], [4.4089, 51.63282], [4.42386, 51.63026], [4.43783, 51.61712], [4.42667, 51.61174], [4.44108, 51.55849], [4.37536, 51.54372], [4.29616, 51.5538], [4.29863, 51.55884], [4.25201, 51.57066], [4.23612, 51.55037], [4.19223, 51.5939], [4.19927, 51.61954], [4.23732, 51.63401], [4.2528, 51.63255], [4.24879, 51.6277], [4.26596, 51.62502], [4.25372, 51.63079], [4.26427, 51.63588], [4.27443, 51.63815], [4.27621, 51.63718], [4.27271, 51.63565], [4.27437, 51.63225], [4.29348, 51.64249], [4.29027, 51.63594], [4.30005, 51.63744], [4.29566, 51.64235], [4.29795, 51.64153], [4.31745, 51.64628], [4.31635, 51.64268], [4.34001, 51.64574], [4.3682, 51.65722]], [[4.24619, 51.62725], [4.24843, 51.62978], [4.24783, 51.63189], [4.24306, 51.627], [4.24619, 51.62725]]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 852,
      "areaName": "Waterland"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[5.05948, 52.48561], [5.06848, 52.46877], [5.03318, 52.46702], [5.03931, 52.45786], [5.05495, 52.46137], [5.04942, 52.43936], [5.0913, 52.43738], [5.09264, 52.45166], [5.10274, 52.46679], [5.09421, 52.48864], [5.10393, 52.4677], [5.11364, 52.46179], [5.13514, 52.46296], [5.13928, 52.45944], [5.09502, 52.44865], [5.09192, 52.43737], [5.06826, 52.41656], [5.03004, 52.41564], [4.98264, 52.42676], [4.94779, 52.42156], [4.94832, 52.48401], [4.95799, 52.47123], [4.97227, 52.47035], [4.99796, 52.49473], [5.02463, 52.48457], [5.0591, 52.49096], [5.05948, 52.48561]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 855,
      "areaName": "Tilburg"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[4.95025, 51.61239], [5.04293, 51.60604], [5.04501, 51.6111], [5.07059, 51.61029], [5.07554, 51.60577], [5.10296, 51.61691], [5.10155, 51.63417], [5.1447, 51.64055], [5.16921, 51.61869], [5.16526, 51.61249], [5.17527, 51.60951], [5.16946, 51.60359], [5.17954, 51.59766], [5.14496, 51.57388], [5.13721, 51.55286], [5.14784, 51.54712], [5.13869, 51.54596], [5.1302, 51.5303], [5.1188, 51.54592], [5.10006, 51.53145], [5.07433, 51.53024], [5.07594, 51.5355], [5.06032, 51.53787], [5.05227, 51.52976], [5.03052, 51.5295], [5.02238, 51.5385], [4.97546, 51.54013], [4.97584, 51.5464], [4.95342, 51.55053], [4.95114, 51.56092], [4.96691, 51.56724], [4.97341, 51.59198], [4.95025, 51.61239]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 856,
      "areaName": "Uden"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[5.68146, 51.62903], [5.62654, 51.62339], [5.60747, 51.63378], [5.60227, 51.62941], [5.59341, 51.633], [5.56741, 51.65351], [5.56224, 51.66315], [5.57302, 51.67809], [5.59684, 51.69092], [5.59704, 51.70199], [5.62396, 51.70353], [5.67867, 51.66494], [5.73135, 51.67394], [5.73669, 51.66142], [5.73017, 51.65769], [5.74255, 51.65006], [5.75048, 51.62268], [5.68146, 51.62903]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 858,
      "areaName": "Valkenswaard"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[5.41887, 51.37181], [5.42321, 51.37487], [5.43728, 51.36601], [5.50848, 51.37277], [5.51642, 51.37834], [5.52718, 51.36694], [5.4938, 51.35539], [5.49603, 51.34651], [5.47365, 51.33407], [5.49137, 51.31422], [5.47689, 51.29139], [5.44178, 51.28211], [5.41741, 51.26229], [5.3878, 51.28524], [5.3972, 51.29062], [5.39767, 51.31432], [5.41286, 51.32052], [5.4258, 51.31199], [5.43392, 51.32432], [5.42304, 51.33258], [5.41887, 51.37181]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 860,
      "areaName": "Veghel"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[5.4972, 51.62669], [5.50486, 51.63608], [5.5244, 51.63044], [5.54224, 51.63454], [5.54201, 51.64031], [5.57161, 51.65117], [5.59341, 51.633], [5.60227, 51.62941], [5.60747, 51.63378], [5.62391, 51.62628], [5.64293, 51.60621], [5.65475, 51.57153], [5.62171, 51.55324], [5.58434, 51.56273], [5.54503, 51.55812], [5.55064, 51.56904], [5.52546, 51.58338], [5.49251, 51.58701], [5.48518, 51.6061], [5.49973, 51.61339], [5.4972, 51.62669]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 861,
      "areaName": "Veldhoven"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[5.40492, 51.43713], [5.42701, 51.43015], [5.43027, 51.40772], [5.41745, 51.38918], [5.42197, 51.38347], [5.38891, 51.37646], [5.35436, 51.40878], [5.32366, 51.40619], [5.31581, 51.41896], [5.33984, 51.42556], [5.35692, 51.4382], [5.38849, 51.43818], [5.40081, 51.43299], [5.40492, 51.43713]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 865,
      "areaName": "Vught"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[5.20478, 51.6698], [5.22323, 51.67378], [5.22616, 51.69003], [5.28092, 51.68153], [5.29893, 51.66712], [5.31876, 51.67087], [5.3038, 51.66399], [5.31915, 51.64998], [5.32074, 51.636], [5.30871, 51.6334], [5.30433, 51.62492], [5.27768, 51.6192], [5.2465, 51.63276], [5.24478, 51.64766], [5.22974, 51.6505], [5.22917, 51.65674], [5.20478, 51.6698]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 866,
      "areaName": "Waalre"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[5.4618, 51.40496], [5.50155, 51.40311], [5.51642, 51.37834], [5.50848, 51.37277], [5.43728, 51.36601], [5.4249, 51.37262], [5.41744, 51.38916], [5.42667, 51.40237], [5.4618, 51.40496]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 867,
      "areaName": "Waalwijk"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[5.09006, 51.67471], [5.06062, 51.67111], [5.0584, 51.66173], [5.04935, 51.66161], [4.99225, 51.67625], [4.98727, 51.65461], [4.9579, 51.65153], [4.95263, 51.6721], [4.94424, 51.67892], [4.93317, 51.67675], [4.91799, 51.71996], [4.9564, 51.72279], [5.03847, 51.71082], [5.08176, 51.72234], [5.09911, 51.71662], [5.11151, 51.70358], [5.10305, 51.70248], [5.10649, 51.67733], [5.09006, 51.67471]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 870,
      "areaName": "Werkendam"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[4.76414, 51.75982], [4.73365, 51.73651], [4.69855, 51.72199], [4.67729, 51.72011], [4.6816, 51.72842], [4.73663, 51.75557], [4.75524, 51.78161], [4.77354, 51.79332], [4.79719, 51.79977], [4.85441, 51.80068], [4.9186, 51.82748], [4.96963, 51.82365], [4.95633, 51.79664], [4.93857, 51.80136], [4.9354, 51.79718], [4.93308, 51.75468], [4.99058, 51.75196], [4.99033, 51.7413], [5.00033, 51.73858], [4.9972, 51.72303], [4.98864, 51.71687], [4.94556, 51.72304], [4.87306, 51.72], [4.8369, 51.71261], [4.85194, 51.75588], [4.7854, 51.75593], [4.78245, 51.76657], [4.76414, 51.75982]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 873,
      "areaName": "Woensdrecht"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[4.35982, 51.45796], [4.39108, 51.45149], [4.37933, 51.44679], [4.39203, 51.44638], [4.39882, 51.43524], [4.38366, 51.42108], [4.43169, 51.37505], [4.42508, 51.37129], [4.43135, 51.36385], [4.38454, 51.35435], [4.34135, 51.35756], [4.3345, 51.37764], [4.27743, 51.37604], [4.26635, 51.38654], [4.26373, 51.41645], [4.27585, 51.42505], [4.26543, 51.43968], [4.29371, 51.44531], [4.29769, 51.46622], [4.31117, 51.46017], [4.32796, 51.46424], [4.35982, 51.45796]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 874,
      "areaName": "Woudrichem"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[5.07167, 51.77923], [5.08662, 51.77851], [5.07292, 51.76696], [5.02226, 51.77028], [5.02491, 51.75142], [4.93308, 51.75468], [4.9354, 51.79718], [4.93857, 51.80136], [4.95633, 51.79664], [4.96963, 51.82365], [5.00868, 51.81784], [5.01454, 51.80899], [5.04815, 51.79811], [5.07167, 51.77923]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 879,
      "areaName": "Zundert"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[4.68708, 51.5426], [4.704, 51.5498], [4.72842, 51.53688], [4.7251, 51.5329], [4.74146, 51.53286], [4.74358, 51.51154], [4.734, 51.48555], [4.71691, 51.46887], [4.70325, 51.46697], [4.6931, 51.45173], [4.66659, 51.4444], [4.66969, 51.42636], [4.64129, 51.42201], [4.57473, 51.43285], [4.53541, 51.42303], [4.5299, 51.44952], [4.5561, 51.48563], [4.57229, 51.48266], [4.57618, 51.49254], [4.58973, 51.49674], [4.57934, 51.51073], [4.61638, 51.50809], [4.62753, 51.52242], [4.63872, 51.52441], [4.64329, 51.51819], [4.68708, 51.5426]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 880,
      "areaName": "Wormerland"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[4.82441, 52.5338], [4.81699, 52.53565], [4.82446, 52.54269], [4.84796, 52.52531], [4.93435, 52.51164], [4.90647, 52.47983], [4.86164, 52.46847], [4.79236, 52.49113], [4.78924, 52.51864], [4.82441, 52.5338]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 881,
      "areaName": "Onderbanken"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[5.92772, 50.98232], [5.95518, 50.98842], [5.96758, 50.9794], [6.02689, 50.98164], [6.00605, 50.95754], [5.96586, 50.96242], [5.94229, 50.94901], [5.9176, 50.95684], [5.92272, 50.96291], [5.91446, 50.97235], [5.92772, 50.98232]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 882,
      "areaName": "Landgraaf"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[6.00956, 50.87843], [5.99063, 50.90619], [6.0182, 50.9347], [6.05087, 50.92991], [6.05402, 50.92225], [6.09373, 50.92123], [6.07981, 50.90577], [6.0429, 50.90041], [6.04553, 50.8899], [6.03114, 50.87159], [6.01586, 50.87022], [6.00956, 50.87843]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 888,
      "areaName": "Beek"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[5.80372, 50.94838], [5.81189, 50.95514], [5.85505, 50.94604], [5.85009, 50.92729], [5.83156, 50.91718], [5.77468, 50.91128], [5.75785, 50.89864], [5.77995, 50.94534], [5.79336, 50.9519], [5.80372, 50.94838]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 889,
      "areaName": "Beesel"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[6.02628, 51.2669], [6.04642, 51.2856], [6.08472, 51.29745], [6.11446, 51.28917], [6.12456, 51.27991], [6.07266, 51.24256], [6.05215, 51.25248], [6.03836, 51.2461], [6.01659, 51.25058], [6.00587, 51.26248], [6.02628, 51.2669]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 893,
      "areaName": "Bergen (L,)"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[6.1555, 51.51424], [6.12077, 51.53104], [6.11106, 51.5467], [6.07927, 51.54711], [6.04627, 51.55944], [6.02202, 51.61966], [5.97661, 51.64378], [6.01538, 51.66224], [6.03176, 51.66305], [6.02428, 51.66982], [6.03195, 51.67617], [6.11809, 51.65597], [6.09393, 51.62215], [6.09142, 51.60585], [6.15703, 51.56658], [6.1769, 51.53856], [6.19993, 51.52738], [6.21336, 51.50782], [6.16919, 51.50308], [6.1555, 51.51424]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 899,
      "areaName": "Brunssum"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[5.96233, 50.93403], [5.94186, 50.92709], [5.92847, 50.93661], [5.96586, 50.96242], [6.01685, 50.95264], [6.0117, 50.92644], [5.96233, 50.93403]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 907,
      "areaName": "Gennep"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[5.93352, 51.73649], [5.95329, 51.74802], [5.95515, 51.73812], [5.9942, 51.73831], [6.04494, 51.71691], [6.02605, 51.70869], [6.03195, 51.67617], [6.02428, 51.66982], [6.03176, 51.66305], [6.01538, 51.66224], [5.97661, 51.64378], [5.96426, 51.65415], [5.95529, 51.7093], [5.91947, 51.71767], [5.93352, 51.73649]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 917,
      "areaName": "Heerlen"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[5.97916, 50.84932], [5.92352, 50.90557], [5.89554, 50.91931], [5.92847, 50.93661], [5.94186, 50.92709], [5.9606, 50.93422], [6.01238, 50.92627], [5.99063, 50.90619], [6.02031, 50.86879], [6.00057, 50.85774], [6.01796, 50.84381], [6.02564, 50.81918], [5.97916, 50.84932]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 928,
      "areaName": "Kerkrade"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[6.0214, 50.87156], [6.03114, 50.87159], [6.04553, 50.8899], [6.0429, 50.90041], [6.07981, 50.90577], [6.07537, 50.89056], [6.0881, 50.87243], [6.07417, 50.84654], [6.0567, 50.85105], [6.05508, 50.85726], [6.01574, 50.84381], [6.00057, 50.85774], [6.0214, 50.87156]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 935,
      "areaName": "Maastricht"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[5.66094, 50.87737], [5.67935, 50.88049], [5.69654, 50.90861], [5.7079, 50.91185], [5.71729, 50.90766], [5.71264, 50.90267], [5.72654, 50.88415], [5.73624, 50.88205], [5.73337, 50.87475], [5.76266, 50.86651], [5.74929, 50.85715], [5.75734, 50.85529], [5.75486, 50.84184], [5.74064, 50.83916], [5.74487, 50.82292], [5.71731, 50.8145], [5.71694, 50.80381], [5.65573, 50.81939], [5.6489, 50.8267], [5.63887, 50.84767], [5.64167, 50.86416], [5.64947, 50.86834], [5.64416, 50.87135], [5.66094, 50.87737]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 938,
      "areaName": "Meerssen"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[5.74862, 50.93589], [5.77554, 50.92631], [5.7558, 50.89946], [5.77468, 50.91128], [5.80239, 50.9138], [5.79837, 50.88285], [5.77766, 50.88373], [5.7742, 50.87338], [5.75909, 50.86597], [5.75544, 50.87149], [5.73337, 50.87475], [5.73624, 50.88205], [5.72654, 50.88415], [5.71248, 50.90317], [5.74599, 50.94341], [5.74862, 50.93589]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 944,
      "areaName": "Mook en Middelaar"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[5.88398, 51.73544], [5.87956, 51.74991], [5.86447, 51.75768], [5.86789, 51.77552], [5.88836, 51.77859], [5.91528, 51.75229], [5.9383, 51.74159], [5.91947, 51.71767], [5.89206, 51.72283], [5.88398, 51.73544]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 946,
      "areaName": "Nederweert"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[5.77527, 51.33472], [5.84019, 51.34688], [5.83208, 51.33805], [5.85211, 51.32073], [5.87782, 51.31658], [5.86072, 51.3108], [5.83384, 51.27494], [5.85499, 51.25366], [5.85202, 51.24348], [5.79365, 51.23698], [5.74624, 51.26347], [5.733, 51.28009], [5.70759, 51.28361], [5.6678, 51.27738], [5.644, 51.29058], [5.67205, 51.31508], [5.77527, 51.33472]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 951,
      "areaName": "Nuth"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[5.7985, 50.90814], [5.80171, 50.91413], [5.8415, 50.91961], [5.84724, 50.92577], [5.86661, 50.92483], [5.89011, 50.9347], [5.892, 50.93021], [5.91243, 50.93499], [5.92021, 50.93171], [5.89542, 50.91964], [5.9234, 50.90441], [5.88082, 50.88248], [5.83469, 50.88065], [5.83311, 50.89221], [5.81921, 50.88384], [5.79984, 50.88567], [5.7985, 50.90814]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 957,
      "areaName": "Roermond"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[5.98357, 51.17623], [5.95383, 51.15875], [5.91665, 51.16862], [5.93009, 51.18876], [6.00284, 51.23471], [6.00588, 51.25868], [6.02747, 51.24556], [6.05418, 51.25204], [6.07266, 51.24256], [6.08603, 51.22267], [6.06799, 51.22055], [6.07314, 51.18282], [6.0552, 51.18457], [6.05707, 51.1757], [6.05019, 51.17504], [6.06357, 51.16552], [6.03898, 51.16044], [6.01479, 51.16591], [5.99902, 51.16218], [5.98357, 51.17623]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 962,
      "areaName": "Schinnen"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[5.91869, 50.95633], [5.94229, 50.94901], [5.93442, 50.93864], [5.892, 50.93021], [5.89011, 50.9347], [5.86661, 50.92483], [5.84723, 50.92578], [5.85693, 50.944], [5.8419, 50.94809], [5.83978, 50.95692], [5.85219, 50.96803], [5.8735, 50.9628], [5.89104, 50.97409], [5.91966, 50.97819], [5.92422, 50.9757], [5.9128, 50.96799], [5.92272, 50.96291], [5.91869, 50.95633]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 965,
      "areaName": "Simpelveld"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[5.98499, 50.81045], [5.96932, 50.81665], [5.95553, 50.83532], [5.95452, 50.85257], [5.96965, 50.86023], [6.00422, 50.8376], [6.02503, 50.81413], [6.00363, 50.80146], [5.98499, 50.81045]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 971,
      "areaName": "Stein"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[5.77944, 51.00298], [5.7892, 51.0012], [5.78214, 50.98542], [5.78811, 50.94861], [5.77094, 50.92793], [5.74856, 50.93591], [5.74588, 50.9465], [5.75811, 50.95075], [5.75605, 50.95772], [5.74463, 50.96154], [5.7281, 50.95496], [5.71963, 50.96053], [5.7665, 50.9981], [5.77203, 51.01788], [5.78725, 51.01917], [5.77944, 51.00298]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 981,
      "areaName": "Vaals"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[6.00203, 50.78441], [6.02766, 50.77416], [6.02101, 50.75429], [5.98319, 50.75282], [5.96066, 50.76247], [5.93617, 50.75679], [5.92054, 50.76933], [5.92385, 50.77524], [5.94361, 50.77326], [5.9431, 50.79375], [5.96481, 50.80242], [5.97656, 50.80344], [5.97486, 50.79804], [6.00203, 50.78441]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 983,
      "areaName": "Venlo"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[6.09494, 51.3656], [6.07759, 51.37817], [6.09046, 51.38591], [6.07231, 51.39756], [6.0777, 51.42017], [6.11668, 51.42132], [6.12456, 51.4148], [6.13527, 51.41611], [6.14078, 51.39486], [6.15304, 51.39593], [6.15447, 51.44081], [6.17864, 51.46581], [6.16673, 51.48676], [6.16919, 51.50308], [6.21336, 51.50782], [6.22368, 51.46872], [6.20526, 51.39952], [6.22667, 51.40027], [6.21443, 51.38963], [6.22639, 51.36034], [6.18988, 51.33946], [6.19424, 51.33488], [6.16856, 51.33299], [6.1245, 51.27706], [6.11446, 51.28917], [6.08472, 51.29745], [6.11539, 51.322], [6.12325, 51.34337], [6.09494, 51.3656]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 984,
      "areaName": "Venray"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[5.83824, 51.56641], [5.89147, 51.56021], [5.90666, 51.55203], [5.93544, 51.5536], [6.00425, 51.57024], [6.03167, 51.55234], [6.04466, 51.55903], [6.07939, 51.54709], [6.10999, 51.54712], [6.11968, 51.53185], [6.14109, 51.51952], [6.12199, 51.51018], [6.10474, 51.52239], [6.06677, 51.52369], [6.06839, 51.4879], [6.04947, 51.4904], [6.03021, 51.47985], [5.87497, 51.44656], [5.83824, 51.56641]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 986,
      "areaName": "Voerendaal"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[5.89159, 50.84285], [5.86903, 50.85668], [5.87343, 50.86448], [5.86162, 50.88242], [5.89401, 50.8856], [5.90153, 50.89578], [5.92418, 50.90484], [5.96936, 50.86008], [5.95452, 50.85257], [5.95495, 50.846], [5.93602, 50.84018], [5.925, 50.84884], [5.89159, 50.84285]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 988,
      "areaName": "Weert"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[5.58314, 51.21655], [5.56605, 51.22091], [5.61878, 51.22942], [5.62597, 51.2736], [5.644, 51.29058], [5.6678, 51.27738], [5.70759, 51.28361], [5.733, 51.28009], [5.74624, 51.26347], [5.77827, 51.25019], [5.79177, 51.23754], [5.77406, 51.21544], [5.75178, 51.21361], [5.74889, 51.20816], [5.75586, 51.20683], [5.73974, 51.18475], [5.70934, 51.18042], [5.65804, 51.18474], [5.65273, 51.19766], [5.58314, 51.21655]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 994,
      "areaName": "Valkenburg aan de Geul"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[5.77679, 50.85304], [5.74929, 50.85715], [5.7742, 50.87338], [5.77766, 50.88373], [5.80909, 50.88785], [5.81921, 50.88384], [5.83311, 50.89221], [5.83469, 50.88065], [5.86162, 50.88242], [5.87343, 50.86448], [5.86903, 50.85668], [5.88801, 50.84705], [5.87525, 50.84708], [5.87395, 50.83792], [5.85739, 50.83208], [5.83612, 50.83597], [5.82964, 50.82962], [5.80164, 50.84988], [5.77679, 50.85304]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 995,
      "areaName": "Lelystad"
    },
    "geometry": {
      "type": "MultiPolygon",
      "coordinates": [[[[5.4194, 52.50952], [5.41773, 52.5084], [5.39437, 52.49511], [5.41811, 52.50974], [5.42555, 52.51109], [5.4194, 52.50952]]], [[[5.4238, 52.51429], [5.42638, 52.51366], [5.4231, 52.51421], [5.42198, 52.51254], [5.41704, 52.51167], [5.42576, 52.51971], [5.4238, 52.51429]]], [[[5.43424, 52.52579], [5.43415, 52.52549], [5.43462, 52.52984], [5.43471, 52.5289], [5.43424, 52.52579]]], [[[5.43397, 52.53009], [5.43379, 52.52637], [5.43159, 52.52013], [5.42912, 52.5278], [5.43679, 52.53769], [5.43397, 52.53009]]], [[[5.52676, 52.57986], [5.5333, 52.57778], [5.52949, 52.57518], [5.52393, 52.57827], [5.52676, 52.57986]]], [[[5.58608, 52.56639], [5.59129, 52.50004], [5.60587, 52.48452], [5.56542, 52.47028], [5.58639, 52.44771], [5.56664, 52.43586], [5.58907, 52.41119], [5.5373, 52.385], [5.43878, 52.44265], [5.35077, 52.40021], [5.27581, 52.42332], [5.25842, 52.43543], [5.43467, 52.51123], [5.43537, 52.5302], [5.44775, 52.53533], [5.45718, 52.55365], [5.49745, 52.55437], [5.57289, 52.59616], [5.58608, 52.56639]]], [[[5.39901, 52.64571], [5.40229, 52.64439], [5.39975, 52.64493], [5.38872, 52.65308], [5.38806, 52.65415], [5.38798, 52.65486], [5.38823, 52.6554], [5.39901, 52.64571]]], [[[5.34351, 52.67654], [5.33579, 52.67798], [5.33487, 52.67825], [5.33333, 52.67898], [5.33253, 52.67988], [5.33301, 52.68208], [5.34351, 52.67654]]], [[[5.29524, 52.69002], [5.29518, 52.69005], [5.29566, 52.69161], [5.29571, 52.69153], [5.29524, 52.69002]]], [[[5.29497, 52.69209], [5.29493, 52.68991], [5.28688, 52.6899], [5.28762, 52.69166], [5.29497, 52.69209]]], [[[5.29737, 52.69228], [5.35198, 52.67822], [5.36154, 52.6742], [5.39857, 52.65011], [5.41271, 52.63671], [5.41608, 52.63694], [5.45703, 52.59294], [5.46791, 52.57137], [5.46809, 52.56879], [5.46438, 52.56572], [5.44843, 52.5616], [5.43984, 52.55551], [5.42534, 52.52072], [5.43932, 52.55592], [5.44701, 52.56147], [5.46728, 52.56879], [5.45652, 52.59238], [5.39897, 52.64883], [5.36034, 52.67418], [5.35263, 52.67743], [5.30236, 52.69071], [5.29424, 52.68439], [5.28557, 52.68282], [5.29707, 52.68229], [5.30443, 52.68875], [5.29729, 52.68228], [5.28937, 52.68125], [5.28352, 52.68291], [5.29412, 52.68596], [5.29737, 52.69228]]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 1507,
      "areaName": "Horst aan de Maas"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[6.132, 51.51147], [6.14109, 51.51952], [6.16566, 51.50894], [6.16673, 51.48676], [6.17873, 51.47023], [6.15447, 51.44081], [6.15304, 51.39593], [6.14078, 51.39486], [6.13527, 51.41611], [6.12456, 51.4148], [6.11668, 51.42132], [6.08163, 51.42058], [6.0733, 51.39576], [6.01877, 51.38226], [5.9579, 51.37805], [5.93129, 51.38475], [5.87497, 51.44656], [6.03021, 51.47985], [6.04947, 51.4904], [6.06839, 51.4879], [6.06677, 51.52369], [6.10474, 51.52239], [6.12199, 51.51018], [6.132, 51.51147]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 1509,
      "areaName": "Oude IJsselstreek"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[6.30828, 51.84981], [6.29911, 51.86835], [6.32925, 51.87123], [6.32423, 51.88892], [6.33228, 51.89327], [6.3069, 51.90441], [6.31567, 51.91836], [6.29097, 51.9226], [6.29871, 51.93904], [6.32094, 51.93581], [6.33303, 51.92541], [6.35939, 51.92279], [6.38122, 51.93323], [6.41608, 51.97262], [6.4475, 51.96971], [6.46785, 51.97822], [6.53283, 51.96235], [6.51746, 51.94791], [6.50478, 51.94598], [6.48867, 51.91273], [6.47235, 51.90736], [6.48425, 51.87885], [6.46438, 51.85529], [6.45117, 51.86524], [6.43236, 51.85938], [6.42736, 51.86586], [6.39057, 51.87397], [6.38798, 51.86191], [6.40895, 51.85335], [6.40182, 51.82726], [6.36333, 51.83516], [6.36026, 51.8458], [6.34721, 51.85068], [6.30828, 51.84981]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 1525,
      "areaName": "Teylingen"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[4.49082, 52.18676], [4.49145, 52.20369], [4.46347, 52.2002], [4.45565, 52.20703], [4.46651, 52.21294], [4.46621, 52.22523], [4.51341, 52.25507], [4.52659, 52.24725], [4.52492, 52.23556], [4.55843, 52.2188], [4.5617, 52.20366], [4.55716, 52.19774], [4.54677, 52.19898], [4.53815, 52.18008], [4.5034, 52.18463], [4.49083, 52.18103], [4.49082, 52.18676]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 1581,
      "areaName": "Utrechtse Heuvelrug"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[5.25212, 52.06203], [5.29076, 52.08657], [5.32042, 52.07033], [5.33225, 52.08416], [5.40589, 52.07522], [5.4019, 52.0643], [5.43558, 52.07288], [5.42864, 52.05534], [5.44853, 52.04312], [5.45353, 52.04998], [5.46114, 52.04726], [5.49155, 52.05732], [5.5148, 52.05461], [5.52938, 52.04025], [5.47766, 51.98347], [5.43761, 51.98561], [5.39098, 51.97073], [5.37839, 51.98612], [5.39942, 51.98795], [5.41528, 51.9967], [5.3816, 52.00215], [5.31465, 52.027], [5.29122, 52.00835], [5.27877, 52.01091], [5.26324, 52.02438], [5.26931, 52.02916], [5.24948, 52.04102], [5.25212, 52.06203]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 1586,
      "areaName": "Oost Gelre"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[6.47577, 51.98814], [6.46006, 51.99515], [6.46749, 52.00076], [6.45927, 52.01907], [6.50871, 52.04427], [6.53899, 52.0252], [6.57171, 52.03043], [6.59624, 52.04282], [6.61309, 52.06804], [6.63062, 52.06442], [6.62765, 52.05769], [6.63572, 52.05527], [6.64684, 52.06541], [6.65897, 52.06304], [6.66179, 52.0516], [6.68798, 52.04437], [6.68357, 52.0282], [6.65553, 52.01393], [6.65706, 51.97755], [6.63892, 51.96255], [6.55935, 51.97436], [6.52727, 51.96602], [6.4948, 51.97059], [6.46693, 51.97862], [6.47577, 51.98814]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 1598,
      "areaName": "Koggenland"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[4.87671, 52.64055], [4.8627, 52.653], [4.87598, 52.68582], [4.91085, 52.69991], [4.91731, 52.69291], [4.90562, 52.68642], [4.95274, 52.67177], [4.97061, 52.67963], [5.00235, 52.67493], [5.02127, 52.66442], [5.03476, 52.66656], [5.03905, 52.65584], [5.03849, 52.64711], [5.01418, 52.63473], [5.01966, 52.61245], [5.00657, 52.61051], [5.00488, 52.59757], [4.94985, 52.59529], [4.95932, 52.60471], [4.95132, 52.61407], [4.929, 52.60516], [4.92243, 52.61147], [4.88399, 52.61314], [4.88929, 52.62554], [4.87352, 52.63417], [4.87671, 52.64055]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 1621,
      "areaName": "Lansingerland"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[4.45281, 51.99723], [4.46156, 52.01265], [4.45727, 52.02221], [4.47738, 52.03179], [4.50573, 52.03214], [4.53467, 52.04956], [4.54534, 52.04894], [4.55781, 52.06174], [4.5652, 52.0585], [4.54635, 51.99156], [4.55043, 51.97379], [4.51859, 51.96029], [4.46901, 51.98055], [4.44668, 51.96279], [4.42422, 51.97926], [4.45281, 51.99723]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 1640,
      "areaName": "Leudal"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[5.74772, 51.1956], [5.75178, 51.21361], [5.78162, 51.22002], [5.79074, 51.23724], [5.85344, 51.24449], [5.85499, 51.25366], [5.83384, 51.27494], [5.86072, 51.3108], [5.87782, 51.31658], [5.95471, 51.30028], [6.00827, 51.27753], [6.00445, 51.23657], [5.95132, 51.20117], [5.91413, 51.20891], [5.90701, 51.20555], [5.90788, 51.21143], [5.88943, 51.21541], [5.86867, 51.19701], [5.87373, 51.19094], [5.8481, 51.17921], [5.85292, 51.17494], [5.85247, 51.17458], [5.84609, 51.17859], [5.81506, 51.15885], [5.80493, 51.16288], [5.77765, 51.1513], [5.7794, 51.16332], [5.76957, 51.16908], [5.77974, 51.1718], [5.77295, 51.17337], [5.77673, 51.17849], [5.74564, 51.1895], [5.74772, 51.1956]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 1641,
      "areaName": "Maasgouw"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[5.819, 51.12527], [5.84135, 51.13148], [5.85578, 51.14463], [5.83635, 51.15368], [5.82696, 51.17058], [5.84609, 51.17859], [5.85247, 51.17458], [5.8481, 51.17921], [5.87373, 51.19094], [5.86855, 51.19682], [5.88221, 51.21266], [5.89488, 51.216], [5.90861, 51.21081], [5.90701, 51.20555], [5.91413, 51.20891], [5.95132, 51.20117], [5.92782, 51.18685], [5.91665, 51.16862], [5.95548, 51.15904], [5.91156, 51.13179], [5.87228, 51.13511], [5.83471, 51.09947], [5.82889, 51.10704], [5.80836, 51.1112], [5.819, 51.12527]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 1651,
      "areaName": "Eemsmond"
    },
    "geometry": {
      "type": "MultiPolygon",
      "coordinates": [[[[6.78291, 53.45941], [6.79778, 53.45465], [6.81337, 53.46321], [6.83445, 53.46255], [6.83215, 53.45073], [6.81393, 53.45317], [6.82941, 53.4482], [6.81927, 53.44485], [6.84729, 53.44236], [6.83827, 53.44699], [6.84141, 53.46047], [6.88438, 53.44362], [6.87421, 53.40803], [6.84372, 53.42242], [6.79246, 53.4036], [6.77861, 53.41079], [6.69703, 53.3629], [6.64318, 53.36612], [6.62581, 53.36099], [6.62589, 53.35071], [6.60215, 53.34974], [6.58822, 53.34223], [6.56881, 53.35787], [6.55253, 53.35895], [6.5518, 53.37701], [6.5231, 53.38493], [6.52183, 53.39763], [6.53497, 53.3966], [6.53572, 53.40612], [6.54413, 53.40641], [6.54583, 53.43217], [6.57896, 53.43844], [6.58167, 53.43313], [6.5807, 53.43784], [6.67709, 53.46007], [6.74599, 53.46601], [6.78291, 53.45941]], [[6.54616, 53.431], [6.54607, 53.43128], [6.54604, 53.43132], [6.54617, 53.43096], [6.54616, 53.431]]], [[[6.41862, 53.49871], [6.41591, 53.50945], [6.41663, 53.51171], [6.41812, 53.51378], [6.41909, 53.5142], [6.41862, 53.49871]]], [[[6.42001, 53.52202], [6.42365, 53.51373], [6.41212, 53.51712], [6.40606, 53.51001], [6.40169, 53.51724], [6.42001, 53.52202]]], [[[6.59422, 53.52348], [6.58967, 53.52008], [6.58217, 53.52451], [6.58819, 53.52588], [6.59422, 53.52348]]], [[[6.50029, 53.53565], [6.49472, 53.53287], [6.48196, 53.53501], [6.49049, 53.53571], [6.49674, 53.53707], [6.50029, 53.53565]]], [[[6.59946, 53.53738], [6.60126, 53.53631], [6.59249, 53.53675], [6.59357, 53.53746], [6.59946, 53.53738]]], [[[6.57574, 53.54456], [6.60144, 53.54224], [6.61636, 53.5349], [6.59618, 53.54019], [6.56685, 53.5321], [6.56581, 53.54021], [6.57574, 53.54456]]], [[[6.49173, 53.54953], [6.51118, 53.53827], [6.51333, 53.53581], [6.48765, 53.54886], [6.47574, 53.54786], [6.51266, 53.53201], [6.49795, 53.53757], [6.47745, 53.5361], [6.47432, 53.5176], [6.45125, 53.54379], [6.46798, 53.5548], [6.49173, 53.54953]]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 1652,
      "areaName": "Gemert-Bakel"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[5.72948, 51.58981], [5.78668, 51.59821], [5.80059, 51.57862], [5.83824, 51.56641], [5.85257, 51.50414], [5.72433, 51.48408], [5.70505, 51.49746], [5.70823, 51.50203], [5.68414, 51.5077], [5.67444, 51.52496], [5.68224, 51.52768], [5.66048, 51.55133], [5.65136, 51.58236], [5.72948, 51.58981]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 1655,
      "areaName": "Halderberge"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[4.46137, 51.61438], [4.48044, 51.61972], [4.48314, 51.62007], [4.48627, 51.61993], [4.51486, 51.60679], [4.56365, 51.62965], [4.60123, 51.62524], [4.61389, 51.60804], [4.59675, 51.5903], [4.59222, 51.56129], [4.5328, 51.54924], [4.53662, 51.56578], [4.50945, 51.56856], [4.5002, 51.55854], [4.45754, 51.56146], [4.43239, 51.58364], [4.42667, 51.61174], [4.43783, 51.61712], [4.46137, 51.61438]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 1658,
      "areaName": "Heeze-Leende"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[5.63894, 51.38912], [5.65471, 51.35388], [5.63672, 51.34084], [5.64411, 51.33348], [5.6313, 51.32754], [5.60532, 51.33181], [5.56608, 51.32054], [5.51577, 51.2952], [5.48486, 51.3], [5.49134, 51.31445], [5.47365, 51.33407], [5.49603, 51.34651], [5.4938, 51.35539], [5.52718, 51.36694], [5.50569, 51.40391], [5.56417, 51.40478], [5.59645, 51.41786], [5.63902, 51.42246], [5.63894, 51.38912]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 1659,
      "areaName": "Laarbeek"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[5.55438, 51.51899], [5.53308, 51.5578], [5.58434, 51.56273], [5.62171, 51.55324], [5.65249, 51.56968], [5.68601, 51.51274], [5.68296, 51.50448], [5.66995, 51.50414], [5.67511, 51.49895], [5.6564, 51.50731], [5.63477, 51.49488], [5.61508, 51.50029], [5.60965, 51.50922], [5.57993, 51.49876], [5.56655, 51.50167], [5.55438, 51.51899]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 1663,
      "areaName": "De Marne"
    },
    "geometry": {
      "type": "MultiPolygon",
      "coordinates": [[[[6.29052, 53.33942], [6.29052, 53.33942], [6.28847, 53.34056], [6.28908, 53.34031], [6.29052, 53.33942]]], [[[6.21102, 53.36492], [6.21261, 53.36421], [6.21258, 53.36266], [6.21085, 53.36336], [6.20991, 53.36354], [6.20946, 53.36376], [6.21102, 53.36492]]], [[[6.20931, 53.37033], [6.20669, 53.37216], [6.20825, 53.37287], [6.2098, 53.37211], [6.20931, 53.37033]]], [[[6.1971, 53.37335], [6.20635, 53.3714], [6.20842, 53.36332], [6.18159, 53.37042], [6.1971, 53.37335]]], [[[6.19501, 53.38603], [6.19604, 53.38567], [6.19345, 53.38539], [6.19349, 53.386], [6.19501, 53.38603]]], [[[6.19698, 53.38654], [6.19538, 53.38632], [6.19493, 53.38728], [6.19631, 53.38734], [6.19698, 53.38654]]], [[[6.1862, 53.38751], [6.18887, 53.38582], [6.18499, 53.38388], [6.1835, 53.38664], [6.1862, 53.38751]]], [[[6.18109, 53.38924], [6.18008, 53.38906], [6.18014, 53.39087], [6.18236, 53.39022], [6.18109, 53.38924]]], [[[6.22997, 53.39279], [6.22566, 53.38995], [6.21913, 53.39089], [6.22373, 53.39281], [6.22997, 53.39279]]], [[[6.19174, 53.40641], [6.19055, 53.40566], [6.1854, 53.40501], [6.18607, 53.40552], [6.19174, 53.40641]]], [[[6.54485, 53.4328], [6.54775, 53.42635], [6.51549, 53.42559], [6.50718, 53.39948], [6.48485, 53.39842], [6.46906, 53.39083], [6.48049, 53.36543], [6.47167, 53.35949], [6.48386, 53.35361], [6.48482, 53.34421], [6.44768, 53.3273], [6.44111, 53.31677], [6.43, 53.32853], [6.41478, 53.32811], [6.40114, 53.31913], [6.36701, 53.32157], [6.35713, 53.31388], [6.34474, 53.31906], [6.32296, 53.31595], [6.31359, 53.32856], [6.29224, 53.33847], [6.29984, 53.33979], [6.25392, 53.34934], [6.23296, 53.34419], [6.23259, 53.35269], [6.25764, 53.35874], [6.23312, 53.36045], [6.24818, 53.36422], [6.2397, 53.36583], [6.2382, 53.36925], [6.21703, 53.3638], [6.20955, 53.36736], [6.23371, 53.37322], [6.18394, 53.37939], [6.2016, 53.38533], [6.17929, 53.3945], [6.18502, 53.40348], [6.1983, 53.40312], [6.21155, 53.39532], [6.21631, 53.39008], [6.2211, 53.38838], [6.22104, 53.388], [6.22229, 53.38645], [6.2229, 53.38602], [6.22365, 53.38579], [6.23678, 53.39121], [6.23273, 53.39552], [6.22159, 53.39595], [6.19143, 53.41105], [6.203, 53.40792], [6.25506, 53.41516], [6.30808, 53.39378], [6.34012, 53.40449], [6.33678, 53.41237], [6.34928, 53.40378], [6.34626, 53.40865], [6.36092, 53.408], [6.36092, 53.41327], [6.36408, 53.40873], [6.36351, 53.41466], [6.53283, 53.43188], [6.53706, 53.42797], [6.54485, 53.4328]], [[6.24013, 53.3725], [6.24299, 53.3664], [6.25416, 53.36764], [6.24265, 53.36876], [6.24013, 53.3725]], [[6.23848, 53.37085], [6.23964, 53.36662], [6.24296, 53.36612], [6.24009, 53.36797], [6.23848, 53.37085]]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 1667,
      "areaName": "Reusel-De Mierden"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[5.13171, 51.34677], [5.07118, 51.39349], [5.10202, 51.42892], [5.19102, 51.43022], [5.20096, 51.39007], [5.19698, 51.37946], [5.1832, 51.37578], [5.19747, 51.3627], [5.19228, 51.35088], [5.2047, 51.32544], [5.16264, 51.31032], [5.13435, 51.3155], [5.13171, 51.34677]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 1669,
      "areaName": "Roerdalen"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[6.02393, 51.10972], [6.01395, 51.11793], [6.00077, 51.11414], [5.9909, 51.12041], [5.97213, 51.11469], [5.96533, 51.11844], [5.95424, 51.1132], [5.92675, 51.11377], [5.91375, 51.13302], [5.9835, 51.17622], [5.99886, 51.16222], [6.01479, 51.16591], [6.03898, 51.16044], [6.06357, 51.16552], [6.05019, 51.17504], [6.05707, 51.1757], [6.0552, 51.18457], [6.07314, 51.18282], [6.08219, 51.17163], [6.09969, 51.16983], [6.16517, 51.19441], [6.18072, 51.18636], [6.1388, 51.17334], [6.17542, 51.15846], [6.16346, 51.14874], [6.092, 51.13505], [6.08699, 51.12459], [6.06029, 51.11593], [6.03669, 51.09659], [6.02393, 51.10972]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 1671,
      "areaName": "Maasdonk"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[5.4868, 51.75292], [5.49887, 51.74531], [5.49181, 51.73752], [5.499, 51.73548], [5.47424, 51.72896], [5.48455, 51.7133], [5.49905, 51.70703], [5.47829, 51.70143], [5.46985, 51.68914], [5.45877, 51.69203], [5.45168, 51.68675], [5.43933, 51.70043], [5.42027, 51.70405], [5.42483, 51.71164], [5.40936, 51.72225], [5.40563, 51.73826], [5.42462, 51.74174], [5.41165, 51.76215], [5.44658, 51.76348], [5.46223, 51.77092], [5.4868, 51.75292]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 1672,
      "areaName": "Rijnwoude"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[4.53079, 52.08069], [4.53714, 52.08395], [4.53532, 52.12043], [4.54191, 52.11866], [4.54903, 52.13751], [4.56046, 52.132], [4.57148, 52.15311], [4.61898, 52.15873], [4.61946, 52.14211], [4.62869, 52.13862], [4.62192, 52.13319], [4.64705, 52.0864], [4.63211, 52.08704], [4.63157, 52.07621], [4.60691, 52.07705], [4.60743, 52.06553], [4.56504, 52.05857], [4.53369, 52.07305], [4.53079, 52.08069]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 1674,
      "areaName": "Roosendaal"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[4.31798, 51.55122], [4.37536, 51.54372], [4.43838, 51.55639], [4.44468, 51.56923], [4.45754, 51.56146], [4.49992, 51.55877], [4.49753, 51.54615], [4.52319, 51.54256], [4.52197, 51.53174], [4.51433, 51.5179], [4.50218, 51.51672], [4.49657, 51.50821], [4.48668, 51.47735], [4.39108, 51.45149], [4.36697, 51.45672], [4.36163, 51.47637], [4.37169, 51.47901], [4.3728, 51.48772], [4.35159, 51.49993], [4.3516, 51.5177], [4.34219, 51.51805], [4.34278, 51.52639], [4.32565, 51.52961], [4.32758, 51.53519], [4.30681, 51.54351], [4.31798, 51.55122]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 1676,
      "areaName": "Schouwen-Duiveland"
    },
    "geometry": {
      "type": "MultiPolygon",
      "coordinates": [[[[4.19733, 51.64393], [4.19706, 51.64309], [4.1957, 51.64324], [4.19606, 51.64419], [4.19733, 51.64393]]], [[[4.19785, 51.6478], [4.1981, 51.64637], [4.19621, 51.64661], [4.19649, 51.64806], [4.19785, 51.6478]]], [[[4.19351, 51.64969], [4.19375, 51.64838], [4.19086, 51.6492], [4.1926, 51.65035], [4.19351, 51.64969]]], [[[4.18998, 51.65287], [4.19141, 51.65273], [4.19134, 51.65262], [4.19184, 51.65237], [4.19222, 51.65178], [4.18711, 51.64945], [4.18998, 51.65287]]], [[[4.18348, 51.65709], [4.18204, 51.65658], [4.17988, 51.65674], [4.18359, 51.65803], [4.18348, 51.65709]]], [[[4.17357, 51.65872], [4.17691, 51.65829], [4.17948, 51.65856], [4.17805, 51.65758], [4.17357, 51.65872]]], [[[4.16165, 51.66107], [4.18273, 51.66091], [4.18326, 51.65833], [4.17, 51.66], [4.16633, 51.65671], [4.18236, 51.65361], [4.18007, 51.64979], [4.19074, 51.64502], [4.19414, 51.63903], [4.1854, 51.64712], [4.15648, 51.65382], [4.15863, 51.65923], [4.13762, 51.65773], [4.13782, 51.65979], [4.14631, 51.6594], [4.15723, 51.66093], [4.16165, 51.66107]], [[4.16053, 51.66096], [4.15766, 51.66087], [4.15767, 51.66062], [4.16157, 51.66035], [4.16053, 51.66096]]], [[[4.16158, 51.66181], [4.16171, 51.66126], [4.15712, 51.66112], [4.15592, 51.66116], [4.15573, 51.66122], [4.15654, 51.66164], [4.16158, 51.66181]], [[4.16151, 51.66174], [4.15754, 51.66164], [4.15756, 51.66122], [4.16157, 51.66132], [4.16151, 51.66174]]], [[[4.12378, 51.68008], [4.12632, 51.67914], [4.11891, 51.68026], [4.12172, 51.68031], [4.12378, 51.68008]]], [[[4.15735, 51.68249], [4.16263, 51.66806], [4.1717, 51.66821], [4.17492, 51.66699], [4.16028, 51.66466], [4.17481, 51.66547], [4.18015, 51.66427], [4.18301, 51.66284], [4.17539, 51.66458], [4.13758, 51.66179], [4.16006, 51.66463], [4.14973, 51.67844], [4.14537, 51.67396], [4.11717, 51.67458], [4.11871, 51.6676], [4.11669, 51.67458], [4.10045, 51.67108], [4.09926, 51.66501], [4.08966, 51.66968], [4.0942, 51.66829], [4.1076, 51.67696], [4.11575, 51.67974], [4.12255, 51.6775], [4.14803, 51.67871], [4.15735, 51.68249]]], [[[4.16104, 51.66259], [4.16141, 51.66207], [4.15757, 51.66199], [4.15755, 51.66233], [4.16104, 51.66259]]], [[[4.08621, 51.68728], [4.08584, 51.68559], [4.08176, 51.68676], [4.08176, 51.68714], [4.08621, 51.68728]]], [[[4.09119, 51.6874], [4.09266, 51.68725], [4.09139, 51.68441], [4.08744, 51.68692], [4.09119, 51.6874]]], [[[3.79058, 51.68994], [3.79004, 51.69061], [3.79125, 51.69125], [3.79153, 51.69033], [3.79058, 51.68994]]], [[[3.80977, 51.69406], [3.80867, 51.6942], [3.80813, 51.69642], [3.80927, 51.69655], [3.80977, 51.69406]]], [[[3.979, 51.72816], [3.97929, 51.72647], [3.97772, 51.72628], [3.977, 51.72772], [3.979, 51.72816]]], [[[3.91683, 51.73937], [3.92152, 51.73945], [3.93406, 51.73579], [3.91269, 51.73405], [3.91683, 51.73937]]], [[[3.95981, 51.74055], [3.95443, 51.74034], [3.96602, 51.7427], [3.96511, 51.74181], [3.95981, 51.74055]]], [[[3.93934, 51.73963], [3.94129, 51.73959], [3.93883, 51.73957], [3.93684, 51.7397], [3.93611, 51.73977], [3.93546, 51.74016], [3.9342, 51.74144], [3.93419, 51.7428], [3.93616, 51.73985], [3.93934, 51.73963]]], [[[3.94506, 51.74692], [3.95515, 51.74599], [3.96222, 51.74606], [3.93821, 51.73996], [3.93698, 51.74582], [3.94506, 51.74692]]], [[[3.93509, 51.74276], [3.9345, 51.74336], [3.9345, 51.74527], [3.93523, 51.74672], [3.93652, 51.74785], [3.93509, 51.74276]]], [[[4.0058, 51.75781], [4.00305, 51.75497], [3.99951, 51.75684], [3.99992, 51.75773], [4.0058, 51.75781]]], [[[3.99444, 51.75847], [4.01622, 51.72937], [4.01303, 51.72523], [4.00302, 51.72657], [3.978, 51.75258], [3.99444, 51.75847]]], [[[3.8401, 51.7554], [3.84207, 51.75278], [3.83818, 51.74963], [3.83746, 51.75528], [3.82745, 51.74894], [3.82579, 51.73883], [3.88746, 51.74522], [3.91303, 51.72961], [3.96792, 51.73401], [3.97157, 51.72639], [3.97535, 51.73258], [3.97633, 51.72297], [3.98236, 51.72607], [3.98207, 51.71772], [4.00662, 51.70354], [4.01497, 51.68663], [4.04467, 51.68455], [4.10207, 51.66223], [4.09657, 51.64754], [4.06729, 51.63018], [4.04937, 51.63149], [4.00971, 51.61814], [4.01888, 51.61404], [3.99172, 51.61817], [3.95862, 51.61411], [3.93532, 51.63605], [3.92829, 51.62878], [3.91438, 51.62921], [3.87073, 51.59704], [3.91419, 51.62925], [3.89253, 51.63186], [3.91112, 51.64216], [3.88991, 51.63133], [3.8769, 51.6673], [3.85744, 51.67824], [3.84886, 51.67622], [3.84753, 51.67817], [3.84668, 51.67665], [3.81801, 51.68433], [3.812, 51.68706], [3.82556, 51.68765], [3.81413, 51.69771], [3.79433, 51.69621], [3.78764, 51.68801], [3.79304, 51.68969], [3.80359, 51.69126], [3.80602, 51.69003], [3.75724, 51.67369], [3.72458, 51.66853], [3.72318, 51.65584], [3.73271, 51.65188], [3.71912, 51.65033], [3.72115, 51.66451], [3.70074, 51.66984], [3.68063, 51.68748], [3.67686, 51.70589], [3.68612, 51.71881], [3.71782, 51.73634], [3.77212, 51.74432], [3.81901, 51.74062], [3.82323, 51.75045], [3.83455, 51.75749], [3.8401, 51.7554]]], [[[3.9457, 51.76617], [3.94378, 51.76691], [3.9462, 51.76807], [3.94695, 51.76682], [3.9457, 51.76617]]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 1680,
      "areaName": "Aa en Hunze"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[6.64886, 53.08219], [6.67329, 53.07932], [6.69902, 53.06517], [6.77651, 53.09476], [6.93569, 52.99335], [6.72771, 52.95472], [6.73634, 52.87869], [6.71456, 52.86816], [6.68637, 52.87533], [6.66673, 52.90945], [6.58583, 52.91945], [6.5615, 52.94665], [6.58127, 52.96745], [6.59604, 52.97266], [6.61139, 53.00508], [6.63224, 53.01711], [6.63122, 53.02611], [6.64859, 53.02633], [6.64233, 53.04593], [6.67166, 53.06479], [6.64886, 53.08219]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 1681,
      "areaName": "Borger-Odoorn"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[6.73034, 52.89923], [6.72771, 52.95472], [6.93569, 52.99335], [7.01597, 52.92458], [7.04557, 52.91591], [7.0148, 52.87299], [6.96145, 52.86428], [6.94991, 52.8488], [6.86902, 52.81931], [6.84981, 52.80463], [6.75301, 52.85904], [6.73749, 52.87491], [6.73034, 52.89923]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 1684,
      "areaName": "Cuijk"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[5.8708, 51.75534], [5.88897, 51.72453], [5.93452, 51.71497], [5.89481, 51.68846], [5.89535, 51.68145], [5.8599, 51.66991], [5.82256, 51.6995], [5.78843, 51.70886], [5.79975, 51.73437], [5.78611, 51.74429], [5.79053, 51.75351], [5.80287, 51.75578], [5.8507, 51.75934], [5.8708, 51.75534]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 1685,
      "areaName": "Landerd"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[5.58223, 51.73275], [5.57627, 51.74488], [5.64864, 51.76433], [5.66728, 51.75222], [5.67486, 51.76805], [5.70192, 51.75553], [5.69812, 51.73851], [5.70791, 51.73658], [5.7061, 51.73212], [5.71881, 51.73293], [5.69996, 51.71145], [5.73436, 51.67762], [5.74255, 51.65006], [5.73017, 51.65769], [5.73669, 51.66142], [5.73135, 51.67394], [5.67867, 51.66494], [5.62396, 51.70353], [5.59704, 51.70199], [5.60015, 51.70837], [5.58223, 51.73275]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 1690,
      "areaName": "De Wolden"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[6.40058, 52.78087], [6.41295, 52.78832], [6.41665, 52.78173], [6.42753, 52.7825], [6.43698, 52.792], [6.44692, 52.78589], [6.43806, 52.77125], [6.41013, 52.76489], [6.42629, 52.75142], [6.41539, 52.74086], [6.42132, 52.73142], [6.4068, 52.72841], [6.41437, 52.71726], [6.4042, 52.70507], [6.42037, 52.70135], [6.45114, 52.70698], [6.44868, 52.69379], [6.48598, 52.69363], [6.49257, 52.67597], [6.53056, 52.67247], [6.52938, 52.65451], [6.51386, 52.64629], [6.5186, 52.61409], [6.47802, 52.61863], [6.47007, 52.62501], [6.45979, 52.61576], [6.44188, 52.61564], [6.43124, 52.62838], [6.41881, 52.61902], [6.4095, 52.62173], [6.38371, 52.61223], [6.36444, 52.64317], [6.32629, 52.65899], [6.32699, 52.66919], [6.29537, 52.66229], [6.27916, 52.66905], [6.26579, 52.66686], [6.26981, 52.68223], [6.28348, 52.68225], [6.27587, 52.69022], [6.28501, 52.6897], [6.28668, 52.69913], [6.27581, 52.69546], [6.2743, 52.70619], [6.2169, 52.70316], [6.21632, 52.7186], [6.23144, 52.74171], [6.25203, 52.75831], [6.2988, 52.76646], [6.29321, 52.77899], [6.30874, 52.79508], [6.35366, 52.79892], [6.34296, 52.78969], [6.3555, 52.77952], [6.37792, 52.7852], [6.39404, 52.77745], [6.40058, 52.78087]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 1695,
      "areaName": "Noord-Beveland"
    },
    "geometry": {
      "type": "MultiPolygon",
      "coordinates": [[[[3.86612, 51.54382], [3.86686, 51.54171], [3.86153, 51.5431], [3.86215, 51.54368], [3.86612, 51.54382]]], [[[3.79509, 51.54322], [3.79267, 51.54288], [3.79154, 51.54357], [3.79266, 51.54394], [3.79509, 51.54322]]], [[[3.78877, 51.54443], [3.78876, 51.54443], [3.78556, 51.54573], [3.78699, 51.54585], [3.78877, 51.54443]]], [[[3.77435, 51.55113], [3.7791, 51.54991], [3.77951, 51.54913], [3.77174, 51.55135], [3.77435, 51.55113]]], [[[3.80382, 51.60525], [3.83893, 51.60586], [3.87073, 51.59704], [3.8944, 51.57526], [3.88885, 51.57312], [3.89765, 51.56043], [3.87229, 51.55509], [3.86464, 51.5468], [3.87104, 51.54447], [3.86211, 51.54386], [3.83561, 51.55622], [3.81121, 51.55053], [3.80509, 51.55495], [3.81005, 51.5498], [3.80355, 51.54777], [3.76003, 51.55511], [3.69963, 51.52394], [3.7012, 51.54067], [3.70483, 51.53889], [3.70487, 51.53711], [3.70718, 51.53567], [3.70132, 51.54767], [3.68846, 51.55611], [3.6918, 51.55773], [3.70068, 51.56648], [3.68382, 51.55759], [3.65333, 51.57], [3.64617, 51.58855], [3.63869, 51.58975], [3.68313, 51.60076], [3.7234, 51.5915], [3.80382, 51.60525]]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 1696,
      "areaName": "Wijdemeren"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[5.03698, 52.22483], [5.05773, 52.23535], [5.04294, 52.25598], [5.03175, 52.25524], [5.02302, 52.27285], [5.0486, 52.27703], [5.06081, 52.28521], [5.06463, 52.27826], [5.10207, 52.27989], [5.1193, 52.27345], [5.12557, 52.26022], [5.1396, 52.25402], [5.14179, 52.22549], [5.1223, 52.22075], [5.14244, 52.20871], [5.14526, 52.19679], [5.12194, 52.18558], [5.12411, 52.18083], [5.04642, 52.16593], [5.04205, 52.18337], [5.0325, 52.18411], [5.0372, 52.19795], [5.02129, 52.20189], [5.03665, 52.20214], [5.03698, 52.22483]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 1699,
      "areaName": "Noordenveld"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[6.35172, 53.07093], [6.30528, 53.08119], [6.31516, 53.09405], [6.34443, 53.08714], [6.36356, 53.10755], [6.38141, 53.15351], [6.40292, 53.16721], [6.40591, 53.17686], [6.46523, 53.20046], [6.48572, 53.20382], [6.49423, 53.19822], [6.51474, 53.19812], [6.53537, 53.17164], [6.53954, 53.13314], [6.51093, 53.13069], [6.50089, 53.12058], [6.4803, 53.12079], [6.51336, 53.07228], [6.50289, 53.03221], [6.49553, 53.0309], [6.51304, 53.01056], [6.41328, 52.98552], [6.36252, 53.03397], [6.36781, 53.06736], [6.35172, 53.07093]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 1700,
      "areaName": "Twenterand"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[6.64148, 52.47135], [6.6693, 52.49498], [6.71771, 52.47813], [6.69775, 52.45178], [6.67255, 52.43894], [6.67789, 52.42783], [6.66967, 52.41737], [6.69863, 52.39374], [6.68439, 52.3909], [6.67612, 52.39615], [6.6719, 52.38885], [6.66417, 52.38951], [6.6402, 52.39912], [6.5988, 52.38363], [6.57247, 52.42331], [6.59815, 52.43903], [6.59639, 52.45481], [6.56289, 52.44576], [6.54055, 52.45088], [6.52837, 52.44065], [6.5109, 52.43717], [6.4748, 52.44118], [6.44746, 52.46538], [6.46545, 52.47512], [6.50377, 52.48172], [6.50547, 52.49096], [6.60104, 52.47947], [6.613, 52.4656], [6.62682, 52.47383], [6.64148, 52.47135]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 1701,
      "areaName": "Westerveld"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[6.15029, 52.82994], [6.11982, 52.85422], [6.2069, 52.89074], [6.25659, 52.92764], [6.30299, 52.92497], [6.33328, 52.90636], [6.36903, 52.92198], [6.38555, 52.91555], [6.35956, 52.89453], [6.37327, 52.89027], [6.36883, 52.87672], [6.38147, 52.8896], [6.41999, 52.88232], [6.43145, 52.86995], [6.43089, 52.85039], [6.46072, 52.85307], [6.46267, 52.83868], [6.48003, 52.83694], [6.45938, 52.81542], [6.44692, 52.78589], [6.43698, 52.792], [6.42164, 52.78108], [6.413, 52.78832], [6.39404, 52.77745], [6.37792, 52.7852], [6.3555, 52.77952], [6.34296, 52.78969], [6.35366, 52.79892], [6.30975, 52.79544], [6.29321, 52.77899], [6.29872, 52.76642], [6.25203, 52.75831], [6.23144, 52.74171], [6.21856, 52.7483], [6.20184, 52.72931], [6.17291, 52.77305], [6.20173, 52.7937], [6.15029, 52.82994]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 1702,
      "areaName": "Sint Anthonis"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[5.77858, 51.645], [5.79866, 51.6609], [5.82312, 51.66704], [5.8428, 51.67997], [5.85992, 51.66989], [5.8558, 51.66221], [5.87557, 51.65292], [5.87167, 51.64398], [5.89648, 51.64449], [5.92577, 51.63215], [5.9498, 51.60781], [5.87724, 51.57817], [5.87089, 51.56264], [5.82055, 51.56856], [5.80059, 51.57862], [5.78668, 51.59821], [5.75861, 51.59395], [5.74768, 51.63267], [5.77858, 51.645]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 1705,
      "areaName": "Lingewaard"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[5.91249, 51.94499], [5.91643, 51.95042], [5.92945, 51.95059], [5.9356, 51.96042], [6.04628, 51.87091], [6.00479, 51.88103], [5.96745, 51.85445], [5.93219, 51.87355], [5.88274, 51.86614], [5.87284, 51.88739], [5.85763, 51.88839], [5.85687, 51.89701], [5.87474, 51.89757], [5.87366, 51.90845], [5.8912, 51.90726], [5.897, 51.92081], [5.88952, 51.92527], [5.91249, 51.94499]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 1706,
      "areaName": "Cranendonck"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[5.56793, 51.32109], [5.60532, 51.33181], [5.6313, 51.32754], [5.6446, 51.33455], [5.63664, 51.33783], [5.63993, 51.34674], [5.65471, 51.35388], [5.67211, 51.31509], [5.62597, 51.2736], [5.61878, 51.22942], [5.56605, 51.22091], [5.55487, 51.2445], [5.55642, 51.26641], [5.51577, 51.2952], [5.56793, 51.32109]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 1708,
      "areaName": "Steenwijkerland"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[6.14976, 52.82849], [6.20173, 52.7937], [6.16853, 52.76709], [6.12056, 52.75247], [6.15898, 52.69215], [6.12193, 52.6683], [6.09992, 52.66082], [6.08556, 52.66327], [6.02108, 52.64136], [5.96685, 52.66658], [5.93308, 52.67126], [5.96482, 52.6981], [5.94255, 52.715], [5.92257, 52.75069], [5.86026, 52.78182], [5.81879, 52.7847], [5.79518, 52.80652], [5.81974, 52.81728], [5.83647, 52.80579], [5.85703, 52.80723], [5.87876, 52.80085], [5.92408, 52.82349], [5.92716, 52.83387], [5.94593, 52.83745], [5.95571, 52.83322], [5.96998, 52.84237], [5.99651, 52.81656], [6.02456, 52.82254], [6.03117, 52.81499], [6.05995, 52.82612], [6.05261, 52.83734], [6.08235, 52.83907], [6.11982, 52.85422], [6.14976, 52.82849]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 1709,
      "areaName": "Moerdijk"
    },
    "geometry": {
      "type": "MultiPolygon",
      "coordinates": [[[[4.38165, 51.67903], [4.38266, 51.67825], [4.3821, 51.67761], [4.38081, 51.67848], [4.3821, 51.67962], [4.38165, 51.67903]]], [[[4.38447, 51.68091], [4.38265, 51.68086], [4.38033, 51.67875], [4.38213, 51.67678], [4.38463, 51.6804], [4.38228, 51.67627], [4.37905, 51.67293], [4.38035, 51.67897], [4.38206, 51.6808], [4.38275, 51.68092], [4.38447, 51.68091]]], [[[4.40748, 51.68873], [4.40699, 51.68904], [4.41166, 51.69157], [4.41211, 51.69124], [4.40748, 51.68873]]], [[[4.40603, 51.68882], [4.40614, 51.68949], [4.41093, 51.69209], [4.41139, 51.69172], [4.40603, 51.68882]]], [[[4.40432, 51.69497], [4.40105, 51.69248], [4.39502, 51.69048], [4.39176, 51.69066], [4.39932, 51.69251], [4.40746, 51.69866], [4.40432, 51.69497]]], [[[4.40391, 51.69853], [4.40209, 51.69469], [4.39335, 51.69203], [4.39449, 51.69376], [4.40391, 51.69853]]], [[[4.42939, 51.70083], [4.42353, 51.69976], [4.38968, 51.6816], [4.40393, 51.69221], [4.42284, 51.70021], [4.42939, 51.70083]]], [[[4.57501, 51.6974], [4.55514, 51.69323], [4.54304, 51.69338], [4.60045, 51.70281], [4.57501, 51.6974]]], [[[4.6485, 51.7139], [4.66689, 51.68645], [4.6813, 51.68803], [4.69282, 51.68168], [4.69731, 51.68772], [4.70988, 51.67327], [4.68494, 51.66643], [4.69906, 51.63807], [4.68073, 51.63298], [4.6477, 51.63308], [4.62739, 51.62393], [4.56422, 51.62974], [4.51035, 51.60675], [4.48627, 51.61993], [4.44029, 51.61602], [4.42386, 51.63026], [4.37645, 51.65187], [4.3756, 51.66061], [4.37161, 51.65918], [4.36949, 51.65904], [4.38784, 51.66884], [4.39224, 51.68013], [4.42632, 51.69711], [4.49225, 51.68325], [4.49239, 51.67907], [4.49315, 51.68368], [4.53728, 51.68509], [4.60165, 51.69695], [4.62587, 51.70986], [4.64738, 51.7129], [4.64387, 51.71883], [4.6485, 51.7139]]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 1711,
      "areaName": "Echt-Susteren"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[5.98525, 51.07367], [5.95778, 51.03473], [5.93813, 51.03512], [5.91321, 51.06688], [5.892, 51.05313], [5.86674, 51.05157], [5.877, 51.03204], [5.85644, 51.02835], [5.84853, 51.04633], [5.82725, 51.04752], [5.82396, 51.07251], [5.80693, 51.05757], [5.79934, 51.06007], [5.79662, 51.07182], [5.80487, 51.07963], [5.79511, 51.08962], [5.80678, 51.09618], [5.82685, 51.09324], [5.85131, 51.10911], [5.87228, 51.13511], [5.89778, 51.13595], [5.91387, 51.13324], [5.92675, 51.11377], [5.95424, 51.1132], [5.96533, 51.11844], [5.97213, 51.11469], [5.98481, 51.12066], [6.02198, 51.11337], [6.03646, 51.09653], [6.01757, 51.09457], [5.98525, 51.07367]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 1714,
      "areaName": "Sluis"
    },
    "geometry": {
      "type": "MultiPolygon",
      "coordinates": [[[[3.37116, 51.36342], [3.37114, 51.3634], [3.36861, 51.36637], [3.37036, 51.36577], [3.37116, 51.36342]]], [[[3.36778, 51.36743], [3.3676, 51.36756], [3.36636, 51.36901], [3.3675, 51.3687], [3.36778, 51.36743]]], [[[3.61911, 51.39237], [3.62002, 51.39199], [3.62169, 51.38976], [3.61919, 51.39054], [3.61879, 51.3934], [3.61911, 51.39237]]], [[[3.51821, 51.40749], [3.55092, 51.40599], [3.5472, 51.40079], [3.55328, 51.4047], [3.55571, 51.39945], [3.56786, 51.40062], [3.56274, 51.39605], [3.56824, 51.39925], [3.57821, 51.39404], [3.57969, 51.3929], [3.57908, 51.39181], [3.58586, 51.3874], [3.61577, 51.38053], [3.68783, 51.37152], [3.69381, 51.35247], [3.64724, 51.35005], [3.64415, 51.34183], [3.6662, 51.31981], [3.71241, 51.31579], [3.70358, 51.30994], [3.70657, 51.28875], [3.69393, 51.27604], [3.6581, 51.29019], [3.62123, 51.29277], [3.59002, 51.30595], [3.58181, 51.28691], [3.56264, 51.29586], [3.55504, 51.28964], [3.54343, 51.2912], [3.53811, 51.28366], [3.51541, 51.28715], [3.52759, 51.24604], [3.42748, 51.24466], [3.41684, 51.26001], [3.40751, 51.25692], [3.3769, 51.27601], [3.3808, 51.28696], [3.3667, 51.29577], [3.37808, 51.30265], [3.35838, 51.31498], [3.38534, 51.33412], [3.36858, 51.37045], [3.38172, 51.38037], [3.42246, 51.39138], [3.4346, 51.39261], [3.44276, 51.3898], [3.51821, 51.40749]], [[3.57815, 51.39335], [3.57809, 51.39267], [3.57885, 51.39209], [3.57956, 51.39293], [3.57815, 51.39335]], [[3.43032, 51.39079], [3.43014, 51.39124], [3.4267, 51.39056], [3.42703, 51.39027], [3.43032, 51.39079]]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 1719,
      "areaName": "Drimmelen"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[4.76405, 51.63375], [4.73611, 51.64313], [4.69906, 51.63807], [4.6849, 51.66637], [4.70988, 51.67327], [4.69731, 51.68772], [4.69282, 51.68168], [4.6813, 51.68803], [4.66689, 51.68645], [4.64514, 51.71907], [4.6763, 51.72492], [4.67729, 51.72011], [4.69855, 51.72199], [4.78079, 51.76645], [4.7854, 51.75593], [4.85067, 51.75636], [4.84694, 51.72552], [4.8369, 51.71261], [4.82361, 51.71129], [4.84237, 51.67965], [4.78107, 51.6639], [4.79663, 51.64091], [4.76817, 51.62887], [4.76405, 51.63375]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 1721,
      "areaName": "Bernheze"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[5.49256, 51.70615], [5.49892, 51.71057], [5.48455, 51.7133], [5.47424, 51.72896], [5.53392, 51.74061], [5.58082, 51.7315], [5.60015, 51.70837], [5.59684, 51.69092], [5.57302, 51.67809], [5.56224, 51.66315], [5.5703, 51.65143], [5.54201, 51.64031], [5.54224, 51.63454], [5.5244, 51.63044], [5.50486, 51.63608], [5.4972, 51.62669], [5.46778, 51.64228], [5.42339, 51.65378], [5.43259, 51.66417], [5.44503, 51.66424], [5.45877, 51.69203], [5.46985, 51.68914], [5.47829, 51.70143], [5.49256, 51.70615]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 1722,
      "areaName": "Ferwerderadiel"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[5.7662, 53.35129], [5.82635, 53.36886], [5.82729, 53.368], [5.83213, 53.36455], [5.82648, 53.3689], [5.84806, 53.37664], [5.87597, 53.36236], [5.88594, 53.34753], [5.90754, 53.34316], [5.91631, 53.33686], [5.91051, 53.3345], [5.93663, 53.32387], [5.93508, 53.31566], [5.89657, 53.30174], [5.90665, 53.28784], [5.88313, 53.27668], [5.86118, 53.28865], [5.83883, 53.27493], [5.81141, 53.27673], [5.76328, 53.29449], [5.73538, 53.29472], [5.7493, 53.31356], [5.72142, 53.31603], [5.71891, 53.33486], [5.7662, 53.35129]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 1723,
      "areaName": "Alphen-Chaam"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[4.78076, 51.50408], [4.76002, 51.50237], [4.74891, 51.51896], [4.86299, 51.55727], [4.86426, 51.55202], [4.83461, 51.5386], [4.82958, 51.52794], [4.84195, 51.52671], [4.84474, 51.53333], [4.86623, 51.53807], [4.91106, 51.51008], [4.95664, 51.51868], [4.96257, 51.52586], [4.9776, 51.52165], [4.99242, 51.51229], [4.98674, 51.49533], [4.99464, 51.49765], [5.00036, 51.49186], [4.98799, 51.48305], [5.00834, 51.4733], [5.01667, 51.47525], [5.01046, 51.45824], [4.94025, 51.45737], [4.89129, 51.47822], [4.82114, 51.48307], [4.81565, 51.49463], [4.78076, 51.50408]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 1724,
      "areaName": "Bergeijk"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[5.30283, 51.32065], [5.31667, 51.32339], [5.32401, 51.3329], [5.34712, 51.33745], [5.34836, 51.35968], [5.39654, 51.38084], [5.4218, 51.38341], [5.42119, 51.33841], [5.43392, 51.32432], [5.4258, 51.31199], [5.41286, 51.32052], [5.39767, 51.31432], [5.3972, 51.29062], [5.3878, 51.28524], [5.41741, 51.26229], [5.34614, 51.27576], [5.33648, 51.26307], [5.29615, 51.26148], [5.26312, 51.2668], [5.23791, 51.26135], [5.22597, 51.26826], [5.24397, 51.30939], [5.25945, 51.31148], [5.26341, 51.31928], [5.30283, 51.32065]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 1728,
      "areaName": "Bladel"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[5.19871, 51.39363], [5.19077, 51.42975], [5.20922, 51.4365], [5.22354, 51.42508], [5.24478, 51.42625], [5.2819, 51.40437], [5.30285, 51.40753], [5.31365, 51.39944], [5.31087, 51.39072], [5.28924, 51.38891], [5.27977, 51.37533], [5.2753, 51.36272], [5.28597, 51.33634], [5.25945, 51.31148], [5.24112, 51.30566], [5.20026, 51.32266], [5.19199, 51.35509], [5.19747, 51.3627], [5.1832, 51.37578], [5.19698, 51.37946], [5.19871, 51.39363]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 1729,
      "areaName": "Gulpen-Wittem"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[5.92961, 50.84025], [5.95482, 50.84592], [5.95945, 50.82808], [5.98352, 50.80973], [5.95163, 50.79379], [5.94543, 50.79615], [5.9431, 50.77292], [5.9219, 50.77335], [5.9357, 50.75691], [5.90102, 50.75149], [5.88974, 50.75633], [5.88648, 50.77016], [5.84892, 50.75341], [5.84424, 50.77455], [5.81941, 50.80524], [5.83924, 50.80759], [5.86414, 50.82334], [5.85946, 50.83368], [5.87395, 50.83792], [5.87531, 50.84711], [5.89124, 50.84275], [5.925, 50.84884], [5.92961, 50.84025]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 1730,
      "areaName": "Tynaarlo"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[6.65948, 53.08306], [6.64925, 53.0799], [6.67166, 53.06475], [6.64233, 53.04593], [6.64859, 53.02633], [6.60301, 53.03309], [6.6081, 53.04852], [6.6011, 53.06192], [6.5758, 53.05919], [6.57487, 53.05458], [6.56973, 53.05986], [6.55521, 53.05861], [6.54731, 53.03507], [6.52514, 53.04627], [6.50513, 53.04635], [6.51336, 53.07228], [6.4803, 53.12079], [6.50089, 53.12058], [6.51093, 53.13069], [6.53954, 53.13314], [6.53537, 53.17164], [6.51641, 53.1878], [6.51201, 53.19622], [6.51572, 53.19831], [6.53049, 53.19556], [6.54174, 53.17861], [6.54819, 53.1811], [6.56369, 53.15764], [6.58151, 53.16358], [6.58796, 53.14544], [6.6144, 53.13556], [6.63483, 53.1062], [6.69537, 53.12118], [6.73745, 53.11946], [6.77651, 53.09476], [6.69902, 53.06517], [6.65948, 53.08306]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 1731,
      "areaName": "Midden-Drenthe"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[6.38144, 52.88956], [6.36883, 52.87672], [6.37327, 52.89027], [6.35956, 52.89453], [6.38559, 52.91368], [6.36903, 52.92198], [6.39344, 52.93284], [6.42762, 52.97182], [6.41328, 52.98552], [6.48821, 53.0054], [6.499, 52.99022], [6.4855, 52.97298], [6.49574, 52.96899], [6.48395, 52.95017], [6.49697, 52.95157], [6.53592, 52.93259], [6.543, 52.95534], [6.56507, 52.94498], [6.58583, 52.91945], [6.66673, 52.90945], [6.68637, 52.87533], [6.72186, 52.86632], [6.72863, 52.85397], [6.70405, 52.84698], [6.7076, 52.83639], [6.68896, 52.82297], [6.69195, 52.81], [6.68118, 52.80773], [6.67514, 52.79713], [6.66088, 52.80123], [6.5863, 52.73575], [6.5574, 52.74537], [6.56639, 52.76558], [6.53537, 52.7681], [6.51273, 52.76208], [6.50761, 52.7691], [6.49067, 52.77089], [6.49181, 52.79312], [6.45545, 52.80056], [6.48003, 52.83694], [6.46267, 52.83868], [6.46072, 52.85307], [6.43089, 52.85039], [6.43145, 52.86995], [6.41999, 52.88232], [6.38144, 52.88956]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 1734,
      "areaName": "Overbetuwe"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[5.69471, 51.92133], [5.67601, 51.92111], [5.67844, 51.9291], [5.69632, 51.93125], [5.69303, 51.93465], [5.66035, 51.92961], [5.66572, 51.9414], [5.647, 51.94033], [5.64761, 51.94462], [5.67983, 51.95867], [5.74319, 51.97023], [5.78075, 51.959], [5.83534, 51.97356], [5.82993, 51.94524], [5.89803, 51.93433], [5.88952, 51.92527], [5.897, 51.92081], [5.8912, 51.90726], [5.87366, 51.90845], [5.87474, 51.89757], [5.83024, 51.89386], [5.83408, 51.87566], [5.81708, 51.87027], [5.70666, 51.89329], [5.69471, 51.92133]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 1735,
      "areaName": "Hof van Twente"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[6.43694, 52.25406], [6.51726, 52.28305], [6.55401, 52.28331], [6.57533, 52.26912], [6.60536, 52.27069], [6.62607, 52.28997], [6.69384, 52.30867], [6.74478, 52.28138], [6.75296, 52.25237], [6.71962, 52.24862], [6.72094, 52.23809], [6.71709, 52.24098], [6.70204, 52.21682], [6.71239, 52.20633], [6.70347, 52.19853], [6.62436, 52.18892], [6.64729, 52.1769], [6.64028, 52.16741], [6.63054, 52.1736], [6.61215, 52.16317], [6.59042, 52.18246], [6.49565, 52.17714], [6.47917, 52.18228], [6.47029, 52.19937], [6.45488, 52.20238], [6.41681, 52.23713], [6.43694, 52.25406]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 1740,
      "areaName": "Neder-Betuwe"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[5.62786, 51.93719], [5.63991, 51.9385], [5.64638, 51.95333], [5.66599, 51.9528], [5.64632, 51.94108], [5.66572, 51.9414], [5.66035, 51.92961], [5.69303, 51.93465], [5.69632, 51.93125], [5.67844, 51.9291], [5.67601, 51.92111], [5.69628, 51.92085], [5.70666, 51.89329], [5.56706, 51.9018], [5.50903, 51.88984], [5.46392, 51.88901], [5.45553, 51.90456], [5.46945, 51.90734], [5.46009, 51.91175], [5.46469, 51.91899], [5.45338, 51.92276], [5.4909, 51.92474], [5.48928, 51.9183], [5.5053, 51.92393], [5.55352, 51.91809], [5.55414, 51.93427], [5.53351, 51.9433], [5.57187, 51.94154], [5.58662, 51.95083], [5.62786, 51.93719]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 1742,
      "areaName": "Rijssen-Holten"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[6.35602, 52.31822], [6.4219, 52.32569], [6.46092, 52.32006], [6.46819, 52.32646], [6.52488, 52.32568], [6.54942, 52.31211], [6.55401, 52.28331], [6.51726, 52.28305], [6.47556, 52.27128], [6.41641, 52.24215], [6.38596, 52.24311], [6.37719, 52.25894], [6.32884, 52.2811], [6.32653, 52.30163], [6.35602, 52.31822]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 1771,
      "areaName": "Geldrop-Mierlo"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[5.54678, 51.43368], [5.56616, 51.44148], [5.58471, 51.46051], [5.61452, 51.44901], [5.65647, 51.45656], [5.63902, 51.42246], [5.59645, 51.41786], [5.56417, 51.40478], [5.52581, 51.4047], [5.5252, 51.42799], [5.54678, 51.43368]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 1773,
      "areaName": "Olst-Wijhe"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[6.12085, 52.37954], [6.13055, 52.39998], [6.11078, 52.40775], [6.11947, 52.43292], [6.10958, 52.44053], [6.13714, 52.44076], [6.15768, 52.45354], [6.17743, 52.43115], [6.23096, 52.4235], [6.22158, 52.40909], [6.22988, 52.38984], [6.20399, 52.3869], [6.20134, 52.37139], [6.18946, 52.37575], [6.18851, 52.37058], [6.19686, 52.35211], [6.23567, 52.3399], [6.23535, 52.31982], [6.20649, 52.32112], [6.18155, 52.31486], [6.18218, 52.30891], [6.11015, 52.29772], [6.08413, 52.30157], [6.07982, 52.31759], [6.06618, 52.31903], [6.07607, 52.35057], [6.09486, 52.35697], [6.07797, 52.36857], [6.12085, 52.37954]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 1774,
      "areaName": "Dinkelland"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[6.85348, 52.42707], [6.94922, 52.43287], [6.98762, 52.46977], [7.01078, 52.42914], [7.03607, 52.40266], [7.05873, 52.39941], [7.07215, 52.37361], [7.00783, 52.36383], [6.97093, 52.37986], [6.96267, 52.36339], [6.97026, 52.34877], [6.95284, 52.34035], [6.95358, 52.33397], [6.93097, 52.32946], [6.90065, 52.33346], [6.86135, 52.30637], [6.85982, 52.29863], [6.91213, 52.28551], [6.88321, 52.28317], [6.86833, 52.27296], [6.84049, 52.27631], [6.85238, 52.28523], [6.82052, 52.29843], [6.82334, 52.30876], [6.77384, 52.31891], [6.75904, 52.33206], [6.76058, 52.34194], [6.77398, 52.34656], [6.7834, 52.36012], [6.86358, 52.36373], [6.85348, 52.42707]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 1783,
      "areaName": "Westland"
    },
    "geometry": {
      "type": "MultiPolygon",
      "coordinates": [[[[4.19781, 52.05358], [4.21229, 52.03071], [4.23501, 52.0393], [4.24822, 52.02523], [4.27266, 52.03592], [4.28974, 52.01765], [4.30982, 52.01563], [4.26525, 51.99584], [4.30314, 51.9799], [4.28509, 51.96989], [4.27322, 51.97364], [4.27654, 51.96505], [4.23396, 51.95333], [4.24022, 51.94285], [4.22829, 51.94799], [4.21782, 51.94164], [4.20136, 51.95008], [4.19061, 51.96598], [4.14728, 51.98139], [4.15097, 51.98764], [4.1278, 52.00057], [4.15924, 52.03013], [4.19781, 52.05358]]], [[[4.19633, 52.05568], [4.1964, 52.05558], [4.19628, 52.05564], [4.19633, 52.05568]]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 1842,
      "areaName": "Midden-Delfland"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[4.26142, 51.92678], [4.23385, 51.95317], [4.27654, 51.96505], [4.27322, 51.97364], [4.28509, 51.96989], [4.30314, 51.9799], [4.26525, 51.99584], [4.31939, 52.01992], [4.32324, 52.00434], [4.33266, 52.00788], [4.34114, 52.00271], [4.32411, 51.98986], [4.33823, 51.97418], [4.35663, 51.9773], [4.36918, 51.96887], [4.39381, 51.9775], [4.40304, 51.96645], [4.36351, 51.96087], [4.36707, 51.95522], [4.32289, 51.94271], [4.29261, 51.92124], [4.26142, 51.92678]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 1859,
      "areaName": "Berkelland"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[6.47858, 52.10072], [6.492, 52.12528], [6.48129, 52.14243], [6.46138, 52.15212], [6.48379, 52.1572], [6.4924, 52.17737], [6.51413, 52.18131], [6.55535, 52.17726], [6.59042, 52.18246], [6.61215, 52.16317], [6.63054, 52.1736], [6.64028, 52.16741], [6.64504, 52.17419], [6.6734, 52.16324], [6.67388, 52.1412], [6.6624, 52.13017], [6.71627, 52.11827], [6.76057, 52.11878], [6.75526, 52.09524], [6.7445, 52.09309], [6.75092, 52.08504], [6.73547, 52.07463], [6.69466, 52.0698], [6.68798, 52.04437], [6.66179, 52.0516], [6.65897, 52.06304], [6.64684, 52.06541], [6.63572, 52.05527], [6.62765, 52.05769], [6.63062, 52.06442], [6.61309, 52.06804], [6.59624, 52.04282], [6.57174, 52.03044], [6.53899, 52.0252], [6.50871, 52.04427], [6.46495, 52.0206], [6.43694, 52.02573], [6.40054, 52.08381], [6.44488, 52.1062], [6.46768, 52.10648], [6.47858, 52.10072]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 1876,
      "areaName": "Bronckhorst"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[6.17554, 52.03936], [6.15896, 52.03739], [6.14994, 52.04205], [6.12612, 52.03405], [6.11081, 52.04203], [6.16816, 52.0762], [6.17658, 52.09075], [6.21053, 52.09245], [6.2179, 52.09788], [6.21816, 52.08959], [6.2217, 52.08877], [6.22208, 52.10668], [6.23388, 52.11313], [6.26984, 52.11164], [6.27749, 52.12173], [6.32831, 52.13771], [6.35772, 52.13553], [6.36879, 52.12385], [6.39253, 52.13153], [6.39839, 52.11765], [6.39153, 52.11305], [6.424, 52.09691], [6.40054, 52.08381], [6.41507, 52.05144], [6.43268, 52.04056], [6.43705, 52.02565], [6.46219, 52.0217], [6.46749, 52.00076], [6.46006, 51.99515], [6.47577, 51.98814], [6.44779, 51.96976], [6.4161, 51.9726], [6.4025, 51.98217], [6.38088, 51.97774], [6.39082, 51.97074], [6.38465, 51.968], [6.36559, 51.96942], [6.37003, 51.97625], [6.32752, 51.97575], [6.33566, 51.98565], [6.31913, 51.99426], [6.29564, 51.98845], [6.2919, 51.99335], [6.27048, 51.98342], [6.25072, 51.98733], [6.2573, 51.98253], [6.2497, 51.97595], [6.23231, 51.98859], [6.22242, 51.98415], [6.2298, 51.97621], [6.16052, 51.97952], [6.16432, 51.99899], [6.15395, 52.00352], [6.16451, 52.01697], [6.1773, 52.02034], [6.17554, 52.03936]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 1883,
      "areaName": "Sittard-Geleen"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[5.88185, 51.01537], [5.90552, 51.00217], [5.90372, 50.9872], [5.89261, 50.98031], [5.89709, 50.97486], [5.8735, 50.9628], [5.85219, 50.96803], [5.83782, 50.9464], [5.81189, 50.95514], [5.80229, 50.9474], [5.79336, 50.9519], [5.78821, 50.94804], [5.78214, 50.98542], [5.7892, 51.0012], [5.77483, 51.00415], [5.78725, 51.01917], [5.77341, 51.019], [5.77491, 51.02599], [5.758, 51.03367], [5.77356, 51.06235], [5.80693, 51.05757], [5.82396, 51.07251], [5.82725, 51.04752], [5.84853, 51.04633], [5.85279, 51.02925], [5.877, 51.03204], [5.88185, 51.01537]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 1884,
      "areaName": "Kaag en Braassem"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[4.55814, 52.20037], [4.55843, 52.2188], [4.61867, 52.21449], [4.67035, 52.23076], [4.6767, 52.22593], [4.70371, 52.23379], [4.72415, 52.23237], [4.7297, 52.21021], [4.72359, 52.21162], [4.72077, 52.20128], [4.70767, 52.20505], [4.69532, 52.18915], [4.68894, 52.19193], [4.67984, 52.16275], [4.57262, 52.15227], [4.5624, 52.16612], [4.54936, 52.16451], [4.53815, 52.18008], [4.54677, 52.19898], [4.55814, 52.20037]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 1891,
      "areaName": "Dantumadiel"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[5.93502, 53.31567], [5.96748, 53.32265], [5.97585, 53.30693], [6.02015, 53.30822], [6.02344, 53.32453], [6.07577, 53.32424], [6.0737, 53.2924], [6.05438, 53.29087], [6.04397, 53.2435], [5.95597, 53.22806], [5.94299, 53.25043], [5.92565, 53.2522], [5.88224, 53.27678], [5.90665, 53.28784], [5.89657, 53.30174], [5.93502, 53.31567]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 1892,
      "areaName": "Zuidplas"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[4.5633, 52.03828], [4.5653, 52.05912], [4.60793, 52.06552], [4.6103, 52.04657], [4.59109, 52.03509], [4.6368, 52.01168], [4.64863, 52.02057], [4.66734, 52.0227], [4.67073, 52.01113], [4.65945, 52.00529], [4.68868, 51.99626], [4.66895, 51.97919], [4.63153, 51.96946], [4.6461, 51.95442], [4.63424, 51.93746], [4.61949, 51.93349], [4.58399, 51.96537], [4.60181, 51.97214], [4.59377, 51.976], [4.59437, 51.99428], [4.57894, 51.98987], [4.57436, 51.97288], [4.55656, 51.96846], [4.54769, 51.97281], [4.5633, 52.03828]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 1894,
      "areaName": "Peel en Maas"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[6.09494, 51.3656], [6.12264, 51.34468], [6.11539, 51.322], [6.08914, 51.29924], [6.04642, 51.2856], [6.02281, 51.26601], [6.00961, 51.26576], [6.00826, 51.27754], [5.95471, 51.30028], [5.85214, 51.3207], [5.83208, 51.33805], [5.84019, 51.34688], [5.87454, 51.35331], [5.93129, 51.38475], [5.9579, 51.37805], [5.98983, 51.37822], [6.07313, 51.39573], [6.09037, 51.38911], [6.07759, 51.37817], [6.09494, 51.3656]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 1895,
      "areaName": "Oldambt"
    },
    "geometry": {
      "type": "MultiPolygon",
      "coordinates": [[[[7.20895, 53.24307], [7.20968, 53.23963], [7.20805, 53.2392], [7.20716, 53.23838], [7.20603, 53.2383], [7.20895, 53.24307]]], [[[6.99866, 53.26713], [7.01323, 53.26684], [7.02185, 53.25324], [7.04031, 53.25984], [7.06752, 53.24238], [7.09138, 53.25661], [7.10011, 53.24934], [7.10873, 53.25342], [7.12582, 53.25015], [7.12605, 53.2445], [7.12966, 53.24981], [7.13203, 53.2418], [7.13401, 53.25015], [7.14472, 53.2393], [7.14398, 53.24604], [7.15056, 53.24018], [7.15006, 53.24518], [7.16314, 53.24537], [7.17307, 53.2405], [7.17088, 53.23382], [7.17366, 53.24182], [7.20505, 53.23671], [7.20804, 53.23171], [7.2098, 53.23944], [7.21762, 53.19782], [7.20804, 53.18848], [7.2275, 53.18028], [7.20366, 53.17656], [7.18924, 53.15488], [7.17396, 53.14793], [7.14531, 53.16077], [7.10565, 53.14394], [7.08124, 53.14401], [7.03229, 53.11533], [6.97975, 53.1192], [6.96529, 53.11083], [6.94224, 53.16653], [6.9033, 53.16646], [6.92385, 53.19166], [6.91682, 53.19557], [6.9294, 53.21282], [6.92004, 53.22734], [6.91272, 53.22512], [6.90925, 53.23765], [6.91615, 53.24362], [6.92844, 53.23695], [6.94499, 53.24361], [6.95233, 53.25654], [6.99866, 53.26713]]], [[[7.1596, 53.32201], [7.16577, 53.32173], [7.11615, 53.31957], [7.10094, 53.32241], [7.101, 53.32334], [7.11619, 53.32012], [7.11695, 53.32431], [7.10099, 53.32362], [7.15059, 53.32745], [7.15086, 53.32154], [7.1594, 53.32169], [7.15984, 53.32837], [7.1596, 53.32201]], [[7.15027, 53.32545], [7.14224, 53.32569], [7.14193, 53.32139], [7.15071, 53.32154], [7.15027, 53.32545]], [[7.14179, 53.32161], [7.14209, 53.32568], [7.13403, 53.32525], [7.13372, 53.32125], [7.14179, 53.32161]], [[7.13362, 53.32194], [7.13387, 53.32523], [7.12553, 53.32479], [7.1252, 53.3211], [7.13362, 53.32194]], [[7.1253, 53.32392], [7.11711, 53.32432], [7.11852, 53.32051], [7.12506, 53.3211], [7.1253, 53.32392]]], [[[7.16682, 53.33013], [7.18772, 53.32883], [7.18861, 53.32798], [7.16485, 53.3301], [7.10109, 53.32619], [7.11418, 53.32919], [7.11432, 53.32842], [7.12454, 53.32954], [7.16682, 53.33013]]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 1896,
      "areaName": "Zwartewaterland"
    },
    "geometry": {
      "type": "MultiPolygon",
      "coordinates": [[[[6.01886, 52.64351], [6.02074, 52.64179], [6.02118, 52.64092], [6.01818, 52.6422], [6.01886, 52.64351]]], [[[6.11989, 52.66488], [6.10429, 52.65712], [6.09685, 52.63563], [6.10748, 52.61887], [6.10306, 52.60565], [6.12406, 52.59406], [6.13138, 52.58125], [6.15549, 52.5825], [6.16681, 52.56525], [6.14053, 52.5521], [6.10334, 52.56739], [6.0894, 52.55184], [6.06315, 52.56728], [6.03336, 52.55898], [6.01289, 52.58611], [5.98294, 52.57751], [5.97134, 52.59416], [5.99117, 52.61397], [5.98679, 52.62728], [6.08556, 52.66327], [6.11989, 52.66488]]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 1900,
      "areaName": "Sudwest-Fryslan"
    },
    "geometry": {
      "type": "MultiPolygon",
      "coordinates": [[[[5.40127, 52.91147], [5.40089, 52.91172], [5.40208, 52.91419], [5.40291, 52.91281], [5.40127, 52.91147]]], [[[5.40232, 52.91678], [5.40255, 52.91839], [5.40453, 52.91917], [5.40458, 52.919], [5.40232, 52.91678]]], [[[5.40804, 52.95659], [5.40959, 52.95577], [5.40759, 52.95361], [5.40674, 52.95569], [5.40804, 52.95659]]], [[[5.40507, 52.97483], [5.40325, 52.97511], [5.40409, 52.97726], [5.40537, 52.97604], [5.40507, 52.97483]]], [[[5.40347, 52.97393], [5.40134, 52.9745], [5.40238, 52.97771], [5.40321, 52.97723], [5.40276, 52.97509], [5.40347, 52.97393]]], [[[5.39861, 52.9956], [5.39876, 52.99385], [5.39913, 52.99352], [5.39873, 52.99299], [5.39861, 52.9956]]], [[[5.32986, 53.07348], [5.32979, 53.07293], [5.3286, 53.07292], [5.32878, 53.07353], [5.32986, 53.07348]]], [[[5.36752, 53.07631], [5.38683, 53.06876], [5.39528, 53.05558], [5.37182, 53.05571], [5.36752, 53.07631]]], [[[5.32695, 53.07199], [5.32806, 53.06842], [5.32291, 53.07188], [5.29586, 53.06674], [5.20777, 53.01673], [5.16588, 52.99987], [5.29189, 53.06766], [5.3235, 53.07279], [5.32321, 53.07884], [5.32688, 53.07964], [5.32695, 53.07199]]], [[[5.33465, 53.07369], [5.33728, 53.06506], [5.34055, 53.0634], [5.33715, 53.06479], [5.33095, 53.07369], [5.33237, 53.07478], [5.33146, 53.07754], [5.33285, 53.08025], [5.33465, 53.07369]]], [[[5.42168, 53.15374], [5.46834, 53.14333], [5.47474, 53.1464], [5.48432, 53.13699], [5.49252, 53.14201], [5.50498, 53.13473], [5.51153, 53.14574], [5.53121, 53.14789], [5.55366, 53.12967], [5.52799, 53.11482], [5.52702, 53.10452], [5.55681, 53.10128], [5.56618, 53.08426], [5.58801, 53.08437], [5.59173, 53.07042], [5.62396, 53.07522], [5.6393, 53.06685], [5.65538, 53.06663], [5.66814, 53.07459], [5.67729, 53.07711], [5.68053, 53.0712], [5.70126, 53.07947], [5.70237, 53.06677], [5.75543, 53.04684], [5.73671, 53.03015], [5.73327, 53.01564], [5.74883, 53.00758], [5.71686, 52.99568], [5.70654, 52.98448], [5.68849, 52.98558], [5.68933, 52.93297], [5.64246, 52.93617], [5.63998, 52.92247], [5.59426, 52.91541], [5.56478, 52.94748], [5.51227, 52.92721], [5.47719, 52.90274], [5.50182, 52.88021], [5.49552, 52.87382], [5.4771, 52.86876], [5.47234, 52.87303], [5.4261, 52.87329], [5.441, 52.85092], [5.42612, 52.84813], [5.36261, 52.8733], [5.35368, 52.88599], [5.36148, 52.88757], [5.35207, 52.88631], [5.36989, 52.89936], [5.40643, 52.90986], [5.40923, 52.92195], [5.39564, 52.94263], [5.41245, 52.95334], [5.40797, 52.95971], [5.40303, 52.95964], [5.41213, 52.96071], [5.43439, 52.97221], [5.41142, 52.96099], [5.39681, 53.00256], [5.40789, 53.01327], [5.40924, 53.02276], [5.39885, 53.02274], [5.39601, 53.02852], [5.40274, 53.03119], [5.4012, 53.03773], [5.40685, 53.0331], [5.40541, 53.04588], [5.39505, 53.03192], [5.38855, 53.04333], [5.37347, 53.04529], [5.38034, 53.0481], [5.37192, 53.05513], [5.39155, 53.05486], [5.39275, 53.04918], [5.39235, 53.05484], [5.4038, 53.0518], [5.3794, 53.09167], [5.33807, 53.07273], [5.33998, 53.06644], [5.33967, 53.06495], [5.33425, 53.07837], [5.34765, 53.07732], [5.37795, 53.095], [5.37841, 53.10823], [5.40098, 53.11757], [5.41128, 53.15182], [5.42168, 53.15374]]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 1901,
      "areaName": "Bodegraven-Reeuwijk"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[4.71303, 52.07693], [4.70473, 52.09524], [4.79208, 52.12229], [4.82538, 52.10709], [4.82981, 52.06682], [4.8732, 52.06875], [4.82949, 52.04981], [4.8067, 52.03317], [4.80993, 52.02676], [4.77877, 52.01462], [4.75099, 52.0139], [4.7437, 52.02261], [4.71985, 52.02648], [4.71626, 52.03822], [4.67731, 52.04397], [4.6798, 52.05207], [4.669, 52.05234], [4.66055, 52.06269], [4.67725, 52.06552], [4.68197, 52.0591], [4.6853, 52.06939], [4.69441, 52.06777], [4.69653, 52.07455], [4.71303, 52.07693]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 1903,
      "areaName": "Eijsden-Margraten"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[5.83628, 50.83], [5.83612, 50.83597], [5.85946, 50.83368], [5.86414, 50.82334], [5.83924, 50.80759], [5.81941, 50.80524], [5.84424, 50.77455], [5.84504, 50.76537], [5.83091, 50.75863], [5.80741, 50.75612], [5.79322, 50.7702], [5.7845, 50.76717], [5.77358, 50.78325], [5.7449, 50.76882], [5.73918, 50.75707], [5.72027, 50.76471], [5.69903, 50.75527], [5.68271, 50.75752], [5.70151, 50.78164], [5.69126, 50.79556], [5.69711, 50.80856], [5.71694, 50.80381], [5.71731, 50.8145], [5.74348, 50.82132], [5.74064, 50.83916], [5.75486, 50.84184], [5.75734, 50.85529], [5.80164, 50.84988], [5.80784, 50.84147], [5.82124, 50.83876], [5.82064, 50.83186], [5.83628, 50.83]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 1904,
      "areaName": "Stichtse Vecht"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[5.00723, 52.23169], [5.02107, 52.28299], [5.03053, 52.28849], [5.04278, 52.28249], [5.05954, 52.28932], [5.06547, 52.2852], [5.0659, 52.28055], [5.06052, 52.28517], [5.0486, 52.27703], [5.02302, 52.27285], [5.03175, 52.25524], [5.04294, 52.25598], [5.05773, 52.23535], [5.0371, 52.22534], [5.03665, 52.20214], [5.02129, 52.20189], [5.0372, 52.19795], [5.0325, 52.18411], [5.04205, 52.18337], [5.04642, 52.16593], [5.11529, 52.17985], [5.11884, 52.17241], [5.09489, 52.15535], [5.12053, 52.14554], [5.1034, 52.12985], [5.08717, 52.13567], [5.0612, 52.12256], [5.04756, 52.12997], [5.03268, 52.11677], [5.0031, 52.14205], [4.9701, 52.12244], [4.96099, 52.13337], [4.94398, 52.1275], [4.9236, 52.14732], [4.91178, 52.14425], [4.90964, 52.16187], [4.92861, 52.1672], [4.94857, 52.18578], [4.95088, 52.19864], [4.9666, 52.20005], [4.98041, 52.22685], [5.00723, 52.23169]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 1908,
      "areaName": "Menameradiel"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[5.62079, 53.20805], [5.60056, 53.22976], [5.62858, 53.2399], [5.61416, 53.24862], [5.61784, 53.25576], [5.68158, 53.24124], [5.73362, 53.24851], [5.74392, 53.2411], [5.72977, 53.23525], [5.73815, 53.23128], [5.73416, 53.2158], [5.74711, 53.21514], [5.73474, 53.21122], [5.74541, 53.18523], [5.72493, 53.16608], [5.71324, 53.17523], [5.69915, 53.17374], [5.68581, 53.18192], [5.65284, 53.16626], [5.63973, 53.17133], [5.6235, 53.1683], [5.6047, 53.18387], [5.61829, 53.19145], [5.60465, 53.20435], [5.62079, 53.20805]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 1911,
      "areaName": "Hollands Kroon"
    },
    "geometry": {
      "type": "MultiPolygon",
      "coordinates": [[[[4.94312, 52.91038], [4.94062, 52.90774], [4.93758, 52.90702], [4.94199, 52.91024], [4.94312, 52.91038]]], [[[5.02539, 52.94309], [5.03843, 52.94283], [5.03138, 52.93713], [5.03804, 52.93342], [5.0354, 52.93756], [5.04602, 52.93139], [5.04964, 52.92705], [5.03895, 52.93136], [5.03785, 52.92151], [5.04989, 52.92459], [5.11374, 52.85167], [5.10415, 52.77445], [5.06972, 52.7681], [5.0421, 52.75264], [4.94439, 52.75366], [4.89734, 52.70691], [4.85809, 52.72335], [4.84768, 52.72026], [4.85038, 52.72538], [4.80853, 52.76675], [4.829, 52.77533], [4.83457, 52.80778], [4.79442, 52.84737], [4.78256, 52.85144], [4.75886, 52.84869], [4.77022, 52.87761], [4.79491, 52.91258], [4.80833, 52.91434], [4.87978, 52.88843], [4.93873, 52.90454], [4.96816, 52.93075], [5.02093, 52.93486], [5.02539, 52.94309]]], [[[5.04362, 52.94448], [5.04781, 52.94438], [5.04252, 52.94441], [5.03814, 52.9461], [5.04362, 52.94448]]], [[[5.05604, 52.94109], [5.04391, 52.93569], [5.05267, 52.92704], [5.05279, 52.9266], [5.05262, 52.92622], [5.05114, 52.92494], [5.05247, 52.9271], [5.03953, 52.93801], [5.16588, 52.99987], [5.05604, 52.94109]]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 1916,
      "areaName": "Leidschendam-Voorburg"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[4.36778, 52.08958], [4.40116, 52.11187], [4.4279, 52.10147], [4.46684, 52.12898], [4.49302, 52.08775], [4.42083, 52.06258], [4.40392, 52.07785], [4.38458, 52.07623], [4.35601, 52.06157], [4.35963, 52.05726], [4.348, 52.0565], [4.3422, 52.06113], [4.35552, 52.06804], [4.33521, 52.075], [4.36778, 52.08958]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 1924,
      "areaName": "Goeree-Overflakkee"
    },
    "geometry": {
      "type": "MultiPolygon",
      "coordinates": [[[[4.21194, 51.66145], [4.21203, 51.6611], [4.21362, 51.65974], [4.21055, 51.66075], [4.21194, 51.66145]]], [[[4.21257, 51.66603], [4.21464, 51.66413], [4.20959, 51.66341], [4.20862, 51.66414], [4.21257, 51.66603]]], [[[4.20515, 51.67196], [4.20602, 51.67143], [4.20525, 51.66868], [4.20303, 51.66773], [4.19948, 51.66816], [4.20495, 51.66898], [4.20515, 51.67196]]], [[[4.20477, 51.67245], [4.20142, 51.67008], [4.20134, 51.66873], [4.20074, 51.66999], [4.20477, 51.67245]]], [[[4.18982, 51.67386], [4.19653, 51.67117], [4.19757, 51.66852], [4.19158, 51.67038], [4.18982, 51.67386]]], [[[4.18353, 51.67935], [4.18016, 51.67569], [4.18735, 51.67385], [4.17929, 51.67565], [4.18353, 51.67935]]], [[[4.18942, 51.67932], [4.19094, 51.67961], [4.19298, 51.67873], [4.18831, 51.67928], [4.18651, 51.68007], [4.18942, 51.67932]]], [[[4.18551, 51.6816], [4.18439, 51.68131], [4.18415, 51.67969], [4.18464, 51.68083], [4.1867, 51.68115], [4.1871, 51.68062], [4.18485, 51.68051], [4.18437, 51.6797], [4.18483, 51.6801], [4.18544, 51.6802], [4.18885, 51.67896], [4.1931, 51.67857], [4.18885, 51.6789], [4.18539, 51.68014], [4.18391, 51.67944], [4.18438, 51.682], [4.18551, 51.6816]]], [[[4.18971, 51.68225], [4.19102, 51.68081], [4.19325, 51.67932], [4.18625, 51.68193], [4.18971, 51.68225]]], [[[4.3678, 51.6911], [4.36992, 51.69038], [4.36924, 51.68902], [4.36648, 51.69075], [4.3678, 51.6911]]], [[[4.35823, 51.69476], [4.35664, 51.69594], [4.35849, 51.69804], [4.35891, 51.69637], [4.35823, 51.69476]]], [[[4.4067, 51.70519], [4.39909, 51.70218], [4.39749, 51.70248], [4.39794, 51.70435], [4.4067, 51.70519]]], [[[4.33996, 51.70564], [4.34214, 51.70538], [4.34626, 51.70448], [4.33303, 51.7045], [4.33996, 51.70564]]], [[[4.3391, 51.71063], [4.34203, 51.71168], [4.34493, 51.70957], [4.34044, 51.7101], [4.33863, 51.71075], [4.33658, 51.71175], [4.3391, 51.71063]]], [[[4.33658, 51.71132], [4.33485, 51.71191], [4.33423, 51.71324], [4.33493, 51.71195], [4.33658, 51.71132]]], [[[3.88494, 51.75993], [3.883, 51.75704], [3.87747, 51.7585], [3.88164, 51.76007], [3.88494, 51.75993]]], [[[3.93578, 51.7903], [3.96565, 51.77439], [3.94182, 51.77657], [3.90295, 51.76985], [3.93578, 51.7903]]], [[[4.14689, 51.8028], [4.15337, 51.80235], [4.15537, 51.80134], [4.14868, 51.79852], [4.14111, 51.79956], [4.14689, 51.8028]]], [[[4.1397, 51.80007], [4.13881, 51.80124], [4.14061, 51.80295], [4.13961, 51.80112], [4.1397, 51.80007]]], [[[4.14567, 51.80381], [4.14306, 51.80326], [4.14144, 51.80223], [4.14274, 51.80369], [4.14567, 51.80381]]], [[[3.96477, 51.80217], [3.96687, 51.79728], [3.95695, 51.79982], [3.95945, 51.80178], [3.96477, 51.80217]]], [[[3.99174, 51.844], [3.98985, 51.84387], [3.98866, 51.84432], [3.99006, 51.8446], [3.99174, 51.844]]], [[[4.01661, 51.84963], [4.01904, 51.84748], [3.99943, 51.84798], [3.96635, 51.83914], [4.00849, 51.84272], [4.0151, 51.84026], [4.01286, 51.83858], [4.01027, 51.83995], [4.00966, 51.83994], [4.00863, 51.84023], [4.00741, 51.84045], [4.00711, 51.84048], [4.00705, 51.84043], [4.01302, 51.838], [4.00686, 51.83445], [4.03403, 51.83159], [4.0289, 51.82663], [4.03571, 51.82365], [4.03334, 51.82967], [4.04569, 51.82865], [4.04363, 51.81709], [4.04957, 51.82201], [4.05491, 51.82101], [4.12893, 51.79185], [4.12553, 51.78855], [4.14345, 51.78797], [4.16311, 51.77823], [4.19524, 51.77677], [4.19011, 51.77299], [4.19228, 51.77328], [4.19373, 51.77531], [4.19568, 51.77631], [4.19415, 51.77156], [4.24748, 51.74235], [4.26428, 51.72459], [4.29886, 51.71669], [4.31897, 51.70548], [4.32946, 51.70262], [4.36131, 51.70262], [4.3664, 51.70976], [4.36589, 51.70293], [4.38371, 51.70209], [4.39542, 51.71101], [4.39929, 51.71018], [4.40102, 51.70934], [4.40147, 51.70892], [4.3978, 51.70793], [4.39722, 51.70229], [4.40364, 51.69871], [4.38617, 51.69354], [4.38794, 51.69605], [4.3808, 51.69938], [4.37665, 51.69937], [4.38377, 51.69585], [4.37294, 51.69342], [4.37143, 51.69474], [4.37525, 51.69615], [4.37579, 51.69675], [4.3755, 51.69848], [4.36898, 51.69517], [4.37389, 51.69985], [4.36728, 51.70045], [4.36249, 51.69347], [4.35924, 51.70061], [4.34577, 51.70093], [4.35714, 51.70002], [4.35412, 51.69565], [4.36454, 51.69153], [4.36888, 51.68504], [4.35714, 51.67122], [4.33705, 51.66438], [4.28065, 51.65446], [4.23554, 51.65905], [4.21057, 51.67691], [4.18912, 51.68298], [4.16838, 51.68344], [4.16429, 51.68725], [4.15735, 51.68249], [4.15604, 51.69603], [4.12911, 51.70613], [4.08639, 51.70695], [4.0882, 51.70003], [4.08563, 51.70665], [4.05818, 51.71514], [4.0507, 51.7117], [4.05903, 51.70721], [4.05461, 51.70658], [4.0506, 51.71132], [4.04925, 51.7139], [4.04969, 51.71816], [4.04069, 51.72724], [4.04515, 51.73097], [4.03279, 51.73908], [4.03892, 51.74369], [4.02862, 51.74764], [4.02402, 51.74187], [4.01749, 51.75226], [4.02985, 51.7569], [4.01825, 51.76035], [4.02535, 51.76829], [4.02048, 51.77925], [3.98892, 51.8024], [3.95324, 51.80391], [3.90601, 51.79185], [3.88922, 51.7937], [3.89547, 51.78463], [3.87947, 51.77864], [3.8695, 51.78118], [3.85947, 51.76532], [3.87141, 51.75097], [3.83893, 51.75838], [3.86444, 51.77813], [3.85509, 51.80665], [3.8668, 51.81852], [3.99401, 51.84858], [4.01661, 51.84963]], [[4.08728, 51.80722], [4.08029, 51.8098], [4.07905, 51.80946], [4.08369, 51.80723], [4.08728, 51.80722]], [[4.06778, 51.81462], [4.06182, 51.81582], [4.07082, 51.81293], [4.06967, 51.8143], [4.06778, 51.81462]], [[4.05662, 51.8185], [4.0545, 51.81919], [4.06043, 51.81596], [4.06222, 51.8167], [4.06216, 51.81703], [4.05662, 51.8185]], [[4.04014, 51.8233], [4.04033, 51.82339], [4.03855, 51.82431], [4.03841, 51.8242], [4.04014, 51.8233]]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 1926,
      "areaName": "Pijnacker-Nootdorp"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[4.40136, 52.05334], [4.45056, 52.04921], [4.45764, 52.03862], [4.47074, 52.04048], [4.47679, 52.03168], [4.45715, 52.02209], [4.45872, 52.0022], [4.40791, 51.9682], [4.38592, 52.00484], [4.39452, 52.01126], [4.37974, 52.02673], [4.39393, 52.03305], [4.37265, 52.04092], [4.40136, 52.05334]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 1927,
      "areaName": "Molenwaard"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[4.91976, 51.91893], [4.92778, 51.90091], [4.91076, 51.88771], [4.7956, 51.84498], [4.70306, 51.84183], [4.68319, 51.84849], [4.68071, 51.85964], [4.70024, 51.87971], [4.67291, 51.87479], [4.64214, 51.8802], [4.63708, 51.87629], [4.61925, 51.88844], [4.71581, 51.89595], [4.76395, 51.91498], [4.81032, 51.92417], [4.83554, 51.94007], [4.88511, 51.93859], [4.91458, 51.9426], [4.9263, 51.95093], [4.93923, 51.92894], [4.91976, 51.91893]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 1955,
      "areaName": "Montferland"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[6.27226, 51.87465], [6.26184, 51.86814], [6.21506, 51.86763], [6.19493, 51.87527], [6.18201, 51.88578], [6.19109, 51.89166], [6.09143, 51.93872], [6.09039, 51.96784], [6.10879, 51.96716], [6.14468, 51.98052], [6.15804, 51.95875], [6.20471, 51.93667], [6.20312, 51.9422], [6.22075, 51.94458], [6.30207, 51.94413], [6.30689, 51.93785], [6.29871, 51.93904], [6.28969, 51.9253], [6.31583, 51.9182], [6.30602, 51.90651], [6.33228, 51.89327], [6.32423, 51.88892], [6.33163, 51.87482], [6.32453, 51.86902], [6.29893, 51.86777], [6.27226, 51.87465]]]
    }
  }, {
    "type": "Feature",
    "properties": {
      "areaCode": 1987,
      "areaName": "Menterwolde"
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [[[6.88345, 53.12575], [6.82116, 53.12884], [6.80324, 53.12409], [6.79403, 53.13651], [6.81111, 53.14254], [6.80791, 53.14693], [6.81904, 53.14633], [6.81586, 53.16394], [6.827, 53.18478], [6.81143, 53.18574], [6.81998, 53.19119], [6.81421, 53.19364], [6.88395, 53.22578], [6.90216, 53.22261], [6.92004, 53.22734], [6.9294, 53.21282], [6.91682, 53.19557], [6.92512, 53.19429], [6.9033, 53.16646], [6.94224, 53.16653], [6.96529, 53.11083], [6.95934, 53.12018], [6.89699, 53.12851], [6.88345, 53.12575]]]
    }
  }]
};
},{}],"epB2":[function(require,module,exports) {
"use strict";

var d3 = _interopRequireWildcard(require("d3"));

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

// Define global variables
var vis = d3.select('#vis');
var viewWidth, viewHeight, projection;

var resize = function resize() {
  var container = document.getElementById('viscontainer');
  viewWidth = container.clientWidth;
  viewHeight = container.clientHeight;
  vis = vis.attr('width', viewWidth).attr('height', viewHeight);
};

var initMap = function initMap(features, config) {
  var m = config.map;
  var f = config.features; // Mercator projection is worldmap on a square

  projection = d3.geoMercator().scale(m.scale).center(m.center).translate(m.translate);
  var path = d3.geoPath().projection(projection); // create group or use existing one

  var map = d3.select('#map');

  if (map.empty()) {
    map = vis.append('g').attr('id', m.id);
  } // features paths


  map.selectAll('path').data(features).enter().append('path').attr('d', path).attr('vector-effect', 'non-scaling-stroke') // keeps stroke-width the same if we transform
  .on('mouseover', function (d, i, nodes) {
    d3.select(nodes[i]).classed('hover', true);
  }).on('mouseout', function (d, i, nodes) {
    d3.select(nodes[i]).classed('hover', false);
  }).on('click', function (d) {
    console.log(d[f.props][f.text]);
    console.log(d[f.props]);
  });
};

var start = function start() {
  resize();
  d3.select(window).on('resize', resize); // load data, requires hardcoded string or parcel wont bundle it

  var data = require('./geoJSON/cbs_2013');

  var features = data.features;
  var config = {
    map: {
      id: 'map',
      scale: 7000,
      center: [5.5, 52.2],
      // longitude, latitude of netherlands
      translate: [viewWidth / 2, viewHeight / 2] // center

    },
    features: {
      // specify the name of the keys that are used
      props: 'properties',
      text: 'areaName'
    }
  };
  initMap(features, config); // example of lat/long

  var cities = [{
    name: 'Amsterdam',
    lon: '4.899431',
    lat: '52.379189'
  }, {
    name: 'Delft',
    lon: '4.3570677',
    lat: '52.0115769'
  }];
  var points = vis.append('g');
  points.selectAll('circle').data(cities).enter().append('circle').attr('cx', function (d) {
    return projection([d.lon, d.lat])[0];
  }).attr('cy', function (d) {
    return projection([d.lon, d.lat])[1];
  }).attr('r', 3).style('fill', 'red');
}; // document.addEventListener('DOMContentLoaded', () => start());


start();
},{"d3":"BG5c","./geoJSON/cbs_2013":"ep6D"}]},{},["epB2"], null)
//# sourceMappingURL=/datavis/main.5c1cd1d1.map